From 37623df572e9abda4619256dbfe739539f74a450 Mon Sep 17 00:00:00 2001
From: "matt@pallissard.net" <matt@pallissard.net>
Date: Tue, 17 Nov 2020 21:49:57 -0800
Subject: [PATCH 09/16] multicore: initial parsing import

---
 src/ocaml/parsing/410+multicore/ast_helper.ml | 27 ++++++++++++++++++
 .../parsing/410+multicore/ast_helper.mli      |  7 +++++
 .../parsing/410+multicore/ast_iterator.ml     | 20 +++++++++++++
 .../parsing/410+multicore/ast_iterator.mli    |  1 +
 src/ocaml/parsing/410+multicore/ast_mapper.ml | 23 +++++++++++++++
 .../parsing/410+multicore/ast_mapper.mli      |  2 ++
 src/ocaml/parsing/410+multicore/parsetree.mli | 27 ++++++++++++++++++
 src/ocaml/parsing/410+multicore/pprintast.ml  | 22 +++++++++++++++
 src/ocaml/parsing/410+multicore/printast.ml   | 28 +++++++++++++++++++
 9 files changed, 157 insertions(+)

diff --git a/src/ocaml/parsing/410+multicore/ast_helper.ml b/src/ocaml/parsing/410+multicore/ast_helper.ml
index 5c3a22f9..78075d4a 100644
--- a/src/ocaml/parsing/410+multicore/ast_helper.ml
+++ b/src/ocaml/parsing/410+multicore/ast_helper.ml
@@ -167,6 +167,7 @@ module Pat = struct
   let unpack ?loc ?attrs a = mk ?loc ?attrs (Ppat_unpack a)
   let open_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_open (a, b))
   let exception_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_exception a)
+  let effect_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_effect(a, b))
   let extension ?loc ?attrs a = mk ?loc ?attrs (Ppat_extension a)
 end
 
@@ -273,6 +274,7 @@ module Sig = struct
   let type_subst ?loc a = mk ?loc (Psig_typesubst a)
   let type_extension ?loc a = mk ?loc (Psig_typext a)
   let exception_ ?loc a = mk ?loc (Psig_exception a)
+  let effect_ ?loc a = mk ?loc (Psig_effect a)
   let module_ ?loc a = mk ?loc (Psig_module a)
   let mod_subst ?loc a = mk ?loc (Psig_modsubst a)
   let rec_module ?loc a = mk ?loc (Psig_recmodule a)
@@ -299,6 +301,7 @@ module Str = struct
   let type_ ?loc rec_flag a = mk ?loc (Pstr_type (rec_flag, a))
   let type_extension ?loc a = mk ?loc (Pstr_typext a)
   let exception_ ?loc a = mk ?loc (Pstr_exception a)
+  let effect_ ?loc a = mk ?loc (Pstr_effect a)
   let module_ ?loc a = mk ?loc (Pstr_module a)
   let rec_module ?loc a = mk ?loc (Pstr_recmodule a)
   let modtype ?loc a = mk ?loc (Pstr_modtype a)
@@ -603,6 +606,30 @@ module Te = struct
      pext_attributes = add_docs_attrs docs (add_info_attrs info attrs);
     }
 
+  let effect_constructor ?(loc = !default_loc) ?(attrs = []) name kind =
+    {
+     peff_name = name;
+     peff_kind = kind;
+     peff_loc = loc;
+     peff_attributes = attrs;
+    }
+
+  let effect_decl ?(loc = !default_loc) ?(attrs = []) ?(args = []) name res =
+    {
+     peff_name = name;
+     peff_kind = Peff_decl(args, res);
+     peff_loc = loc;
+     peff_attributes = attrs;
+    }
+
+  let effect_rebind ?(loc = !default_loc) ?(attrs = []) name lid =
+    {
+     peff_name = name;
+     peff_kind = Peff_rebind lid;
+     peff_loc = loc;
+     peff_attributes = attrs;
+    }
+
 end
 
 module Csig = struct
diff --git a/src/ocaml/parsing/410+multicore/ast_helper.mli b/src/ocaml/parsing/410+multicore/ast_helper.mli
index ccd1c20b..d8521825 100644
--- a/src/ocaml/parsing/410+multicore/ast_helper.mli
+++ b/src/ocaml/parsing/410+multicore/ast_helper.mli
@@ -124,6 +124,7 @@ module Pat:
     val unpack: ?loc:loc -> ?attrs:attrs -> str_opt -> pattern
     val open_: ?loc:loc -> ?attrs:attrs  -> lid -> pattern -> pattern
     val exception_: ?loc:loc -> ?attrs:attrs -> pattern -> pattern
+    val effect_: ?loc:loc -> ?attrs:attrs -> pattern -> pattern -> pattern
     val extension: ?loc:loc -> ?attrs:attrs -> extension -> pattern
   end
 
@@ -239,6 +240,10 @@ module Te:
       extension_constructor
     val rebind: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?info:info ->
       str -> lid -> extension_constructor
+
+    val effect_constructor: ?loc:loc -> ?attrs:attrs -> str -> effect_constructor_kind -> effect_constructor
+    val effect_decl: ?loc:loc -> ?attrs:attrs -> ?args:core_type list -> str -> core_type -> effect_constructor
+    val effect_rebind: ?loc:loc -> ?attrs:attrs -> str -> lid -> effect_constructor
   end
 
 (** {1 Module language} *)
@@ -287,6 +292,7 @@ module Sig:
     val type_: ?loc:loc -> rec_flag -> type_declaration list -> signature_item
     val type_subst: ?loc:loc -> type_declaration list -> signature_item
     val type_extension: ?loc:loc -> type_extension -> signature_item
+    val effect_: ?loc:loc -> effect_constructor -> signature_item
     val exception_: ?loc:loc -> type_exception -> signature_item
     val module_: ?loc:loc -> module_declaration -> signature_item
     val mod_subst: ?loc:loc -> module_substitution -> signature_item
@@ -311,6 +317,7 @@ module Str:
     val primitive: ?loc:loc -> value_description -> structure_item
     val type_: ?loc:loc -> rec_flag -> type_declaration list -> structure_item
     val type_extension: ?loc:loc -> type_extension -> structure_item
+    val effect_: ?loc:loc -> effect_constructor -> structure_item
     val exception_: ?loc:loc -> type_exception -> structure_item
     val module_: ?loc:loc -> module_binding -> structure_item
     val rec_module: ?loc:loc -> module_binding list -> structure_item
diff --git a/src/ocaml/parsing/410+multicore/ast_iterator.ml b/src/ocaml/parsing/410+multicore/ast_iterator.ml
index 5f016c00..c6a99b26 100755
--- a/src/ocaml/parsing/410+multicore/ast_iterator.ml
+++ b/src/ocaml/parsing/410+multicore/ast_iterator.ml
@@ -43,6 +43,7 @@ type iterator = {
   expr: iterator -> expression -> unit;
   extension: iterator -> extension -> unit;
   extension_constructor: iterator -> extension_constructor -> unit;
+  effect_constructor: iterator -> effect_constructor -> unit;
   include_declaration: iterator -> include_declaration -> unit;
   include_description: iterator -> include_description -> unit;
   label_declaration: iterator -> label_declaration -> unit;
@@ -197,6 +198,21 @@ module T = struct
     sub.location sub pext_loc;
     sub.attributes sub pext_attributes
 
+  let iter_effect_constructor_kind sub = function
+      Peff_decl(ctl, cto) ->
+        List.iter (sub.typ sub) ctl; sub.typ sub cto
+    | Peff_rebind li ->
+        iter_loc sub li
+
+  let iter_effect_constructor sub
+      {peff_name;
+       peff_kind;
+       peff_loc;
+       peff_attributes} =
+    iter_loc sub peff_name;
+    iter_effect_constructor_kind sub peff_kind;
+    sub.location sub peff_loc;
+    sub.attributes sub peff_attributes
 end
 
 module CT = struct
@@ -276,6 +292,7 @@ module MT = struct
     | Psig_typesubst l ->
       List.iter (sub.type_declaration sub) l
     | Psig_typext te -> sub.type_extension sub te
+    | Psig_effect ed -> sub.effect_constructor sub ed
     | Psig_exception ed -> sub.type_exception sub ed
     | Psig_module x -> sub.module_declaration sub x
     | Psig_modsubst x -> sub.module_substitution sub x
@@ -322,6 +339,7 @@ module M = struct
     | Pstr_primitive vd -> sub.value_description sub vd
     | Pstr_type (_rf, l) -> List.iter (sub.type_declaration sub) l
     | Pstr_typext te -> sub.type_extension sub te
+    | Pstr_effect ed -> sub.effect_constructor sub ed
     | Pstr_exception ed -> sub.type_exception sub ed
     | Pstr_module x -> sub.module_binding sub x
     | Pstr_recmodule l -> List.iter (sub.module_binding sub) l
@@ -449,6 +467,7 @@ module P = struct
     | Ppat_lazy p -> sub.pat sub p
     | Ppat_unpack s -> iter_loc sub s
     | Ppat_exception p -> sub.pat sub p
+    | Ppat_effect (p1,p2) -> sub.pat sub p1; sub.pat sub p2
     | Ppat_extension x -> sub.extension sub x
     | Ppat_open (lid, p) ->
         iter_loc sub lid; sub.pat sub p
@@ -546,6 +565,7 @@ let default_iterator =
     type_extension = T.iter_type_extension;
     type_exception = T.iter_type_exception;
     extension_constructor = T.iter_extension_constructor;
+    effect_constructor = T.iter_effect_constructor;
     value_description =
       (fun this {pval_name; pval_type; pval_prim = _; pval_loc;
                  pval_attributes} ->
diff --git a/src/ocaml/parsing/410+multicore/ast_iterator.mli b/src/ocaml/parsing/410+multicore/ast_iterator.mli
index 26308d20..4e9f1d43 100755
--- a/src/ocaml/parsing/410+multicore/ast_iterator.mli
+++ b/src/ocaml/parsing/410+multicore/ast_iterator.mli
@@ -45,6 +45,7 @@ type iterator = {
   expr: iterator -> expression -> unit;
   extension: iterator -> extension -> unit;
   extension_constructor: iterator -> extension_constructor -> unit;
+  effect_constructor: iterator -> effect_constructor -> unit;
   include_declaration: iterator -> include_declaration -> unit;
   include_description: iterator -> include_description -> unit;
   label_declaration: iterator -> label_declaration -> unit;
diff --git a/src/ocaml/parsing/410+multicore/ast_mapper.ml b/src/ocaml/parsing/410+multicore/ast_mapper.ml
index f8ff4276..56761c27 100644
--- a/src/ocaml/parsing/410+multicore/ast_mapper.ml
+++ b/src/ocaml/parsing/410+multicore/ast_mapper.ml
@@ -44,6 +44,8 @@ type mapper = {
   class_type_field: mapper -> class_type_field -> class_type_field;
   constructor_declaration: mapper -> constructor_declaration
                            -> constructor_declaration;
+  effect_constructor: mapper -> effect_constructor
+                         -> effect_constructor;
   expr: mapper -> expression -> expression;
   extension: mapper -> extension -> extension;
   extension_constructor: mapper -> extension_constructor
@@ -208,6 +210,23 @@ module T = struct
       (map_loc sub pext_name)
       (map_extension_constructor_kind sub pext_kind)
 
+  let map_effect_constructor_kind sub = function
+      Peff_decl(ctl, cto) ->
+        Peff_decl(List.map (sub.typ sub) ctl, sub.typ sub cto)
+    | Peff_rebind li ->
+        Peff_rebind (map_loc sub li)
+
+  let map_effect_constructor sub
+      {peff_name;
+       peff_kind;
+       peff_loc;
+       peff_attributes} =
+    Te.effect_constructor
+      (map_loc sub peff_name)
+      (map_effect_constructor_kind sub peff_kind)
+      ~loc:(sub.location sub peff_loc)
+      ~attrs:(sub.attributes sub peff_attributes)
+
 end
 
 module CT = struct
@@ -294,6 +313,7 @@ module MT = struct
     | Psig_typesubst l ->
         type_subst ~loc (List.map (sub.type_declaration sub) l)
     | Psig_typext te -> type_extension ~loc (sub.type_extension sub te)
+    | Psig_effect ed -> effect_ ~loc (sub.effect_constructor sub ed)
     | Psig_exception ed -> exception_ ~loc (sub.type_exception sub ed)
     | Psig_module x -> module_ ~loc (sub.module_declaration sub x)
     | Psig_modsubst x -> mod_subst ~loc (sub.module_substitution sub x)
@@ -345,6 +365,7 @@ module M = struct
     | Pstr_primitive vd -> primitive ~loc (sub.value_description sub vd)
     | Pstr_type (rf, l) -> type_ ~loc rf (List.map (sub.type_declaration sub) l)
     | Pstr_typext te -> type_extension ~loc (sub.type_extension sub te)
+    | Pstr_effect ed -> effect_ ~loc (sub.effect_constructor sub ed)
     | Pstr_exception ed -> exception_ ~loc (sub.type_exception sub ed)
     | Pstr_module x -> module_ ~loc (sub.module_binding sub x)
     | Pstr_recmodule l -> rec_module ~loc (List.map (sub.module_binding sub) l)
@@ -481,6 +502,7 @@ module P = struct
     | Ppat_unpack s -> unpack ~loc ~attrs (map_loc sub s)
     | Ppat_open (lid,p) -> open_ ~loc ~attrs (map_loc sub lid) (sub.pat sub p)
     | Ppat_exception p -> exception_ ~loc ~attrs (sub.pat sub p)
+    | Ppat_effect(p1, p2) -> effect_ ~loc ~attrs (sub.pat sub p1) (sub.pat sub p2)
     | Ppat_extension x -> extension ~loc ~attrs (sub.extension sub x)
 end
 
@@ -582,6 +604,7 @@ let default_mapper =
     type_extension = T.map_type_extension;
     type_exception = T.map_type_exception;
     extension_constructor = T.map_extension_constructor;
+    effect_constructor = T.map_effect_constructor;
     value_description =
       (fun this {pval_name; pval_type; pval_prim; pval_loc;
                  pval_attributes} ->
diff --git a/src/ocaml/parsing/410+multicore/ast_mapper.mli b/src/ocaml/parsing/410+multicore/ast_mapper.mli
index 80d70fcc..48df2398 100644
--- a/src/ocaml/parsing/410+multicore/ast_mapper.mli
+++ b/src/ocaml/parsing/410+multicore/ast_mapper.mli
@@ -73,6 +73,8 @@ type mapper = {
   class_type_field: mapper -> class_type_field -> class_type_field;
   constructor_declaration: mapper -> constructor_declaration
                            -> constructor_declaration;
+  effect_constructor: mapper -> effect_constructor
+                         -> effect_constructor;
   expr: mapper -> expression -> expression;
   extension: mapper -> extension -> extension;
   extension_constructor: mapper -> extension_constructor
diff --git a/src/ocaml/parsing/410+multicore/parsetree.mli b/src/ocaml/parsing/410+multicore/parsetree.mli
index 3f943210..77b4e415 100644
--- a/src/ocaml/parsing/410+multicore/parsetree.mli
+++ b/src/ocaml/parsing/410+multicore/parsetree.mli
@@ -247,6 +247,8 @@ and pattern_desc =
          *)
   | Ppat_exception of pattern
         (* exception P *)
+  | Ppat_effect of pattern * pattern
+        (* effect P P *)
   | Ppat_extension of extension
         (* [%id] *)
   | Ppat_open of Longident.t loc * pattern
@@ -533,6 +535,26 @@ and extension_constructor_kind =
          | C = D
        *)
 
+and effect_constructor =
+    {
+     peff_name: string loc;
+     peff_kind : effect_constructor_kind;
+     peff_loc : Location.t;
+     peff_attributes: attributes; (* C [@id1] [@id2] of ... *)
+    }
+
+and effect_constructor_kind =
+    Peff_decl of core_type list * core_type
+      (*
+         | C of T1 * ... * Tn     ([T1; ...; Tn], None)
+         | C: T0                  ([], Some T0)
+         | C: T1 * ... * Tn -> T0 ([T1; ...; Tn], Some T0)
+       *)
+  | Peff_rebind of Longident.t loc
+      (*
+         | C = D
+       *)
+
 (** {1 Class language} *)
 
 (* Type expressions for the class language *)
@@ -755,6 +777,8 @@ and signature_item_desc =
         (* type t1 += ... *)
   | Psig_exception of type_exception
         (* exception C of T *)
+  | Psig_effect of effect_constructor
+        (* effect C : T -> T *)
   | Psig_module of module_declaration
         (* module X = M
            module X : MT *)
@@ -903,6 +927,9 @@ and structure_item_desc =
   | Pstr_exception of type_exception
         (* exception C of T
            exception C = M.X *)
+  | Pstr_effect of effect_constructor
+        (* effect C : T -> T
+           effect C = M.X *)
   | Pstr_module of module_binding
         (* module X = ME *)
   | Pstr_recmodule of module_binding list
diff --git a/src/ocaml/parsing/410+multicore/pprintast.ml b/src/ocaml/parsing/410+multicore/pprintast.ml
index 2e289027..ace1381b 100644
--- a/src/ocaml/parsing/410+multicore/pprintast.ml
+++ b/src/ocaml/parsing/410+multicore/pprintast.ml
@@ -476,6 +476,8 @@ and simple_pattern ctxt (f:Format.formatter) (x:pattern) : unit =
         pp f "@[<2>(lazy@;%a)@]" (simple_pattern ctxt) p
     | Ppat_exception p ->
         pp f "@[<2>exception@;%a@]" (pattern1 ctxt) p
+    | Ppat_effect(p1, p2) ->
+        pp f "@[<2>effect@;%a@;%a@]" (pattern1 ctxt) p1 (pattern1 ctxt) p2
     | Ppat_extension e -> extension ctxt f e
     | Ppat_open (lid, p) ->
         let with_paren =
@@ -845,6 +847,9 @@ and exception_declaration ctxt f x =
     (extension_constructor ctxt) x.ptyexn_constructor
     (item_attributes ctxt) x.ptyexn_attributes
 
+and effect_declaration ctxt f ext =
+    pp f "@[<hov2>effect@ %a@]" (effect_constructor ctxt) ext
+
 and class_signature ctxt f { pcsig_self = ct; pcsig_fields = l ;_} =
   let class_type_field f x =
     match x.pctf_desc with
@@ -1094,6 +1099,8 @@ and signature_item ctxt f x : unit =
       type_extension ctxt f te
   | Psig_exception ed ->
       exception_declaration ctxt f ed
+  | Psig_effect ed ->
+      effect_declaration ctxt f ed
   | Psig_class l ->
       let class_description kwd f ({pci_params=ls;pci_name={txt;_};_} as x) =
         pp f "@[<2>%s %a%a%s@;:@;%a@]%a" kwd
@@ -1310,6 +1317,7 @@ and structure_item ctxt f x =
       pp f "@[<2>%a@]" (bindings ctxt) (rf,l)
   | Pstr_typext te -> type_extension ctxt f te
   | Pstr_exception ed -> exception_declaration ctxt f ed
+  | Pstr_effect ed -> effect_declaration ctxt f ed
   | Pstr_module x ->
       let rec module_helper = function
         | {pmod_desc=Pmod_functor(arg_opt,me'); pmod_attributes = []} ->
@@ -1575,6 +1583,20 @@ and extension_constructor ctxt f x =
         (attributes ctxt) x.pext_attributes
         longident_loc li
 
+and effect_constructor ctxt f x =
+  match x.peff_kind with
+  | Peff_decl(l, r) ->
+      pp f "%s%a:@;%a" x.peff_name.txt (attributes ctxt) x.peff_attributes
+        (fun f -> function
+         | [] -> (core_type1 ctxt) f r
+         | l -> pp f "%a@;->@;%a" (list (core_type1 ctxt) ~sep:"*@;") l
+                   (core_type1 ctxt) r)
+        l
+  | Peff_rebind li ->
+      pp f "%s%a@;=@;%a" x.peff_name.txt (attributes ctxt)
+        x.peff_attributes longident_loc li
+
+
 and case_list ctxt f l : unit =
   let aux f {pc_lhs; pc_guard; pc_rhs} =
     pp f "@;| @[<2>%a%a@;->@;%a@]"
diff --git a/src/ocaml/parsing/410+multicore/printast.ml b/src/ocaml/parsing/410+multicore/printast.ml
index 30a0eeb3..aec21529 100644
--- a/src/ocaml/parsing/410+multicore/printast.ml
+++ b/src/ocaml/parsing/410+multicore/printast.ml
@@ -249,6 +249,10 @@ and pattern i ppf x =
   | Ppat_exception p ->
       line i ppf "Ppat_exception\n";
       pattern i ppf p
+  | Ppat_effect(p1, p2) ->
+      line i ppf "Ppat_effect\n";
+      pattern i ppf p1;
+      pattern i ppf p2
   | Ppat_open (m,p) ->
       line i ppf "Ppat_open \"%a\"\n" fmt_longident_loc m;
       pattern i ppf p
@@ -489,6 +493,24 @@ and extension_constructor_kind i ppf x =
         line i ppf "Pext_rebind\n";
         line (i+1) ppf "%a\n" fmt_longident_loc li;
 
+and effect_constructor i ppf x =
+  line i ppf "effect_constructor %a\n" fmt_location x.peff_loc;
+  attributes i ppf x.peff_attributes;
+  let i = i + 1 in
+  line i ppf "peff_name = \"%s\"\n" x.peff_name.txt;
+  line i ppf "peff_kind =\n";
+  effect_constructor_kind (i + 1) ppf x.peff_kind;
+
+and effect_constructor_kind i ppf x =
+  match x with
+      Peff_decl(a, r) ->
+        line i ppf "Peff_decl\n";
+        list (i+1) core_type ppf a;
+        core_type (i + 1) ppf r;
+    | Peff_rebind li ->
+        line i ppf "Peff_rebind\n";
+        line (i+1) ppf "%a\n" fmt_longident_loc li;
+
 and class_type i ppf x =
   line i ppf "class_type %a\n" fmt_location x.pcty_loc;
   attributes i ppf x.pcty_attributes;
@@ -703,6 +725,9 @@ and signature_item i ppf x =
   | Psig_typext te ->
       line i ppf "Psig_typext\n";
       type_extension i ppf te
+  | Psig_effect ext ->
+      line i ppf "Psig_effect\n";
+      effect_constructor i ppf ext;
   | Psig_exception te ->
       line i ppf "Psig_exception\n";
       type_exception i ppf te
@@ -817,6 +842,9 @@ and structure_item i ppf x =
   | Pstr_typext te ->
       line i ppf "Pstr_typext\n";
       type_extension i ppf te
+  | Pstr_effect ext ->
+      line i ppf "Pstr_effect\n";
+      effect_constructor i ppf ext;
   | Pstr_exception te ->
       line i ppf "Pstr_exception\n";
       type_exception i ppf te
-- 
2.29.2

