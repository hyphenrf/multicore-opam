From 823ffa1cfd4bed5bd2f21cb2d20727ae5016098b Mon Sep 17 00:00:00 2001
From: "matt@pallissard.net" <matt@pallissard.net>
Date: Tue, 17 Nov 2020 21:50:50 -0800
Subject: [PATCH 10/16] multicore: initial preprocess copy

---
 .../preprocess/410+multicore/lexer_raw.mli    |    60 +
 .../preprocess/410+multicore/lexer_raw.mll    |   753 +
 .../410+multicore/parser_explain.ml           |    51 +
 .../410+multicore/parser_printer.ml           |   932 +
 .../preprocess/410+multicore/parser_raw.ml    | 44340 ++++++++++++++++
 .../preprocess/410+multicore/parser_raw.mli   |   533 +
 .../preprocess/410+multicore/parser_raw.mly   |  3927 ++
 .../410+multicore/parser_recover.ml           |  3401 ++
 8 files changed, 53997 insertions(+)
 create mode 100644 src/ocaml/preprocess/410+multicore/lexer_raw.mli
 create mode 100644 src/ocaml/preprocess/410+multicore/lexer_raw.mll
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_explain.ml
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_printer.ml
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_raw.ml
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_raw.mli
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_raw.mly
 create mode 100644 src/ocaml/preprocess/410+multicore/parser_recover.ml

diff --git a/src/ocaml/preprocess/410+multicore/lexer_raw.mli b/src/ocaml/preprocess/410+multicore/lexer_raw.mli
new file mode 100644
index 00000000..3d2a3014
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/lexer_raw.mli
@@ -0,0 +1,60 @@
+(***********************************************************************)
+(*                                                                     *)
+(*                                OCaml                                *)
+(*                                                                     *)
+(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
+(*                                                                     *)
+(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
+(*  en Automatique.  All rights reserved.  This file is distributed    *)
+(*  under the terms of the Q Public License version 1.0.               *)
+(*                                                                     *)
+(***********************************************************************)
+
+open Std
+
+(* Possible errors *)
+type error =
+  | Illegal_character of char
+  | Illegal_escape of string * string option
+  | Reserved_sequence of string * string option
+  | Unterminated_comment of Location.t
+  | Unterminated_string
+  | Unterminated_string_in_comment of Location.t * Location.t
+  | Keyword_as_label of string
+  | Invalid_literal of string
+exception Error of error * Location.t
+
+(* Keywords, manipulated by extensions *)
+type keywords
+val keywords: (string * Parser_raw.token) list -> keywords
+
+(* Monad in which the lexer evaluates *)
+type 'a result =
+  | Return of 'a
+  | Refill of (unit -> 'a result)
+  | Fail of error * Location.t
+
+type preprocessor = (Lexing.lexbuf -> Parser_raw.token) -> Lexing.lexbuf -> Parser_raw.token
+
+type state = {
+  keywords: keywords;
+  mutable buffer: Buffer.t;
+  mutable string_start_loc: Location.t;
+  mutable comment_start_loc: Location.t list;
+  mutable preprocessor: preprocessor option;
+}
+
+val make: ?preprocessor:preprocessor -> keywords -> state
+
+(* The lexical analyzer *)
+
+val skip_sharp_bang: state -> Lexing.lexbuf -> Parser_raw.token result
+val token: state -> Lexing.lexbuf -> Parser_raw.token result
+
+(* Comments are filtered out from the token rule and stored in a global
+   variable. *)
+type comment = string * Location.t
+
+(* If you want to get the raw output, including comments, from the lexer, use
+   the [token_with_comments] entry point. *)
+val token_without_comments : state -> Lexing.lexbuf -> Parser_raw.token result
diff --git a/src/ocaml/preprocess/410+multicore/lexer_raw.mll b/src/ocaml/preprocess/410+multicore/lexer_raw.mll
new file mode 100644
index 00000000..68e548e1
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/lexer_raw.mll
@@ -0,0 +1,753 @@
+(***********************************************************************)
+(*                                                                     *)
+(*                                OCaml                                *)
+(*                                                                     *)
+(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
+(*                                                                     *)
+(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
+(*  en Automatique.  All rights reserved.  This file is distributed    *)
+(*  under the terms of the Q Public License version 1.0.               *)
+(*                                                                     *)
+(***********************************************************************)
+
+(* The lexer definition *)
+
+{
+open Misc
+open Std
+open Lexing
+open Parser_raw
+
+type keywords = (string, Parser_raw.token) Hashtbl.t
+
+type error =
+  | Illegal_character of char
+  | Illegal_escape of string * string option
+  | Reserved_sequence of string * string option
+  | Unterminated_comment of Location.t
+  | Unterminated_string
+  | Unterminated_string_in_comment of Location.t * Location.t
+  | Keyword_as_label of string
+  | Invalid_literal of string
+
+exception Error of error * Location.t
+
+(* Monad in which the lexer evaluates *)
+type 'a result =
+  | Return of 'a
+  | Refill of (unit -> 'a result)
+  | Fail of error * Location.t
+
+let return a = Return a
+
+let fail lexbuf e = Fail (e, Location.curr lexbuf)
+let fail_loc e l = Fail (e,l)
+
+let rec (>>=) (m : 'a result) (f : 'a -> 'b result) : 'b result =
+  match m with
+  | Return a -> f a
+  | Refill u ->
+    Refill (fun () -> u () >>= f)
+  | Fail _ as e -> e
+
+type preprocessor = (Lexing.lexbuf -> Parser_raw.token) -> Lexing.lexbuf -> Parser_raw.token
+
+type state = {
+  keywords: keywords;
+  mutable buffer: Buffer.t;
+  mutable string_start_loc: Location.t;
+  mutable comment_start_loc: Location.t list;
+  mutable preprocessor: preprocessor option;
+}
+
+let make ?preprocessor keywords = {
+  keywords;
+  buffer = Buffer.create 17;
+  string_start_loc = Location.none;
+  comment_start_loc = [];
+  preprocessor;
+}
+
+let lABEL m = m >>= fun v -> return (LABEL v)
+let oPTLABEL m = m >>= fun v -> return (OPTLABEL v)
+
+let rec catch m f = match m with
+  | Fail (e,l) -> f e l
+  | Refill next -> Refill (fun () -> catch (next ()) f)
+  | Return _ -> m
+
+(* The table of keywords *)
+
+let keyword_table : keywords =
+  create_hashtable 149 [
+    "and", AND;
+    "as", AS;
+    "assert", ASSERT;
+    "begin", BEGIN;
+    "class", CLASS;
+    "constraint", CONSTRAINT;
+    "do", DO;
+    "done", DONE;
+    "downto", DOWNTO;
+    "else", ELSE;
+    "end", END;
+    "exception", EXCEPTION;
+    "external", EXTERNAL;
+    "false", FALSE;
+    "for", FOR;
+    "fun", FUN;
+    "function", FUNCTION;
+    "functor", FUNCTOR;
+    "if", IF;
+    "in", IN;
+    "include", INCLUDE;
+    "inherit", INHERIT;
+    "initializer", INITIALIZER;
+    "lazy", LAZY;
+    "let", LET;
+    "match", MATCH;
+    "method", METHOD;
+    "module", MODULE;
+    "mutable", MUTABLE;
+    "new", NEW;
+    "nonrec", NONREC;
+    "object", OBJECT;
+    "of", OF;
+    "open", OPEN;
+    "or", OR;
+(*  "parser", PARSER; *)
+    "private", PRIVATE;
+    "rec", REC;
+    "sig", SIG;
+    "struct", STRUCT;
+    "then", THEN;
+    "to", TO;
+    "true", TRUE;
+    "try", TRY;
+    "type", TYPE;
+    "val", VAL;
+    "virtual", VIRTUAL;
+    "when", WHEN;
+    "while", WHILE;
+    "with", WITH;
+
+    "lor", INFIXOP3("lor"); (* Should be INFIXOP2 *)
+    "lxor", INFIXOP3("lxor"); (* Should be INFIXOP2 *)
+    "mod", INFIXOP3("mod");
+    "land", INFIXOP3("land");
+    "lsl", INFIXOP4("lsl");
+    "lsr", INFIXOP4("lsr");
+    "asr", INFIXOP4("asr");
+]
+
+let keywords l = create_hashtable 11 l
+
+(* To store the position of the beginning of a string and comment *)
+let in_comment state = state.comment_start_loc <> []
+
+(* Escaped chars are interpreted in strings unless they are in comments. *)
+let store_escaped_uchar state lexbuf u =
+  if in_comment state
+  then Buffer.add_string state.buffer (Lexing.lexeme lexbuf)
+  else Buffer.add_utf_8_uchar state.buffer u
+
+(* to translate escape sequences *)
+
+let digit_value c =
+  match c with
+  | 'a' .. 'f' -> 10 + Char.code c - Char.code 'a'
+  | 'A' .. 'F' -> 10 + Char.code c - Char.code 'A'
+  | '0' .. '9' -> Char.code c - Char.code '0'
+  | _ -> assert false
+
+let num_value lexbuf ~base ~first ~last =
+  let c = ref 0 in
+  for i = first to last do
+    let v = digit_value (Lexing.lexeme_char lexbuf i) in
+    assert(v < base);
+    c := (base * !c) + v
+  done;
+  !c
+
+let char_for_backslash = function
+  | 'n' -> '\010'
+  | 'r' -> '\013'
+  | 'b' -> '\008'
+  | 't' -> '\009'
+  | c   -> c
+
+let illegal_escape lexbuf reason =
+  let error = Illegal_escape (Lexing.lexeme lexbuf, Some reason) in
+  fail lexbuf error
+
+let char_for_decimal_code state lexbuf i =
+  let c = num_value lexbuf ~base:10 ~first:i ~last:(i+2) in
+  if (c < 0 || c > 255) then
+    if in_comment state
+    then return 'x'
+    else
+      illegal_escape lexbuf
+        (Printf.sprintf
+          "%d is outside the range of legal characters (0-255)." c)
+  else return (Char.chr c)
+
+let char_for_octal_code state lexbuf i =
+  let c = num_value lexbuf ~base:8 ~first:i ~last:(i+2) in
+  if (c < 0 || c > 255) then
+    if in_comment state
+    then return 'x'
+    else
+      illegal_escape lexbuf
+        (Printf.sprintf
+          "o%o (=%d) is outside the range of legal characters (0-255)." c c)
+  else return (Char.chr c)
+
+let char_for_hexadecimal_code lexbuf i =
+  Char.chr (num_value lexbuf ~base:16 ~first:i ~last:(i+1))
+
+let uchar_for_uchar_escape lexbuf =
+  let illegal_escape lexbuf reason =
+    let error = Illegal_escape (Lexing.lexeme lexbuf, Some reason) in
+    raise (Error (error, Location.curr lexbuf))
+  in
+  let len = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
+  let first = 3 (* skip opening \u{ *) in
+  let last = len - 2 (* skip closing } *) in
+  let digit_count = last - first + 1 in
+  match digit_count > 6 with
+  | true ->
+      illegal_escape lexbuf
+        "too many digits, expected 1 to 6 hexadecimal digits"
+  | false ->
+      let cp = num_value lexbuf ~base:16 ~first ~last in
+      if Uchar.is_valid cp then Uchar.unsafe_of_int cp else
+      illegal_escape lexbuf
+        (Printf.sprintf "%X is not a Unicode scalar value" cp)
+
+let keyword_or state s default =
+  try Hashtbl.find state.keywords s
+      with Not_found -> try Hashtbl.find keyword_table s
+  with Not_found -> default
+
+let is_keyword name = Hashtbl.mem keyword_table name
+
+let check_label_name lexbuf name =
+  if is_keyword name
+  then fail lexbuf (Keyword_as_label name)
+  else return name
+
+(* Update the current location with file name and line number. *)
+
+let update_loc lexbuf _file line absolute chars =
+  let pos = lexbuf.lex_curr_p in
+  let new_file = pos.pos_fname
+    (*match file with
+      | None -> pos.pos_fname
+      | Some s -> s*)
+  in
+  lexbuf.lex_curr_p <- { pos with
+    pos_fname = new_file;
+    pos_lnum = if absolute then line else pos.pos_lnum + line;
+    pos_bol = pos.pos_cnum - chars;
+  }
+;;
+
+(* Warn about Latin-1 characters used in idents *)
+
+let warn_latin1 lexbuf =
+  Location.deprecated (Location.curr lexbuf)
+    "ISO-Latin1 characters in identifiers"
+;;
+
+(* Error report *)
+
+open Format
+
+let prepare_error loc = function
+  | Illegal_character c ->
+      Location.errorf ~loc "Illegal character (%s)" (Char.escaped c)
+  | Illegal_escape (s, explanation) ->
+      Location.errorf ~loc
+        "Illegal backslash escape in string or character (%s)%t" s
+        (fun ppf -> match explanation with
+           | None -> ()
+           | Some expl -> fprintf ppf ": %s" expl)
+  | Reserved_sequence (s, explanation) ->
+      Location.errorf ~loc
+        "Reserved character sequence: %s%t" s
+        (fun ppf -> match explanation with
+           | None -> ()
+           | Some expl -> fprintf ppf " %s" expl)
+  | Unterminated_comment _ ->
+      Location.errorf ~loc "Comment not terminated"
+  | Unterminated_string ->
+      Location.errorf ~loc "String literal not terminated"
+  | Unterminated_string_in_comment (_, literal_loc) ->
+      Location.errorf ~loc
+        "This comment contains an unterminated string literal"
+        ~sub:[Location.msg ~loc:literal_loc "String literal begins here"]
+  | Keyword_as_label kwd ->
+      Location.errorf ~loc
+        "`%s' is a keyword, it cannot be used as label name" kwd
+  | Invalid_literal s ->
+      Location.errorf ~loc "Invalid literal %s" s
+(* FIXME: Invalid_directive? *)
+
+let () =
+  Location.register_error_of_exn
+    (function
+      | Error (err, loc) ->
+        Some (prepare_error loc err)
+      | _ ->
+        None
+    )
+
+}
+
+let newline = ('\013'* '\010')
+let blank = [' ' '\009' '\012']
+let lowercase = ['a'-'z' '_']
+let uppercase = ['A'-'Z']
+let identchar = ['A'-'Z' 'a'-'z' '_' '\'' '0'-'9' '\128'-'\255']
+let lowercase_latin1 = ['a'-'z' '\223'-'\246' '\248'-'\255' '_']
+let uppercase_latin1 = ['A'-'Z' '\192'-'\214' '\216'-'\222']
+let identchar_latin1 = identchar
+  (*['A'-'Z' 'a'-'z' '_' '\192'-'\214' '\216'-'\246' '\248'-'\255' '\'' '0'-'9']*)
+let symbolchar =
+  ['!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']
+let symbolcharnopercent =
+  ['!' '$' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']
+let dotsymbolchar =
+  ['!' '$' '%' '&' '*' '+' '-' '/' ':' '=' '>' '?' '@' '^' '|']
+let kwdopchar =
+  ['$' '&' '*' '+' '-' '/' '<' '=' '>' '@' '^' '|']
+
+let decimal_literal =
+  ['0'-'9'] ['0'-'9' '_']*
+let hex_digit =
+  ['0'-'9' 'A'-'F' 'a'-'f']
+let hex_literal =
+  '0' ['x' 'X'] ['0'-'9' 'A'-'F' 'a'-'f']['0'-'9' 'A'-'F' 'a'-'f' '_']*
+let oct_literal =
+  '0' ['o' 'O'] ['0'-'7'] ['0'-'7' '_']*
+let bin_literal =
+  '0' ['b' 'B'] ['0'-'1'] ['0'-'1' '_']*
+let int_literal =
+  decimal_literal | hex_literal | oct_literal | bin_literal
+let float_literal =
+  ['0'-'9'] ['0'-'9' '_']*
+  ('.' ['0'-'9' '_']* )?
+  (['e' 'E'] ['+' '-']? ['0'-'9'] ['0'-'9' '_']*) ?
+let hex_float_literal =
+  '0' ['x' 'X']
+  ['0'-'9' 'A'-'F' 'a'-'f'] ['0'-'9' 'A'-'F' 'a'-'f' '_']*
+  ('.' ['0'-'9' 'A'-'F' 'a'-'f' '_']* )?
+  (['p' 'P'] ['+' '-']? ['0'-'9'] ['0'-'9' '_']* )?
+let literal_modifier = ['G'-'Z' 'g'-'z']
+
+
+refill {fun k lexbuf -> Refill (fun () -> k lexbuf)}
+
+rule token state = parse
+  | ("\\" as bs) newline {
+      match state.preprocessor with
+      | None -> fail lexbuf (Illegal_character bs)
+      | Some _ ->
+        update_loc lexbuf None 1 false 0;
+        token state lexbuf }
+  | newline
+      { update_loc lexbuf None 1 false 0;
+        match state.preprocessor with
+        | None -> token state lexbuf
+        | Some _ -> return EOL
+      }
+  | blank +
+      { token state lexbuf }
+  | ".<"
+      { return DOTLESS }
+  | ">."
+      { return (keyword_or state (Lexing.lexeme lexbuf) (INFIXOP0 ">.")) }
+  | ".~"
+      { return (keyword_or state (Lexing.lexeme lexbuf) DOTTILDE) }
+  | "_"
+      { return UNDERSCORE }
+  | "~"
+      { return TILDE }
+      (*
+  | ".~"
+      { fail lexbuf
+          (Reserved_sequence (".~", Some "is reserved for use in MetaOCaml")) }
+      *)
+  | "~" (lowercase identchar * as name) ':'
+      { lABEL (check_label_name lexbuf name) }
+  | "~" (lowercase_latin1 identchar_latin1 * as name) ':'
+      { warn_latin1 lexbuf;
+        return (LABEL name) }
+  | "?"
+      { return QUESTION }
+  | "??"
+      { return QUESTIONQUESTION }
+  | "?" (lowercase identchar * as name) ':'
+      { oPTLABEL (check_label_name lexbuf name) }
+  | "?" (lowercase_latin1 identchar_latin1 * as name) ':'
+      { warn_latin1 lexbuf; return (OPTLABEL name) }
+  | lowercase identchar * as name
+    { return (try Hashtbl.find state.keywords name
+              with Not_found ->
+              try Hashtbl.find keyword_table name
+              with Not_found ->
+                LIDENT name) }
+  | lowercase_latin1 identchar_latin1 * as name
+      { warn_latin1 lexbuf; return (LIDENT name) }
+  | uppercase identchar * as name
+    { (* Capitalized keywords for OUnit *)
+      return (try Hashtbl.find state.keywords name
+              with Not_found ->
+              try Hashtbl.find keyword_table name
+              with Not_found ->
+                UIDENT name) }
+  | uppercase_latin1 identchar_latin1 * as name
+    { warn_latin1 lexbuf; return (UIDENT name) }
+  | int_literal as lit { return (INT (lit, None)) }
+  | (int_literal as lit) (literal_modifier as modif)
+    { return (INT (lit, Some modif)) }
+  | float_literal | hex_float_literal as lit
+    { return (FLOAT (lit, None)) }
+  | (float_literal | hex_float_literal as lit) (literal_modifier as modif)
+    { return (FLOAT (lit, Some modif)) }
+  | (float_literal | hex_float_literal | int_literal) identchar+ as invalid
+    { fail lexbuf (Invalid_literal invalid) }
+  | "\""
+      { Buffer.reset state.buffer;
+        state.string_start_loc <- Location.curr lexbuf;
+        string state lexbuf >>= fun () ->
+        lexbuf.lex_start_p <- state.string_start_loc.Location.loc_start;
+        state.string_start_loc <- Location.none;
+        return (STRING (Buffer.contents state.buffer, None))
+      }
+  | "{" (lowercase* as delim) "|"
+      { Buffer.reset state.buffer;
+        state.string_start_loc <- Location.curr lexbuf;
+        quoted_string state delim lexbuf >>= fun () ->
+        lexbuf.lex_start_p <- state.string_start_loc.Location.loc_start;
+        state.string_start_loc <- Location.none;
+        return (STRING (Buffer.contents state.buffer, Some delim)) }
+  | "\'" newline "\'"
+    { update_loc lexbuf None 1 false 1;
+      (* newline is ('\013'* '\010') *)
+      return (CHAR '\n') }
+  | "\'" ([^ '\\' '\'' '\010' '\013'] as c) "\'"
+    { return (CHAR c) }
+  | "\'\\" (['\\' '\'' '\"' 'n' 't' 'b' 'r' ' '] as c) "\'"
+    { return (CHAR (char_for_backslash c)) }
+  | "\'\\" 'o' ['0'-'3'] ['0'-'7'] ['0'-'7'] "\'"
+    { char_for_octal_code state lexbuf 3 >>= fun c -> return (CHAR c) }
+  | "\'\\" ['0'-'9'] ['0'-'9'] ['0'-'9'] "\'"
+    { char_for_decimal_code state lexbuf 2 >>= fun c -> return (CHAR c) }
+  | "\'\\" 'x' ['0'-'9' 'a'-'f' 'A'-'F'] ['0'-'9' 'a'-'f' 'A'-'F'] "\'"
+    { return (CHAR (char_for_hexadecimal_code lexbuf 3)) }
+  | "\'" ("\\" _ as esc)
+      { fail lexbuf (Illegal_escape (esc, None)) }
+  | "(*"
+      { let start_loc = Location.curr lexbuf in
+        state.comment_start_loc <- [start_loc];
+        Buffer.reset state.buffer;
+        comment state lexbuf >>= fun end_loc ->
+        let s = Buffer.contents state.buffer in
+        Buffer.reset state.buffer;
+        return (COMMENT (s, { start_loc with
+                              Location.loc_end = end_loc.Location.loc_end }))
+      }
+  | "(*)"
+      { let loc = Location.curr lexbuf in
+        Location.prerr_warning loc Warnings.Comment_start;
+        state.comment_start_loc <- [loc];
+        Buffer.reset state.buffer;
+        comment state lexbuf >>= fun end_loc ->
+        let s = Buffer.contents state.buffer in
+        Buffer.reset state.buffer;
+        return (COMMENT (s, { loc with Location.loc_end = end_loc.Location.loc_end }))
+      }
+  | "*)"
+      { let loc = Location.curr lexbuf in
+        Location.prerr_warning loc Warnings.Comment_not_end;
+        lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 1;
+        let curpos = lexbuf.lex_curr_p in
+        lexbuf.lex_curr_p <- { curpos with pos_cnum = curpos.pos_cnum - 1 };
+        return STAR
+      }
+  | "#" [' ' '\t']* (['0'-'9']+ as num) [' ' '\t']*
+        ("\"" ([^ '\010' '\013' '\"' ] * as name) "\"")?
+        [^ '\010' '\013'] * newline
+      { update_loc lexbuf name (int_of_string num) true 0;
+        token state lexbuf
+      }
+  | "#"  { return HASH }
+  | "&"  { return AMPERSAND }
+  | "&&" { return AMPERAMPER }
+  | "`"  { return BACKQUOTE }
+  | "\'" { return QUOTE }
+  | "("  { return LPAREN }
+  | ")"  { return RPAREN }
+  | "*"  { return STAR }
+  | ","  { return COMMA }
+  | "->" { return MINUSGREATER }
+  | "."  { return DOT }
+  | "." (dotsymbolchar symbolchar* as op) { return (DOTOP op) }
+  | ".." { return DOTDOT }
+  | ":"  { return COLON }
+  | "::" { return COLONCOLON }
+  | ":=" { return COLONEQUAL }
+  | ":>" { return COLONGREATER }
+  | ";"  { return SEMI }
+  | ";;" { return SEMISEMI }
+  | "<"  { return LESS }
+  | "<-" { return LESSMINUS }
+  | "="  { return EQUAL }
+  | "["  { return LBRACKET }
+  | "[|" { return LBRACKETBAR }
+  | "[<" { return LBRACKETLESS }
+  | "[>" { return LBRACKETGREATER }
+  | "]"  { return RBRACKET }
+  | "{"  { return LBRACE }
+  | "{<" { return LBRACELESS }
+  | "|"  { return BAR }
+  | "||" { return BARBAR }
+  | "|]" { return BARRBRACKET }
+  | ">"  { return GREATER }
+  | ">]" { return GREATERRBRACKET }
+  | "}"  { return RBRACE }
+  | ">}" { return GREATERRBRACE }
+  | "[@" { return LBRACKETAT }
+  | "[@@"  { return LBRACKETATAT }
+  | "[@@@" { return LBRACKETATATAT }
+  | "[%" { return LBRACKETPERCENT }
+  | "[%%" { return LBRACKETPERCENTPERCENT }
+  | "!"  { return BANG }
+  | "!=" { return (INFIXOP0 "!=") }
+  | "+"  { return PLUS }
+  | "+." { return PLUSDOT }
+  | "+=" { return PLUSEQ }
+  | "-"  { return MINUS }
+  | "-." { return MINUSDOT }
+
+  | "!" symbolchar + as op
+            { return (PREFIXOP op) }
+  | ['~' '?'] symbolchar + as op
+            { return (PREFIXOP op) }
+  | ['=' '<' '|' '&' '$' '>'] symbolchar * as op
+            { return (keyword_or state op
+                       (INFIXOP0 op)) }
+  | ['@' '^'] symbolchar * as op
+            { return (INFIXOP1 op) }
+  | ['+' '-'] symbolchar * as op
+            { return (INFIXOP2 op) }
+  | "**" symbolchar * as op
+            { return (INFIXOP4 op) }
+  | '%'     { return PERCENT }
+  | ['*' '/' '%'] symbolchar * as op
+            { return (INFIXOP3 op) }
+  | '#' (symbolchar | '#') + as op
+            { return (try Hashtbl.find state.keywords op
+                      with Not_found -> HASHOP op) }
+  (* Old style js_of_ocaml support is implemented by generating a custom token *)
+  | '#' (symbolchar | '#') + as op
+            { return (try Hashtbl.find state.keywords op
+                      with Not_found -> HASHOP op) }
+  | "let" kwdopchar dotsymbolchar * as op
+            { return (LETOP op) }
+  | "and" kwdopchar dotsymbolchar * as op
+            { return (ANDOP op) }
+  | eof { return EOF }
+
+  | _ as illegal_char
+      { fail lexbuf (Illegal_character illegal_char) }
+
+and comment state = parse
+    "(*"
+      { state.comment_start_loc <- (Location.curr lexbuf) :: state.comment_start_loc;
+      Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+      comment state lexbuf
+    }
+  | "*)"
+      { match state.comment_start_loc with
+        | [] -> assert false
+        | [_] -> state.comment_start_loc <- []; return (Location.curr lexbuf)
+        | _ :: l -> state.comment_start_loc <- l;
+                  Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+                  comment state lexbuf
+       }
+  | "\""
+      {
+        state.string_start_loc <- Location.curr lexbuf;
+        Buffer.add_char state.buffer '\"';
+        let buffer = state.buffer in
+        state.buffer <- Buffer.create 15;
+        (catch (string state lexbuf) (fun e l -> match e with
+             | Unterminated_string ->
+               begin match state.comment_start_loc with
+                 | [] -> assert false
+                 | loc :: _ ->
+                   let start = List.hd (List.rev state.comment_start_loc) in
+                   state.comment_start_loc <- [];
+                   fail_loc (Unterminated_string_in_comment (start, l)) loc
+               end
+             | e -> fail_loc e l
+           )
+        ) >>= fun () ->
+      state.string_start_loc <- Location.none;
+      Buffer.add_string buffer (String.escaped (Buffer.contents state.buffer));
+      state.buffer <- buffer;
+      Buffer.add_char state.buffer '\"';
+      comment state lexbuf }
+  | "{" lowercase* "|"
+      {
+        let delim = Lexing.lexeme lexbuf in
+        let delim = String.sub delim ~pos:1 ~len:(String.length delim - 2) in
+        state.string_start_loc <- Location.curr lexbuf;
+        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+        (catch (quoted_string state delim lexbuf) (fun e l -> match e with
+             | Unterminated_string ->
+               begin match state.comment_start_loc with
+                 | [] -> assert false
+                 | loc :: _ ->
+                   let start = List.hd (List.rev state.comment_start_loc) in
+                   state.comment_start_loc <- [];
+                   fail_loc (Unterminated_string_in_comment (start, l)) loc
+               end
+             | e -> fail_loc e l
+           )
+        ) >>= fun () ->
+        state.string_start_loc <- Location.none;
+        Buffer.add_char state.buffer '|';
+        Buffer.add_string state.buffer delim;
+        Buffer.add_char state.buffer '}';
+        comment state lexbuf }
+
+  | "''"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | "'" newline "'"
+      { update_loc lexbuf None 1 false 1;
+        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+        comment state lexbuf
+      }
+  | "'" [^ '\\' '\'' '\010' '\013' ] "'"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | "'\\" ['\\' '\"' '\'' 'n' 't' 'b' 'r' ' '] "'"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | "'\\" ['0'-'9'] ['0'-'9'] ['0'-'9'] "'"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | "\'\\" 'o' ['0'-'3'] ['0'-'7'] ['0'-'7'] "\'"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | "'\\" 'x' ['0'-'9' 'a'-'f' 'A'-'F'] ['0'-'9' 'a'-'f' 'A'-'F'] "'"
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | eof
+      { match state.comment_start_loc with
+        | [] -> assert false
+        | loc :: _ ->
+          let start = List.hd (List.rev state.comment_start_loc) in
+          state.comment_start_loc <- [];
+          fail_loc (Unterminated_comment start) loc
+      }
+  | newline
+      { update_loc lexbuf None 1 false 0;
+        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+        comment state lexbuf
+      }
+  | (lowercase | uppercase) identchar *
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+  | _
+      { Buffer.add_string state.buffer (Lexing.lexeme lexbuf); comment state lexbuf }
+
+and string state = parse
+    '\"'
+      { return () }
+  | '\\' newline ([' ' '\t'] * as space)
+      { update_loc lexbuf None 1 false (String.length space);
+        string state lexbuf
+      }
+  | '\\' ['\\' '\'' '\"' 'n' 't' 'b' 'r' ' ']
+      { Buffer.add_char state.buffer
+          (char_for_backslash (Lexing.lexeme_char lexbuf 1));
+        string state lexbuf }
+  | '\\' ['0'-'9'] ['0'-'9'] ['0'-'9']
+      { char_for_decimal_code state lexbuf 1 >>= fun c ->
+        Buffer.add_char state.buffer c;
+        string state lexbuf }
+  | '\\' 'x' ['0'-'9' 'a'-'f' 'A'-'F'] ['0'-'9' 'a'-'f' 'A'-'F']
+      { Buffer.add_char state.buffer (char_for_hexadecimal_code lexbuf 2);
+        string state lexbuf }
+  | '\\' 'u' '{' hex_digit+ '}'
+      { store_escaped_uchar state lexbuf (uchar_for_uchar_escape lexbuf);
+        string state lexbuf }
+  | '\\' _
+      { if in_comment state
+        then string state lexbuf
+        else begin
+(*  Should be an error, but we are very lax.
+                  fail (Illegal_escape (Lexing.lexeme lexbuf),
+                        (Location.curr lexbuf)
+*)
+          let loc = Location.curr lexbuf in
+          Location.prerr_warning loc Warnings.Illegal_backslash;
+          Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
+          Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 1);
+          string state lexbuf
+        end
+      }
+  | newline
+      { if not (in_comment state) then
+          Location.prerr_warning (Location.curr lexbuf) Warnings.Eol_in_string;
+        update_loc lexbuf None 1 false 0;
+        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+        string state lexbuf
+      }
+  | eof
+      { let loc = state.string_start_loc in
+        state.string_start_loc <- Location.none;
+        fail_loc Unterminated_string loc }
+  | _
+      { Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
+        string state lexbuf }
+
+and quoted_string state delim = parse
+  | newline
+      { update_loc lexbuf None 1 false 0;
+        Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+        quoted_string state delim lexbuf
+      }
+  | eof
+      { let loc = state.string_start_loc in
+        state.string_start_loc <- Location.none;
+        fail_loc Unterminated_string loc }
+  | "|" lowercase* "}"
+      {
+        let edelim = Lexing.lexeme lexbuf in
+        let edelim = String.sub edelim ~pos:1 ~len:(String.length edelim - 2) in
+        if delim = edelim then return ()
+        else (Buffer.add_string state.buffer (Lexing.lexeme lexbuf);
+              quoted_string state delim lexbuf)
+      }
+  | _
+      { Buffer.add_char state.buffer (Lexing.lexeme_char lexbuf 0);
+        quoted_string state delim lexbuf }
+
+and skip_sharp_bang state = parse
+  | "#!" [^ '\n']* '\n' [^ '\n']* "\n!#\n"
+      { update_loc lexbuf None 3 false 0; token state lexbuf }
+  | "#!" [^ '\n']* '\n'
+      { update_loc lexbuf None 1 false 0; token state lexbuf }
+  | "" { token state lexbuf }
+
+{
+  type comment = string * Location.t
+
+  (* preprocessor support not implemented, not compatible with monadic
+     interface *)
+
+  let rec token_without_comments state lexbuf =
+    token state lexbuf >>= function
+    | COMMENT _ ->
+      token_without_comments state lexbuf
+    | tok -> return tok
+}
diff --git a/src/ocaml/preprocess/410+multicore/parser_explain.ml b/src/ocaml/preprocess/410+multicore/parser_explain.ml
new file mode 100644
index 00000000..ef02f709
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_explain.ml
@@ -0,0 +1,51 @@
+open Parser_raw
+let named_item_at = function
+  | _ -> raise Not_found
+
+let nullable (type a) : a MenhirInterpreter.nonterminal -> bool =
+  let open MenhirInterpreter in function
+  | N_virtual_flag -> true
+  | N_type_variance -> true
+  | N_type_parameters -> true
+  | N_type_kind -> true
+  | N_structure -> true
+  | N_signature -> true
+  | N_reversed_llist_preceded_CONSTRAINT_constrain__ -> true
+  | N_rec_flag -> true
+  | N_private_virtual_flags -> true
+  | N_private_flag -> true
+  | N_payload -> true
+  | N_option_type_constraint_ -> true
+  | N_option_preceded_EQUAL_seq_expr__ -> true
+  | N_option_preceded_EQUAL_pattern__ -> true
+  | N_option_preceded_EQUAL_module_type__ -> true
+  | N_option_preceded_EQUAL_expr__ -> true
+  | N_option_preceded_COLON_core_type__ -> true
+  | N_option_preceded_AS_mkrhs_LIDENT___ -> true
+  | N_option_SEMI_ -> true
+  | N_option_BAR_ -> true
+  | N_opt_ampersand -> true
+  | N_mutable_virtual_flags -> true
+  | N_mutable_flag -> true
+  | N_list_use_file_element_ -> true
+  | N_list_text_str_structure_item__ -> true
+  | N_list_text_cstr_class_field__ -> true
+  | N_list_text_csig_class_sig_field__ -> true
+  | N_list_structure_element_ -> true
+  | N_list_signature_element_ -> true
+  | N_list_post_item_attribute_ -> true
+  | N_list_generic_and_type_declaration_type_subst_kind__ -> true
+  | N_list_generic_and_type_declaration_type_kind__ -> true
+  | N_list_attribute_ -> true
+  | N_list_and_module_declaration_ -> true
+  | N_list_and_module_binding_ -> true
+  | N_list_and_class_type_declaration_ -> true
+  | N_list_and_class_description_ -> true
+  | N_list_and_class_declaration_ -> true
+  | N_index_mod -> true
+  | N_generalized_constructor_arguments -> true
+  | N_formal_class_parameters -> true
+  | N_ext -> true
+  | N_class_self_type -> true
+  | N_class_self_pattern -> true
+  | _ -> false
diff --git a/src/ocaml/preprocess/410+multicore/parser_printer.ml b/src/ocaml/preprocess/410+multicore/parser_printer.ml
new file mode 100644
index 00000000..32ec4a2f
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_printer.ml
@@ -0,0 +1,932 @@
+open Parser_raw
+
+  let string_of_INT = function
+    | (s, None) -> Printf.sprintf "INT(%s)" s
+    | (s, Some c) -> Printf.sprintf "INT(%s%c)" s c
+
+  let string_of_FLOAT = function
+    | (s, None) -> Printf.sprintf "FLOAT(%s)" s
+    | (s, Some c) -> Printf.sprintf "FLOAT(%s%c)" s c
+
+  let string_of_STRING = function
+    | s, Some s' -> Printf.sprintf "STRING(%S,%S)" s s'
+    | s, None -> Printf.sprintf "STRING(%S)" s
+
+
+let print_symbol = function
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_error) -> "error"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_WITH) -> "with"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_WHILE_LWT) -> "while_lwt"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_WHILE) -> "while"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_WHEN) -> "when"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_VIRTUAL) -> "virtual"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_VAL) -> "val"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_UNDERSCORE) -> "_"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_UIDENT) -> "UIDENT"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TYPE) -> "type"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TRY_LWT) -> "try_lwt"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TRY) -> "try"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TRUE) -> "true"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TO) -> "to"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_TILDE) -> "~"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_THEN) -> "then"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_STRUCT) -> "struct"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_STRING) -> "STRING"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_STAR) -> "*"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_SIG) -> "sig"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_SEMISEMI) -> ";;"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_SEMI) -> ";"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_RPAREN) -> ")"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_REC) -> "rec"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_RBRACKET) -> "]"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_RBRACE) -> "}"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_QUOTE) -> "'"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_QUESTIONQUESTION) -> "??"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_QUESTION) -> "?"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PRIVATE) -> "private"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PREFIXOP) -> "!"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PLUSEQ) -> "+="
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PLUSDOT) -> "+."
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PLUS) -> "+"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_PERCENT) -> "%"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_OR) -> "or"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_OPTLABEL) -> "?<label>"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_OPEN) -> "open"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_OF) -> "of"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_OBJECT) -> "object"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_NONREC) -> "nonrec"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_NEW) -> "new"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MUTABLE) -> "mutable"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MODULE) -> "module"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MINUSGREATER) -> "->"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MINUSDOT) -> "-."
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MINUS) -> "-"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_METHOD) -> "method"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MATCH_LWT) -> "match_lwt"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_MATCH) -> "match"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LPAREN) -> ")"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LIDENT) -> "LIDENT"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LET_LWT) -> "lwt"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LETOP) -> "LETOP"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LET) -> "let"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LESSMINUS) -> "<-"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LESS) -> "<"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENTPERCENT) -> "[%%"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENT) -> "[%"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETLESS) -> "[<"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETGREATER) -> "[>"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETBAR) -> "[|"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATATAT) -> "[@@@"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATAT) -> "[@@"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETAT) -> "[@"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACKET) -> "["
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACELESS) -> "{<"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LBRACE) -> "{"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LAZY) -> "lazy"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_LABEL) -> "label"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INT) -> "INT"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INITIALIZER) -> "initializer"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INHERIT) -> "inherit"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP4) -> "INFIXOP4"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP3) -> "INFIXOP3"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP2) -> "INFIXOP2"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP1) -> "INFIXOP1"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP0) -> "INFIXOP0"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_INCLUDE) -> "include"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_IN) -> "in"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_IF) -> "if"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_HASHOP) -> "#<op>"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_HASH) -> "#"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACKET) -> ">]"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACE) -> ">}"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_GREATERDOT) -> ">."
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_GREATER) -> ">"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FUNCTOR) -> "functor"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FUNCTION) -> "function"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FUN) -> "fun"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FOR_LWT) -> "for_lwt"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FOR) -> "for"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FLOAT) -> "FLOAT"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FINALLY_LWT) -> "finally"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_FALSE) -> "false"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_EXTERNAL) -> "external"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_EXCEPTION) -> "exception"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_EQUAL) -> "="
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_EOL) -> "EOL"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_EOF) -> "EOF"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_END) -> "end"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_ELSE) -> "else"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOWNTO) -> "downto"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOTTILDE) -> ".~"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOTOP) -> "DOTOP"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOTLESS) -> ".<"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOTDOT) -> ".."
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOT) -> "."
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DONE) -> "done"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DOCSTRING) -> "DOCSTRING"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_DO) -> "do"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_CONSTRAINT) -> "constraint"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COMMENT) -> "COMMENT"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COMMA) -> ","
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COLONGREATER) -> ":>"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COLONEQUAL) -> ":="
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COLONCOLON) -> "::"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_COLON) -> ":"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_CLASS) -> "class"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_CHAR) -> "CHAR"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BEGIN) -> "begin"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BARRBRACKET) -> "|]"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BARBAR) -> "||"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BAR) -> "|"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BANG) -> "!"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_BACKQUOTE) -> "`"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_ASSERT) -> "assert"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_AS) -> "as"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_ANDOP) -> "ANDOP"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_AND) -> "and"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_AMPERSAND) -> "&"
+  | MenhirInterpreter.X (MenhirInterpreter.T MenhirInterpreter.T_AMPERAMPER) -> "&&"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_with_type_binder) -> "with_type_binder"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_with_constraint) -> "with_constraint"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_virtual_with_private_flag) -> "virtual_with_private_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_virtual_with_mutable_flag) -> "virtual_with_mutable_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_virtual_flag) -> "virtual_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_value_description) -> "value_description"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_value) -> "value"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_val_longident) -> "val_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_val_ident) -> "val_ident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_use_file) -> "use_file"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_variance) -> "type_variance"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_variable) -> "type_variable"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_parameters) -> "type_parameters"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_parameter) -> "type_parameter"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_longident) -> "type_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_kind) -> "type_kind"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_type_constraint) -> "type_constraint"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_tuple_type) -> "tuple_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_toplevel_phrase) -> "toplevel_phrase"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_toplevel_directive) -> "toplevel_directive"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_tag_field) -> "tag_field"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_subtractive) -> "subtractive"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_structure_item) -> "structure_item"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_structure) -> "structure"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_strict_binding) -> "strict_binding"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_str_exception_declaration) -> "str_exception_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_single_attr_id) -> "single_attr_id"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_simple_pattern_not_ident) -> "simple_pattern_not_ident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_simple_pattern) -> "simple_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_simple_expr) -> "simple_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_simple_delimited_pattern) -> "simple_delimited_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_signed_constant) -> "signed_constant"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_signature_item) -> "signature_item"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_signature) -> "signature"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_sig_exception_declaration) -> "sig_exception_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_seq_expr) -> "seq_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_) -> "separated_or_terminated_nonempty_list_SEMI_record_expr_field_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_pattern_) -> "separated_or_terminated_nonempty_list_SEMI_pattern_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_) -> "separated_or_terminated_nonempty_list_SEMI_object_expr_field_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_expr_) -> "separated_or_terminated_nonempty_list_SEMI_expr_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_row_field) -> "row_field"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_STAR_atomic_type_) -> "reversed_separated_nontrivial_llist_STAR_atomic_type_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_expr_) -> "reversed_separated_nontrivial_llist_COMMA_expr_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_core_type_) -> "reversed_separated_nontrivial_llist_COMMA_core_type_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_STAR_atomic_type_) -> "reversed_separated_nonempty_llist_STAR_atomic_type_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_type_parameter_) -> "reversed_separated_nonempty_llist_COMMA_type_parameter_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_core_type_) -> "reversed_separated_nonempty_llist_COMMA_core_type_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_BAR_row_field_) -> "reversed_separated_nonempty_llist_BAR_row_field_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AND_with_constraint_) -> "reversed_separated_nonempty_llist_AND_with_constraint_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_) -> "reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_) -> "reversed_preceded_or_separated_nonempty_llist_BAR_match_case_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_typevar_) -> "reversed_nonempty_llist_typevar_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_name_tag_) -> "reversed_nonempty_llist_name_tag_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_labeled_simple_expr_) -> "reversed_nonempty_llist_labeled_simple_expr_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_functor_arg_) -> "reversed_nonempty_llist_functor_arg_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_llist_preceded_CONSTRAINT_constrain__) -> "reversed_llist_preceded_CONSTRAINT_constrain__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_declaration_) -> "reversed_bar_llist_extension_constructor_declaration_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_) -> "reversed_bar_llist_extension_constructor_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_constructor_declaration_) -> "reversed_bar_llist_constructor_declaration_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_record_expr_content) -> "record_expr_content"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_rec_flag) -> "rec_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_private_virtual_flags) -> "private_virtual_flags"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_private_flag) -> "private_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_primitive_declaration) -> "primitive_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_post_item_attribute) -> "post_item_attribute"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_no_attr_) -> "possibly_poly_core_type_no_attr_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_) -> "possibly_poly_core_type_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_payload) -> "payload"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern_var) -> "pattern_var"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern_no_exn) -> "pattern_no_exn"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern_gen) -> "pattern_gen"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_no_exn_) -> "pattern_comma_list_pattern_no_exn_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_) -> "pattern_comma_list_pattern_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_pattern) -> "pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_parse_pattern) -> "parse_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_parse_expression) -> "parse_expression"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_parse_core_type) -> "parse_core_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_paren_module_expr) -> "paren_module_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_optlabel) -> "optlabel"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_type_constraint_) -> "option_type_constraint_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_seq_expr__) -> "option_preceded_EQUAL_seq_expr__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_pattern__) -> "option_preceded_EQUAL_pattern__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_module_type__) -> "option_preceded_EQUAL_module_type__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_expr__) -> "option_preceded_EQUAL_expr__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_COLON_core_type__) -> "option_preceded_COLON_core_type__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_preceded_AS_mkrhs_LIDENT___) -> "option_preceded_AS_mkrhs_LIDENT___"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_SEMI_) -> "option_SEMI_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_option_BAR_) -> "option_BAR_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_opt_ampersand) -> "opt_ampersand"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_operator) -> "operator"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_open_description) -> "open_description"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_open_declaration) -> "open_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_nonempty_type_kind) -> "nonempty_type_kind"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_raw_string_) -> "nonempty_list_raw_string_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_mkrhs_LIDENT__) -> "nonempty_list_mkrhs_LIDENT__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_name_tag) -> "name_tag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_mutable_virtual_flags) -> "mutable_virtual_flags"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_mutable_flag) -> "mutable_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_mty_longident) -> "mty_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_type_declaration) -> "module_type_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_type) -> "module_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_subst) -> "module_subst"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_name) -> "module_name"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_expr) -> "module_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_declaration_body) -> "module_declaration_body"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_module_binding_body) -> "module_binding_body"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_mod_longident) -> "mod_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_mod_ext_longident) -> "mod_ext_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_method_) -> "method_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_meth_list) -> "meth_list"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_match_case) -> "match_case"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_lwt_bindings) -> "lwt_bindings"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_lwt_binding) -> "lwt_binding"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_listx_SEMI_record_pat_field_UNDERSCORE_) -> "listx_SEMI_record_pat_field_UNDERSCORE_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_use_file_element_) -> "list_use_file_element_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_text_str_structure_item__) -> "list_text_str_structure_item__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_text_cstr_class_field__) -> "list_text_cstr_class_field__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_text_csig_class_sig_field__) -> "list_text_csig_class_sig_field__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_structure_element_) -> "list_structure_element_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_signature_element_) -> "list_signature_element_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_post_item_attribute_) -> "list_post_item_attribute_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_subst_kind__) -> "list_generic_and_type_declaration_type_subst_kind__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_kind__) -> "list_generic_and_type_declaration_type_kind__"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_attribute_) -> "list_attribute_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_and_module_declaration_) -> "list_and_module_declaration_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_and_module_binding_) -> "list_and_module_binding_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_and_class_type_declaration_) -> "list_and_class_type_declaration_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_and_class_description_) -> "list_and_class_description_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_list_and_class_declaration_) -> "list_and_class_declaration_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_letop_bindings) -> "letop_bindings"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_letop_binding_body) -> "letop_binding_body"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_let_pattern) -> "let_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_let_bindings_no_ext_) -> "let_bindings_no_ext_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_let_bindings_ext_) -> "let_bindings_ext_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_let_binding_body) -> "let_binding_body"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_pattern) -> "labeled_simple_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_expr) -> "labeled_simple_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_label_longident) -> "label_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_label_let_pattern) -> "label_let_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_label_declarations) -> "label_declarations"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_label_declaration_semi) -> "label_declaration_semi"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_label_declaration) -> "label_declaration"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_item_extension) -> "item_extension"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_interface) -> "interface"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_index_mod) -> "index_mod"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_implementation) -> "implementation"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_ident) -> "ident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_nonrec_flag_type_kind_) -> "generic_type_declaration_nonrec_flag_type_kind_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_no_nonrec_flag_type_subst_kind_) -> "generic_type_declaration_no_nonrec_flag_type_subst_kind_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_epsilon_) -> "generic_constructor_declaration_epsilon_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_BAR_) -> "generic_constructor_declaration_BAR_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_generalized_constructor_arguments) -> "generalized_constructor_arguments"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_functor_args) -> "functor_args"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_functor_arg) -> "functor_arg"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_function_type) -> "function_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_fun_def) -> "fun_def"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_fun_binding) -> "fun_binding"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_formal_class_parameters) -> "formal_class_parameters"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_floating_attribute) -> "floating_attribute"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_epsilon_) -> "extension_constructor_rebind_epsilon_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_BAR_) -> "extension_constructor_rebind_BAR_"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_extension) -> "extension"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_ext) -> "ext"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_expr) -> "expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_direction_flag) -> "direction_flag"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_core_type) -> "core_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constructor_declarations) -> "constructor_declarations"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constructor_arguments) -> "constructor_arguments"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constrain_field) -> "constrain_field"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constr_longident) -> "constr_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constr_ident) -> "constr_ident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_constant) -> "constant"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_clty_longident) -> "clty_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_type_declarations) -> "class_type_declarations"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_type) -> "class_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_simple_expr) -> "class_simple_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_signature) -> "class_signature"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_sig_field) -> "class_sig_field"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_self_type) -> "class_self_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_self_pattern) -> "class_self_pattern"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_longident) -> "class_longident"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_fun_def) -> "class_fun_def"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_fun_binding) -> "class_fun_binding"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_field) -> "class_field"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_class_expr) -> "class_expr"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_attribute) -> "attribute"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_attr_id) -> "attr_id"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_atomic_type) -> "atomic_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_and_let_binding) -> "and_let_binding"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_alias_type) -> "alias_type"
+  | MenhirInterpreter.X (MenhirInterpreter.N MenhirInterpreter.N_additive) -> "additive"
+
+let print_value (type a) : a MenhirInterpreter.symbol -> a -> string = function
+  | MenhirInterpreter.T MenhirInterpreter.T_error -> (fun _ -> "error")
+  | MenhirInterpreter.T MenhirInterpreter.T_WITH -> (fun _ -> "with")
+  | MenhirInterpreter.T MenhirInterpreter.T_WHILE_LWT -> (fun _ -> "while_lwt")
+  | MenhirInterpreter.T MenhirInterpreter.T_WHILE -> (fun _ -> "while")
+  | MenhirInterpreter.T MenhirInterpreter.T_WHEN -> (fun _ -> "when")
+  | MenhirInterpreter.T MenhirInterpreter.T_VIRTUAL -> (fun _ -> "virtual")
+  | MenhirInterpreter.T MenhirInterpreter.T_VAL -> (fun _ -> "val")
+  | MenhirInterpreter.T MenhirInterpreter.T_UNDERSCORE -> (fun _ -> "_")
+  | MenhirInterpreter.T MenhirInterpreter.T_UIDENT -> (Printf.sprintf "UIDENT(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_TYPE -> (fun _ -> "type")
+  | MenhirInterpreter.T MenhirInterpreter.T_TRY_LWT -> (fun _ -> "try_lwt")
+  | MenhirInterpreter.T MenhirInterpreter.T_TRY -> (fun _ -> "try")
+  | MenhirInterpreter.T MenhirInterpreter.T_TRUE -> (fun _ -> "true")
+  | MenhirInterpreter.T MenhirInterpreter.T_TO -> (fun _ -> "to")
+  | MenhirInterpreter.T MenhirInterpreter.T_TILDE -> (fun _ -> "~")
+  | MenhirInterpreter.T MenhirInterpreter.T_THEN -> (fun _ -> "then")
+  | MenhirInterpreter.T MenhirInterpreter.T_STRUCT -> (fun _ -> "struct")
+  | MenhirInterpreter.T MenhirInterpreter.T_STRING -> (string_of_STRING)
+  | MenhirInterpreter.T MenhirInterpreter.T_STAR -> (fun _ -> "*")
+  | MenhirInterpreter.T MenhirInterpreter.T_SIG -> (fun _ -> "sig")
+  | MenhirInterpreter.T MenhirInterpreter.T_SEMISEMI -> (fun _ -> ";;")
+  | MenhirInterpreter.T MenhirInterpreter.T_SEMI -> (fun _ -> ";")
+  | MenhirInterpreter.T MenhirInterpreter.T_RPAREN -> (fun _ -> ")")
+  | MenhirInterpreter.T MenhirInterpreter.T_REC -> (fun _ -> "rec")
+  | MenhirInterpreter.T MenhirInterpreter.T_RBRACKET -> (fun _ -> "]")
+  | MenhirInterpreter.T MenhirInterpreter.T_RBRACE -> (fun _ -> "}")
+  | MenhirInterpreter.T MenhirInterpreter.T_QUOTE -> (fun _ -> "'")
+  | MenhirInterpreter.T MenhirInterpreter.T_QUESTIONQUESTION -> (fun _ -> "??")
+  | MenhirInterpreter.T MenhirInterpreter.T_QUESTION -> (fun _ -> "?")
+  | MenhirInterpreter.T MenhirInterpreter.T_PRIVATE -> (fun _ -> "private")
+  | MenhirInterpreter.T MenhirInterpreter.T_PREFIXOP -> (Printf.sprintf "PREFIXOP(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_PLUSEQ -> (fun _ -> "+=")
+  | MenhirInterpreter.T MenhirInterpreter.T_PLUSDOT -> (fun _ -> "+.")
+  | MenhirInterpreter.T MenhirInterpreter.T_PLUS -> (fun _ -> "+")
+  | MenhirInterpreter.T MenhirInterpreter.T_PERCENT -> (fun _ -> "%")
+  | MenhirInterpreter.T MenhirInterpreter.T_OR -> (fun _ -> "or")
+  | MenhirInterpreter.T MenhirInterpreter.T_OPTLABEL -> (Printf.sprintf "OPTLABEL(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_OPEN -> (fun _ -> "open")
+  | MenhirInterpreter.T MenhirInterpreter.T_OF -> (fun _ -> "of")
+  | MenhirInterpreter.T MenhirInterpreter.T_OBJECT -> (fun _ -> "object")
+  | MenhirInterpreter.T MenhirInterpreter.T_NONREC -> (fun _ -> "nonrec")
+  | MenhirInterpreter.T MenhirInterpreter.T_NEW -> (fun _ -> "new")
+  | MenhirInterpreter.T MenhirInterpreter.T_MUTABLE -> (fun _ -> "mutable")
+  | MenhirInterpreter.T MenhirInterpreter.T_MODULE -> (fun _ -> "module")
+  | MenhirInterpreter.T MenhirInterpreter.T_MINUSGREATER -> (fun _ -> "->")
+  | MenhirInterpreter.T MenhirInterpreter.T_MINUSDOT -> (fun _ -> "-.")
+  | MenhirInterpreter.T MenhirInterpreter.T_MINUS -> (fun _ -> "-")
+  | MenhirInterpreter.T MenhirInterpreter.T_METHOD -> (fun _ -> "method")
+  | MenhirInterpreter.T MenhirInterpreter.T_MATCH_LWT -> (fun _ -> "match_lwt")
+  | MenhirInterpreter.T MenhirInterpreter.T_MATCH -> (fun _ -> "match")
+  | MenhirInterpreter.T MenhirInterpreter.T_LPAREN -> (fun _ -> ")")
+  | MenhirInterpreter.T MenhirInterpreter.T_LIDENT -> (Printf.sprintf "LIDENT(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_LET_LWT -> (fun _ -> "lwt")
+  | MenhirInterpreter.T MenhirInterpreter.T_LETOP -> (fun _ -> "LETOP")
+  | MenhirInterpreter.T MenhirInterpreter.T_LET -> (fun _ -> "let")
+  | MenhirInterpreter.T MenhirInterpreter.T_LESSMINUS -> (fun _ -> "<-")
+  | MenhirInterpreter.T MenhirInterpreter.T_LESS -> (fun _ -> "<")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENTPERCENT -> (fun _ -> "[%%")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENT -> (fun _ -> "[%")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETLESS -> (fun _ -> "[<")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETGREATER -> (fun _ -> "[>")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETBAR -> (fun _ -> "[|")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATATAT -> (fun _ -> "[@@@")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATAT -> (fun _ -> "[@@")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETAT -> (fun _ -> "[@")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACKET -> (fun _ -> "[")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACELESS -> (fun _ -> "{<")
+  | MenhirInterpreter.T MenhirInterpreter.T_LBRACE -> (fun _ -> "{")
+  | MenhirInterpreter.T MenhirInterpreter.T_LAZY -> (fun _ -> "lazy")
+  | MenhirInterpreter.T MenhirInterpreter.T_LABEL -> (Printf.sprintf "LABEL(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INT -> (string_of_INT)
+  | MenhirInterpreter.T MenhirInterpreter.T_INITIALIZER -> (fun _ -> "initializer")
+  | MenhirInterpreter.T MenhirInterpreter.T_INHERIT -> (fun _ -> "inherit")
+  | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP4 -> (Printf.sprintf "INFIXOP4(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP3 -> (Printf.sprintf "INFIXOP3(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP2 -> (Printf.sprintf "INFIXOP2(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP1 -> (Printf.sprintf "INFIXOP1(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP0 -> (Printf.sprintf "INFIXOP0(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_INCLUDE -> (fun _ -> "include")
+  | MenhirInterpreter.T MenhirInterpreter.T_IN -> (fun _ -> "in")
+  | MenhirInterpreter.T MenhirInterpreter.T_IF -> (fun _ -> "if")
+  | MenhirInterpreter.T MenhirInterpreter.T_HASHOP -> (Printf.sprintf "HASHOP(%S)")
+  | MenhirInterpreter.T MenhirInterpreter.T_HASH -> (fun _ -> "#")
+  | MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACKET -> (fun _ -> ">]")
+  | MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACE -> (fun _ -> ">}")
+  | MenhirInterpreter.T MenhirInterpreter.T_GREATERDOT -> (fun _ -> ">.")
+  | MenhirInterpreter.T MenhirInterpreter.T_GREATER -> (fun _ -> ">")
+  | MenhirInterpreter.T MenhirInterpreter.T_FUNCTOR -> (fun _ -> "functor")
+  | MenhirInterpreter.T MenhirInterpreter.T_FUNCTION -> (fun _ -> "function")
+  | MenhirInterpreter.T MenhirInterpreter.T_FUN -> (fun _ -> "fun")
+  | MenhirInterpreter.T MenhirInterpreter.T_FOR_LWT -> (fun _ -> "for_lwt")
+  | MenhirInterpreter.T MenhirInterpreter.T_FOR -> (fun _ -> "for")
+  | MenhirInterpreter.T MenhirInterpreter.T_FLOAT -> (string_of_FLOAT)
+  | MenhirInterpreter.T MenhirInterpreter.T_FINALLY_LWT -> (fun _ -> "finally")
+  | MenhirInterpreter.T MenhirInterpreter.T_FALSE -> (fun _ -> "false")
+  | MenhirInterpreter.T MenhirInterpreter.T_EXTERNAL -> (fun _ -> "external")
+  | MenhirInterpreter.T MenhirInterpreter.T_EXCEPTION -> (fun _ -> "exception")
+  | MenhirInterpreter.T MenhirInterpreter.T_EQUAL -> (fun _ -> "=")
+  | MenhirInterpreter.T MenhirInterpreter.T_EOL -> (fun _ -> "EOL")
+  | MenhirInterpreter.T MenhirInterpreter.T_EOF -> (fun _ -> "EOF")
+  | MenhirInterpreter.T MenhirInterpreter.T_END -> (fun _ -> "end")
+  | MenhirInterpreter.T MenhirInterpreter.T_ELSE -> (fun _ -> "else")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOWNTO -> (fun _ -> "downto")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOTTILDE -> (fun _ -> ".~")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOTOP -> (fun _ -> "DOTOP")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOTLESS -> (fun _ -> ".<")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOTDOT -> (fun _ -> "..")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOT -> (fun _ -> ".")
+  | MenhirInterpreter.T MenhirInterpreter.T_DONE -> (fun _ -> "done")
+  | MenhirInterpreter.T MenhirInterpreter.T_DOCSTRING -> (fun _ -> "DOCSTRING")
+  | MenhirInterpreter.T MenhirInterpreter.T_DO -> (fun _ -> "do")
+  | MenhirInterpreter.T MenhirInterpreter.T_CONSTRAINT -> (fun _ -> "constraint")
+  | MenhirInterpreter.T MenhirInterpreter.T_COMMENT -> (fun _ -> "COMMENT")
+  | MenhirInterpreter.T MenhirInterpreter.T_COMMA -> (fun _ -> ",")
+  | MenhirInterpreter.T MenhirInterpreter.T_COLONGREATER -> (fun _ -> ":>")
+  | MenhirInterpreter.T MenhirInterpreter.T_COLONEQUAL -> (fun _ -> ":=")
+  | MenhirInterpreter.T MenhirInterpreter.T_COLONCOLON -> (fun _ -> "::")
+  | MenhirInterpreter.T MenhirInterpreter.T_COLON -> (fun _ -> ":")
+  | MenhirInterpreter.T MenhirInterpreter.T_CLASS -> (fun _ -> "class")
+  | MenhirInterpreter.T MenhirInterpreter.T_CHAR -> (fun _ -> "CHAR")
+  | MenhirInterpreter.T MenhirInterpreter.T_BEGIN -> (fun _ -> "begin")
+  | MenhirInterpreter.T MenhirInterpreter.T_BARRBRACKET -> (fun _ -> "|]")
+  | MenhirInterpreter.T MenhirInterpreter.T_BARBAR -> (fun _ -> "||")
+  | MenhirInterpreter.T MenhirInterpreter.T_BAR -> (fun _ -> "|")
+  | MenhirInterpreter.T MenhirInterpreter.T_BANG -> (fun _ -> "!")
+  | MenhirInterpreter.T MenhirInterpreter.T_BACKQUOTE -> (fun _ -> "`")
+  | MenhirInterpreter.T MenhirInterpreter.T_ASSERT -> (fun _ -> "assert")
+  | MenhirInterpreter.T MenhirInterpreter.T_AS -> (fun _ -> "as")
+  | MenhirInterpreter.T MenhirInterpreter.T_ANDOP -> (fun _ -> "ANDOP")
+  | MenhirInterpreter.T MenhirInterpreter.T_AND -> (fun _ -> "and")
+  | MenhirInterpreter.T MenhirInterpreter.T_AMPERSAND -> (fun _ -> "&")
+  | MenhirInterpreter.T MenhirInterpreter.T_AMPERAMPER -> (fun _ -> "&&")
+  | MenhirInterpreter.N MenhirInterpreter.N_with_type_binder -> (fun _ -> "with_type_binder")
+  | MenhirInterpreter.N MenhirInterpreter.N_with_constraint -> (fun _ -> "with_constraint")
+  | MenhirInterpreter.N MenhirInterpreter.N_virtual_with_private_flag -> (fun _ -> "virtual_with_private_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_virtual_with_mutable_flag -> (fun _ -> "virtual_with_mutable_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_virtual_flag -> (fun _ -> "virtual_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_value_description -> (fun _ -> "value_description")
+  | MenhirInterpreter.N MenhirInterpreter.N_value -> (fun _ -> "value")
+  | MenhirInterpreter.N MenhirInterpreter.N_val_longident -> (fun _ -> "val_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_val_ident -> (fun _ -> "val_ident")
+  | MenhirInterpreter.N MenhirInterpreter.N_use_file -> (fun _ -> "use_file")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_variance -> (fun _ -> "type_variance")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_variable -> (fun _ -> "type_variable")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_parameters -> (fun _ -> "type_parameters")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_parameter -> (fun _ -> "type_parameter")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_longident -> (fun _ -> "type_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_kind -> (fun _ -> "type_kind")
+  | MenhirInterpreter.N MenhirInterpreter.N_type_constraint -> (fun _ -> "type_constraint")
+  | MenhirInterpreter.N MenhirInterpreter.N_tuple_type -> (fun _ -> "tuple_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_toplevel_phrase -> (fun _ -> "toplevel_phrase")
+  | MenhirInterpreter.N MenhirInterpreter.N_toplevel_directive -> (fun _ -> "toplevel_directive")
+  | MenhirInterpreter.N MenhirInterpreter.N_tag_field -> (fun _ -> "tag_field")
+  | MenhirInterpreter.N MenhirInterpreter.N_subtractive -> (fun _ -> "subtractive")
+  | MenhirInterpreter.N MenhirInterpreter.N_structure_item -> (fun _ -> "structure_item")
+  | MenhirInterpreter.N MenhirInterpreter.N_structure -> (fun _ -> "structure")
+  | MenhirInterpreter.N MenhirInterpreter.N_strict_binding -> (fun _ -> "strict_binding")
+  | MenhirInterpreter.N MenhirInterpreter.N_str_exception_declaration -> (fun _ -> "str_exception_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_single_attr_id -> (fun _ -> "single_attr_id")
+  | MenhirInterpreter.N MenhirInterpreter.N_simple_pattern_not_ident -> (fun _ -> "simple_pattern_not_ident")
+  | MenhirInterpreter.N MenhirInterpreter.N_simple_pattern -> (fun _ -> "simple_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_simple_expr -> (fun _ -> "simple_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_simple_delimited_pattern -> (fun _ -> "simple_delimited_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_signed_constant -> (fun _ -> "signed_constant")
+  | MenhirInterpreter.N MenhirInterpreter.N_signature_item -> (fun _ -> "signature_item")
+  | MenhirInterpreter.N MenhirInterpreter.N_signature -> (fun _ -> "signature")
+  | MenhirInterpreter.N MenhirInterpreter.N_sig_exception_declaration -> (fun _ -> "sig_exception_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_seq_expr -> (fun _ -> "seq_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ -> (fun _ -> "separated_or_terminated_nonempty_list_SEMI_record_expr_field_")
+  | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_pattern_ -> (fun _ -> "separated_or_terminated_nonempty_list_SEMI_pattern_")
+  | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ -> (fun _ -> "separated_or_terminated_nonempty_list_SEMI_object_expr_field_")
+  | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_expr_ -> (fun _ -> "separated_or_terminated_nonempty_list_SEMI_expr_")
+  | MenhirInterpreter.N MenhirInterpreter.N_row_field -> (fun _ -> "row_field")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_STAR_atomic_type_ -> (fun _ -> "reversed_separated_nontrivial_llist_STAR_atomic_type_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_expr_ -> (fun _ -> "reversed_separated_nontrivial_llist_COMMA_expr_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_core_type_ -> (fun _ -> "reversed_separated_nontrivial_llist_COMMA_core_type_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_STAR_atomic_type_ -> (fun _ -> "reversed_separated_nonempty_llist_STAR_atomic_type_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_type_parameter_ -> (fun _ -> "reversed_separated_nonempty_llist_COMMA_type_parameter_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_core_type_ -> (fun _ -> "reversed_separated_nonempty_llist_COMMA_core_type_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_BAR_row_field_ -> (fun _ -> "reversed_separated_nonempty_llist_BAR_row_field_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AND_with_constraint_ -> (fun _ -> "reversed_separated_nonempty_llist_AND_with_constraint_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ -> (fun _ -> "reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ -> (fun _ -> "reversed_preceded_or_separated_nonempty_llist_BAR_match_case_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_typevar_ -> (fun _ -> "reversed_nonempty_llist_typevar_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_name_tag_ -> (fun _ -> "reversed_nonempty_llist_name_tag_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_labeled_simple_expr_ -> (fun _ -> "reversed_nonempty_llist_labeled_simple_expr_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_functor_arg_ -> (fun _ -> "reversed_nonempty_llist_functor_arg_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_llist_preceded_CONSTRAINT_constrain__ -> (fun _ -> "reversed_llist_preceded_CONSTRAINT_constrain__")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_declaration_ -> (fun _ -> "reversed_bar_llist_extension_constructor_declaration_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_ -> (fun _ -> "reversed_bar_llist_extension_constructor_")
+  | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_constructor_declaration_ -> (fun _ -> "reversed_bar_llist_constructor_declaration_")
+  | MenhirInterpreter.N MenhirInterpreter.N_record_expr_content -> (fun _ -> "record_expr_content")
+  | MenhirInterpreter.N MenhirInterpreter.N_rec_flag -> (fun _ -> "rec_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_private_virtual_flags -> (fun _ -> "private_virtual_flags")
+  | MenhirInterpreter.N MenhirInterpreter.N_private_flag -> (fun _ -> "private_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_primitive_declaration -> (fun _ -> "primitive_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_post_item_attribute -> (fun _ -> "post_item_attribute")
+  | MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_no_attr_ -> (fun _ -> "possibly_poly_core_type_no_attr_")
+  | MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_ -> (fun _ -> "possibly_poly_core_type_")
+  | MenhirInterpreter.N MenhirInterpreter.N_payload -> (fun _ -> "payload")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern_var -> (fun _ -> "pattern_var")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern_no_exn -> (fun _ -> "pattern_no_exn")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern_gen -> (fun _ -> "pattern_gen")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_no_exn_ -> (fun _ -> "pattern_comma_list_pattern_no_exn_")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_ -> (fun _ -> "pattern_comma_list_pattern_")
+  | MenhirInterpreter.N MenhirInterpreter.N_pattern -> (fun _ -> "pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_parse_pattern -> (fun _ -> "parse_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_parse_expression -> (fun _ -> "parse_expression")
+  | MenhirInterpreter.N MenhirInterpreter.N_parse_core_type -> (fun _ -> "parse_core_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_paren_module_expr -> (fun _ -> "paren_module_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_optlabel -> (fun _ -> "optlabel")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_type_constraint_ -> (fun _ -> "option_type_constraint_")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_seq_expr__ -> (fun _ -> "option_preceded_EQUAL_seq_expr__")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_pattern__ -> (fun _ -> "option_preceded_EQUAL_pattern__")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_module_type__ -> (fun _ -> "option_preceded_EQUAL_module_type__")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_expr__ -> (fun _ -> "option_preceded_EQUAL_expr__")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_COLON_core_type__ -> (fun _ -> "option_preceded_COLON_core_type__")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_AS_mkrhs_LIDENT___ -> (fun _ -> "option_preceded_AS_mkrhs_LIDENT___")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_SEMI_ -> (fun _ -> "option_SEMI_")
+  | MenhirInterpreter.N MenhirInterpreter.N_option_BAR_ -> (fun _ -> "option_BAR_")
+  | MenhirInterpreter.N MenhirInterpreter.N_opt_ampersand -> (fun _ -> "opt_ampersand")
+  | MenhirInterpreter.N MenhirInterpreter.N_operator -> (fun _ -> "operator")
+  | MenhirInterpreter.N MenhirInterpreter.N_open_description -> (fun _ -> "open_description")
+  | MenhirInterpreter.N MenhirInterpreter.N_open_declaration -> (fun _ -> "open_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_nonempty_type_kind -> (fun _ -> "nonempty_type_kind")
+  | MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_raw_string_ -> (fun _ -> "nonempty_list_raw_string_")
+  | MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_mkrhs_LIDENT__ -> (fun _ -> "nonempty_list_mkrhs_LIDENT__")
+  | MenhirInterpreter.N MenhirInterpreter.N_name_tag -> (fun _ -> "name_tag")
+  | MenhirInterpreter.N MenhirInterpreter.N_mutable_virtual_flags -> (fun _ -> "mutable_virtual_flags")
+  | MenhirInterpreter.N MenhirInterpreter.N_mutable_flag -> (fun _ -> "mutable_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_mty_longident -> (fun _ -> "mty_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_type_declaration -> (fun _ -> "module_type_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_type -> (fun _ -> "module_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_subst -> (fun _ -> "module_subst")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_name -> (fun _ -> "module_name")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_expr -> (fun _ -> "module_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_declaration_body -> (fun _ -> "module_declaration_body")
+  | MenhirInterpreter.N MenhirInterpreter.N_module_binding_body -> (fun _ -> "module_binding_body")
+  | MenhirInterpreter.N MenhirInterpreter.N_mod_longident -> (fun _ -> "mod_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_mod_ext_longident -> (fun _ -> "mod_ext_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_method_ -> (fun _ -> "method_")
+  | MenhirInterpreter.N MenhirInterpreter.N_meth_list -> (fun _ -> "meth_list")
+  | MenhirInterpreter.N MenhirInterpreter.N_match_case -> (fun _ -> "match_case")
+  | MenhirInterpreter.N MenhirInterpreter.N_lwt_bindings -> (fun _ -> "lwt_bindings")
+  | MenhirInterpreter.N MenhirInterpreter.N_lwt_binding -> (fun _ -> "lwt_binding")
+  | MenhirInterpreter.N MenhirInterpreter.N_listx_SEMI_record_pat_field_UNDERSCORE_ -> (fun _ -> "listx_SEMI_record_pat_field_UNDERSCORE_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_use_file_element_ -> (fun _ -> "list_use_file_element_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_text_str_structure_item__ -> (fun _ -> "list_text_str_structure_item__")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_text_cstr_class_field__ -> (fun _ -> "list_text_cstr_class_field__")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_text_csig_class_sig_field__ -> (fun _ -> "list_text_csig_class_sig_field__")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_structure_element_ -> (fun _ -> "list_structure_element_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_signature_element_ -> (fun _ -> "list_signature_element_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_post_item_attribute_ -> (fun _ -> "list_post_item_attribute_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_subst_kind__ -> (fun _ -> "list_generic_and_type_declaration_type_subst_kind__")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_kind__ -> (fun _ -> "list_generic_and_type_declaration_type_kind__")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_attribute_ -> (fun _ -> "list_attribute_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_and_module_declaration_ -> (fun _ -> "list_and_module_declaration_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_and_module_binding_ -> (fun _ -> "list_and_module_binding_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_type_declaration_ -> (fun _ -> "list_and_class_type_declaration_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_description_ -> (fun _ -> "list_and_class_description_")
+  | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_declaration_ -> (fun _ -> "list_and_class_declaration_")
+  | MenhirInterpreter.N MenhirInterpreter.N_letop_bindings -> (fun _ -> "letop_bindings")
+  | MenhirInterpreter.N MenhirInterpreter.N_letop_binding_body -> (fun _ -> "letop_binding_body")
+  | MenhirInterpreter.N MenhirInterpreter.N_let_pattern -> (fun _ -> "let_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_let_bindings_no_ext_ -> (fun _ -> "let_bindings_no_ext_")
+  | MenhirInterpreter.N MenhirInterpreter.N_let_bindings_ext_ -> (fun _ -> "let_bindings_ext_")
+  | MenhirInterpreter.N MenhirInterpreter.N_let_binding_body -> (fun _ -> "let_binding_body")
+  | MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_pattern -> (fun _ -> "labeled_simple_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_expr -> (fun _ -> "labeled_simple_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_label_longident -> (fun _ -> "label_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_label_let_pattern -> (fun _ -> "label_let_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_label_declarations -> (fun _ -> "label_declarations")
+  | MenhirInterpreter.N MenhirInterpreter.N_label_declaration_semi -> (fun _ -> "label_declaration_semi")
+  | MenhirInterpreter.N MenhirInterpreter.N_label_declaration -> (fun _ -> "label_declaration")
+  | MenhirInterpreter.N MenhirInterpreter.N_item_extension -> (fun _ -> "item_extension")
+  | MenhirInterpreter.N MenhirInterpreter.N_interface -> (fun _ -> "interface")
+  | MenhirInterpreter.N MenhirInterpreter.N_index_mod -> (fun _ -> "index_mod")
+  | MenhirInterpreter.N MenhirInterpreter.N_implementation -> (fun _ -> "implementation")
+  | MenhirInterpreter.N MenhirInterpreter.N_ident -> (fun _ -> "ident")
+  | MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_nonrec_flag_type_kind_ -> (fun _ -> "generic_type_declaration_nonrec_flag_type_kind_")
+  | MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ -> (fun _ -> "generic_type_declaration_no_nonrec_flag_type_subst_kind_")
+  | MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_epsilon_ -> (fun _ -> "generic_constructor_declaration_epsilon_")
+  | MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_BAR_ -> (fun _ -> "generic_constructor_declaration_BAR_")
+  | MenhirInterpreter.N MenhirInterpreter.N_generalized_constructor_arguments -> (fun _ -> "generalized_constructor_arguments")
+  | MenhirInterpreter.N MenhirInterpreter.N_functor_args -> (fun _ -> "functor_args")
+  | MenhirInterpreter.N MenhirInterpreter.N_functor_arg -> (fun _ -> "functor_arg")
+  | MenhirInterpreter.N MenhirInterpreter.N_function_type -> (fun _ -> "function_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_fun_def -> (fun _ -> "fun_def")
+  | MenhirInterpreter.N MenhirInterpreter.N_fun_binding -> (fun _ -> "fun_binding")
+  | MenhirInterpreter.N MenhirInterpreter.N_formal_class_parameters -> (fun _ -> "formal_class_parameters")
+  | MenhirInterpreter.N MenhirInterpreter.N_floating_attribute -> (fun _ -> "floating_attribute")
+  | MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_epsilon_ -> (fun _ -> "extension_constructor_rebind_epsilon_")
+  | MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_BAR_ -> (fun _ -> "extension_constructor_rebind_BAR_")
+  | MenhirInterpreter.N MenhirInterpreter.N_extension -> (fun _ -> "extension")
+  | MenhirInterpreter.N MenhirInterpreter.N_ext -> (fun _ -> "ext")
+  | MenhirInterpreter.N MenhirInterpreter.N_expr -> (fun _ -> "expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_direction_flag -> (fun _ -> "direction_flag")
+  | MenhirInterpreter.N MenhirInterpreter.N_core_type -> (fun _ -> "core_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_constructor_declarations -> (fun _ -> "constructor_declarations")
+  | MenhirInterpreter.N MenhirInterpreter.N_constructor_arguments -> (fun _ -> "constructor_arguments")
+  | MenhirInterpreter.N MenhirInterpreter.N_constrain_field -> (fun _ -> "constrain_field")
+  | MenhirInterpreter.N MenhirInterpreter.N_constr_longident -> (fun _ -> "constr_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_constr_ident -> (fun _ -> "constr_ident")
+  | MenhirInterpreter.N MenhirInterpreter.N_constant -> (fun _ -> "constant")
+  | MenhirInterpreter.N MenhirInterpreter.N_clty_longident -> (fun _ -> "clty_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_type_declarations -> (fun _ -> "class_type_declarations")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_type -> (fun _ -> "class_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_simple_expr -> (fun _ -> "class_simple_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_signature -> (fun _ -> "class_signature")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_sig_field -> (fun _ -> "class_sig_field")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_self_type -> (fun _ -> "class_self_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_self_pattern -> (fun _ -> "class_self_pattern")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_longident -> (fun _ -> "class_longident")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_fun_def -> (fun _ -> "class_fun_def")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_fun_binding -> (fun _ -> "class_fun_binding")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_field -> (fun _ -> "class_field")
+  | MenhirInterpreter.N MenhirInterpreter.N_class_expr -> (fun _ -> "class_expr")
+  | MenhirInterpreter.N MenhirInterpreter.N_attribute -> (fun _ -> "attribute")
+  | MenhirInterpreter.N MenhirInterpreter.N_attr_id -> (fun _ -> "attr_id")
+  | MenhirInterpreter.N MenhirInterpreter.N_atomic_type -> (fun _ -> "atomic_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_and_let_binding -> (fun _ -> "and_let_binding")
+  | MenhirInterpreter.N MenhirInterpreter.N_alias_type -> (fun _ -> "alias_type")
+  | MenhirInterpreter.N MenhirInterpreter.N_additive -> (fun _ -> "additive")
+
+let print_token = function
+  | WITH -> print_value (MenhirInterpreter.T MenhirInterpreter.T_WITH) ()
+  | WHILE_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_WHILE_LWT) ()
+  | WHILE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_WHILE) ()
+  | WHEN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_WHEN) ()
+  | VIRTUAL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_VIRTUAL) ()
+  | VAL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_VAL) ()
+  | UNDERSCORE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_UNDERSCORE) ()
+  | UIDENT v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_UIDENT) v
+  | TYPE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TYPE) ()
+  | TRY_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TRY_LWT) ()
+  | TRY -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TRY) ()
+  | TRUE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TRUE) ()
+  | TO -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TO) ()
+  | TILDE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_TILDE) ()
+  | THEN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_THEN) ()
+  | STRUCT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_STRUCT) ()
+  | STRING v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_STRING) v
+  | STAR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_STAR) ()
+  | SIG -> print_value (MenhirInterpreter.T MenhirInterpreter.T_SIG) ()
+  | SEMISEMI -> print_value (MenhirInterpreter.T MenhirInterpreter.T_SEMISEMI) ()
+  | SEMI -> print_value (MenhirInterpreter.T MenhirInterpreter.T_SEMI) ()
+  | RPAREN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_RPAREN) ()
+  | REC -> print_value (MenhirInterpreter.T MenhirInterpreter.T_REC) ()
+  | RBRACKET -> print_value (MenhirInterpreter.T MenhirInterpreter.T_RBRACKET) ()
+  | RBRACE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_RBRACE) ()
+  | QUOTE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_QUOTE) ()
+  | QUESTIONQUESTION -> print_value (MenhirInterpreter.T MenhirInterpreter.T_QUESTIONQUESTION) ()
+  | QUESTION -> print_value (MenhirInterpreter.T MenhirInterpreter.T_QUESTION) ()
+  | PRIVATE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PRIVATE) ()
+  | PREFIXOP v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PREFIXOP) v
+  | PLUSEQ -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PLUSEQ) ()
+  | PLUSDOT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PLUSDOT) ()
+  | PLUS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PLUS) ()
+  | PERCENT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_PERCENT) ()
+  | OR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_OR) ()
+  | OPTLABEL v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_OPTLABEL) v
+  | OPEN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_OPEN) ()
+  | OF -> print_value (MenhirInterpreter.T MenhirInterpreter.T_OF) ()
+  | OBJECT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_OBJECT) ()
+  | NONREC -> print_value (MenhirInterpreter.T MenhirInterpreter.T_NONREC) ()
+  | NEW -> print_value (MenhirInterpreter.T MenhirInterpreter.T_NEW) ()
+  | MUTABLE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MUTABLE) ()
+  | MODULE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MODULE) ()
+  | MINUSGREATER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MINUSGREATER) ()
+  | MINUSDOT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MINUSDOT) ()
+  | MINUS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MINUS) ()
+  | METHOD -> print_value (MenhirInterpreter.T MenhirInterpreter.T_METHOD) ()
+  | MATCH_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MATCH_LWT) ()
+  | MATCH -> print_value (MenhirInterpreter.T MenhirInterpreter.T_MATCH) ()
+  | LPAREN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LPAREN) ()
+  | LIDENT v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LIDENT) v
+  | LET_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LET_LWT) ()
+  | LETOP v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LETOP) v
+  | LET -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LET) ()
+  | LESSMINUS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LESSMINUS) ()
+  | LESS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LESS) ()
+  | LBRACKETPERCENTPERCENT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENTPERCENT) ()
+  | LBRACKETPERCENT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENT) ()
+  | LBRACKETLESS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETLESS) ()
+  | LBRACKETGREATER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETGREATER) ()
+  | LBRACKETBAR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETBAR) ()
+  | LBRACKETATATAT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATATAT) ()
+  | LBRACKETATAT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATAT) ()
+  | LBRACKETAT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKETAT) ()
+  | LBRACKET -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACKET) ()
+  | LBRACELESS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACELESS) ()
+  | LBRACE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LBRACE) ()
+  | LAZY -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LAZY) ()
+  | LABEL v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_LABEL) v
+  | INT v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INT) v
+  | INITIALIZER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INITIALIZER) ()
+  | INHERIT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INHERIT) ()
+  | INFIXOP4 v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP4) v
+  | INFIXOP3 v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP3) v
+  | INFIXOP2 v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP2) v
+  | INFIXOP1 v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP1) v
+  | INFIXOP0 v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INFIXOP0) v
+  | INCLUDE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_INCLUDE) ()
+  | IN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_IN) ()
+  | IF -> print_value (MenhirInterpreter.T MenhirInterpreter.T_IF) ()
+  | HASHOP v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_HASHOP) v
+  | HASH -> print_value (MenhirInterpreter.T MenhirInterpreter.T_HASH) ()
+  | GREATERRBRACKET -> print_value (MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACKET) ()
+  | GREATERRBRACE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACE) ()
+  | GREATERDOT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_GREATERDOT) ()
+  | GREATER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_GREATER) ()
+  | FUNCTOR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FUNCTOR) ()
+  | FUNCTION -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FUNCTION) ()
+  | FUN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FUN) ()
+  | FOR_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FOR_LWT) ()
+  | FOR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FOR) ()
+  | FLOAT v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FLOAT) v
+  | FINALLY_LWT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FINALLY_LWT) ()
+  | FALSE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_FALSE) ()
+  | EXTERNAL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_EXTERNAL) ()
+  | EXCEPTION -> print_value (MenhirInterpreter.T MenhirInterpreter.T_EXCEPTION) ()
+  | EQUAL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_EQUAL) ()
+  | EOL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_EOL) ()
+  | EOF -> print_value (MenhirInterpreter.T MenhirInterpreter.T_EOF) ()
+  | END -> print_value (MenhirInterpreter.T MenhirInterpreter.T_END) ()
+  | ELSE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_ELSE) ()
+  | DOWNTO -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOWNTO) ()
+  | DOTTILDE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOTTILDE) ()
+  | DOTOP v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOTOP) v
+  | DOTLESS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOTLESS) ()
+  | DOTDOT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOTDOT) ()
+  | DOT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOT) ()
+  | DONE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DONE) ()
+  | DOCSTRING v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DOCSTRING) v
+  | DO -> print_value (MenhirInterpreter.T MenhirInterpreter.T_DO) ()
+  | CONSTRAINT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_CONSTRAINT) ()
+  | COMMENT v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COMMENT) v
+  | COMMA -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COMMA) ()
+  | COLONGREATER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COLONGREATER) ()
+  | COLONEQUAL -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COLONEQUAL) ()
+  | COLONCOLON -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COLONCOLON) ()
+  | COLON -> print_value (MenhirInterpreter.T MenhirInterpreter.T_COLON) ()
+  | CLASS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_CLASS) ()
+  | CHAR v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_CHAR) v
+  | BEGIN -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BEGIN) ()
+  | BARRBRACKET -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BARRBRACKET) ()
+  | BARBAR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BARBAR) ()
+  | BAR -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BAR) ()
+  | BANG -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BANG) ()
+  | BACKQUOTE -> print_value (MenhirInterpreter.T MenhirInterpreter.T_BACKQUOTE) ()
+  | ASSERT -> print_value (MenhirInterpreter.T MenhirInterpreter.T_ASSERT) ()
+  | AS -> print_value (MenhirInterpreter.T MenhirInterpreter.T_AS) ()
+  | ANDOP v -> print_value (MenhirInterpreter.T MenhirInterpreter.T_ANDOP) v
+  | AND -> print_value (MenhirInterpreter.T MenhirInterpreter.T_AND) ()
+  | AMPERSAND -> print_value (MenhirInterpreter.T MenhirInterpreter.T_AMPERSAND) ()
+  | AMPERAMPER -> print_value (MenhirInterpreter.T MenhirInterpreter.T_AMPERAMPER) ()
+
+let token_of_terminal (type a) (t : a MenhirInterpreter.terminal) (v : a) : token =
+  match t with
+  | MenhirInterpreter.T_error -> assert false
+  | MenhirInterpreter.T_WITH -> WITH
+  | MenhirInterpreter.T_WHILE_LWT -> WHILE_LWT
+  | MenhirInterpreter.T_WHILE -> WHILE
+  | MenhirInterpreter.T_WHEN -> WHEN
+  | MenhirInterpreter.T_VIRTUAL -> VIRTUAL
+  | MenhirInterpreter.T_VAL -> VAL
+  | MenhirInterpreter.T_UNDERSCORE -> UNDERSCORE
+  | MenhirInterpreter.T_UIDENT -> UIDENT v
+  | MenhirInterpreter.T_TYPE -> TYPE
+  | MenhirInterpreter.T_TRY_LWT -> TRY_LWT
+  | MenhirInterpreter.T_TRY -> TRY
+  | MenhirInterpreter.T_TRUE -> TRUE
+  | MenhirInterpreter.T_TO -> TO
+  | MenhirInterpreter.T_TILDE -> TILDE
+  | MenhirInterpreter.T_THEN -> THEN
+  | MenhirInterpreter.T_STRUCT -> STRUCT
+  | MenhirInterpreter.T_STRING -> STRING v
+  | MenhirInterpreter.T_STAR -> STAR
+  | MenhirInterpreter.T_SIG -> SIG
+  | MenhirInterpreter.T_SEMISEMI -> SEMISEMI
+  | MenhirInterpreter.T_SEMI -> SEMI
+  | MenhirInterpreter.T_RPAREN -> RPAREN
+  | MenhirInterpreter.T_REC -> REC
+  | MenhirInterpreter.T_RBRACKET -> RBRACKET
+  | MenhirInterpreter.T_RBRACE -> RBRACE
+  | MenhirInterpreter.T_QUOTE -> QUOTE
+  | MenhirInterpreter.T_QUESTIONQUESTION -> QUESTIONQUESTION
+  | MenhirInterpreter.T_QUESTION -> QUESTION
+  | MenhirInterpreter.T_PRIVATE -> PRIVATE
+  | MenhirInterpreter.T_PREFIXOP -> PREFIXOP v
+  | MenhirInterpreter.T_PLUSEQ -> PLUSEQ
+  | MenhirInterpreter.T_PLUSDOT -> PLUSDOT
+  | MenhirInterpreter.T_PLUS -> PLUS
+  | MenhirInterpreter.T_PERCENT -> PERCENT
+  | MenhirInterpreter.T_OR -> OR
+  | MenhirInterpreter.T_OPTLABEL -> OPTLABEL v
+  | MenhirInterpreter.T_OPEN -> OPEN
+  | MenhirInterpreter.T_OF -> OF
+  | MenhirInterpreter.T_OBJECT -> OBJECT
+  | MenhirInterpreter.T_NONREC -> NONREC
+  | MenhirInterpreter.T_NEW -> NEW
+  | MenhirInterpreter.T_MUTABLE -> MUTABLE
+  | MenhirInterpreter.T_MODULE -> MODULE
+  | MenhirInterpreter.T_MINUSGREATER -> MINUSGREATER
+  | MenhirInterpreter.T_MINUSDOT -> MINUSDOT
+  | MenhirInterpreter.T_MINUS -> MINUS
+  | MenhirInterpreter.T_METHOD -> METHOD
+  | MenhirInterpreter.T_MATCH_LWT -> MATCH_LWT
+  | MenhirInterpreter.T_MATCH -> MATCH
+  | MenhirInterpreter.T_LPAREN -> LPAREN
+  | MenhirInterpreter.T_LIDENT -> LIDENT v
+  | MenhirInterpreter.T_LET_LWT -> LET_LWT
+  | MenhirInterpreter.T_LETOP -> LETOP v
+  | MenhirInterpreter.T_LET -> LET
+  | MenhirInterpreter.T_LESSMINUS -> LESSMINUS
+  | MenhirInterpreter.T_LESS -> LESS
+  | MenhirInterpreter.T_LBRACKETPERCENTPERCENT -> LBRACKETPERCENTPERCENT
+  | MenhirInterpreter.T_LBRACKETPERCENT -> LBRACKETPERCENT
+  | MenhirInterpreter.T_LBRACKETLESS -> LBRACKETLESS
+  | MenhirInterpreter.T_LBRACKETGREATER -> LBRACKETGREATER
+  | MenhirInterpreter.T_LBRACKETBAR -> LBRACKETBAR
+  | MenhirInterpreter.T_LBRACKETATATAT -> LBRACKETATATAT
+  | MenhirInterpreter.T_LBRACKETATAT -> LBRACKETATAT
+  | MenhirInterpreter.T_LBRACKETAT -> LBRACKETAT
+  | MenhirInterpreter.T_LBRACKET -> LBRACKET
+  | MenhirInterpreter.T_LBRACELESS -> LBRACELESS
+  | MenhirInterpreter.T_LBRACE -> LBRACE
+  | MenhirInterpreter.T_LAZY -> LAZY
+  | MenhirInterpreter.T_LABEL -> LABEL v
+  | MenhirInterpreter.T_INT -> INT v
+  | MenhirInterpreter.T_INITIALIZER -> INITIALIZER
+  | MenhirInterpreter.T_INHERIT -> INHERIT
+  | MenhirInterpreter.T_INFIXOP4 -> INFIXOP4 v
+  | MenhirInterpreter.T_INFIXOP3 -> INFIXOP3 v
+  | MenhirInterpreter.T_INFIXOP2 -> INFIXOP2 v
+  | MenhirInterpreter.T_INFIXOP1 -> INFIXOP1 v
+  | MenhirInterpreter.T_INFIXOP0 -> INFIXOP0 v
+  | MenhirInterpreter.T_INCLUDE -> INCLUDE
+  | MenhirInterpreter.T_IN -> IN
+  | MenhirInterpreter.T_IF -> IF
+  | MenhirInterpreter.T_HASHOP -> HASHOP v
+  | MenhirInterpreter.T_HASH -> HASH
+  | MenhirInterpreter.T_GREATERRBRACKET -> GREATERRBRACKET
+  | MenhirInterpreter.T_GREATERRBRACE -> GREATERRBRACE
+  | MenhirInterpreter.T_GREATERDOT -> GREATERDOT
+  | MenhirInterpreter.T_GREATER -> GREATER
+  | MenhirInterpreter.T_FUNCTOR -> FUNCTOR
+  | MenhirInterpreter.T_FUNCTION -> FUNCTION
+  | MenhirInterpreter.T_FUN -> FUN
+  | MenhirInterpreter.T_FOR_LWT -> FOR_LWT
+  | MenhirInterpreter.T_FOR -> FOR
+  | MenhirInterpreter.T_FLOAT -> FLOAT v
+  | MenhirInterpreter.T_FINALLY_LWT -> FINALLY_LWT
+  | MenhirInterpreter.T_FALSE -> FALSE
+  | MenhirInterpreter.T_EXTERNAL -> EXTERNAL
+  | MenhirInterpreter.T_EXCEPTION -> EXCEPTION
+  | MenhirInterpreter.T_EQUAL -> EQUAL
+  | MenhirInterpreter.T_EOL -> EOL
+  | MenhirInterpreter.T_EOF -> EOF
+  | MenhirInterpreter.T_END -> END
+  | MenhirInterpreter.T_ELSE -> ELSE
+  | MenhirInterpreter.T_DOWNTO -> DOWNTO
+  | MenhirInterpreter.T_DOTTILDE -> DOTTILDE
+  | MenhirInterpreter.T_DOTOP -> DOTOP v
+  | MenhirInterpreter.T_DOTLESS -> DOTLESS
+  | MenhirInterpreter.T_DOTDOT -> DOTDOT
+  | MenhirInterpreter.T_DOT -> DOT
+  | MenhirInterpreter.T_DONE -> DONE
+  | MenhirInterpreter.T_DOCSTRING -> DOCSTRING v
+  | MenhirInterpreter.T_DO -> DO
+  | MenhirInterpreter.T_CONSTRAINT -> CONSTRAINT
+  | MenhirInterpreter.T_COMMENT -> COMMENT v
+  | MenhirInterpreter.T_COMMA -> COMMA
+  | MenhirInterpreter.T_COLONGREATER -> COLONGREATER
+  | MenhirInterpreter.T_COLONEQUAL -> COLONEQUAL
+  | MenhirInterpreter.T_COLONCOLON -> COLONCOLON
+  | MenhirInterpreter.T_COLON -> COLON
+  | MenhirInterpreter.T_CLASS -> CLASS
+  | MenhirInterpreter.T_CHAR -> CHAR v
+  | MenhirInterpreter.T_BEGIN -> BEGIN
+  | MenhirInterpreter.T_BARRBRACKET -> BARRBRACKET
+  | MenhirInterpreter.T_BARBAR -> BARBAR
+  | MenhirInterpreter.T_BAR -> BAR
+  | MenhirInterpreter.T_BANG -> BANG
+  | MenhirInterpreter.T_BACKQUOTE -> BACKQUOTE
+  | MenhirInterpreter.T_ASSERT -> ASSERT
+  | MenhirInterpreter.T_AS -> AS
+  | MenhirInterpreter.T_ANDOP -> ANDOP v
+  | MenhirInterpreter.T_AND -> AND
+  | MenhirInterpreter.T_AMPERSAND -> AMPERSAND
+  | MenhirInterpreter.T_AMPERAMPER -> AMPERAMPER
diff --git a/src/ocaml/preprocess/410+multicore/parser_raw.ml b/src/ocaml/preprocess/410+multicore/parser_raw.ml
new file mode 100644
index 00000000..6db137b4
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_raw.ml
@@ -0,0 +1,44340 @@
+
+(* This generated code requires the following version of MenhirLib: *)
+
+let () =
+  MenhirLib.StaticVersion.require_20190924
+
+module MenhirBasics = struct
+  
+  exception Error
+  
+  type token = 
+    | WITH
+    | WHILE_LWT
+    | WHILE
+    | WHEN
+    | VIRTUAL
+    | VAL
+    | UNDERSCORE
+    | UIDENT of (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | TYPE
+    | TRY_LWT
+    | TRY
+    | TRUE
+    | TO
+    | TILDE
+    | THEN
+    | STRUCT
+    | STRING of (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 36 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | STAR
+    | SIG
+    | SEMISEMI
+    | SEMI
+    | RPAREN
+    | REC
+    | RBRACKET
+    | RBRACE
+    | QUOTE
+    | QUESTIONQUESTION
+    | QUESTION
+    | PRIVATE
+    | PREFIXOP of (
+# 742 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 53 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | PLUSEQ
+    | PLUSDOT
+    | PLUS
+    | PERCENT
+    | OR
+    | OPTLABEL of (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 63 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | OPEN
+    | OF
+    | OBJECT
+    | NONREC
+    | NEW
+    | MUTABLE
+    | MODULE
+    | MINUSGREATER
+    | MINUSDOT
+    | MINUS
+    | METHOD
+    | MATCH_LWT
+    | MATCH
+    | LPAREN
+    | LIDENT of (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 82 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | LET_LWT
+    | LETOP of (
+# 700 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 88 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | LET
+    | LESSMINUS
+    | LESS
+    | LBRACKETPERCENTPERCENT
+    | LBRACKETPERCENT
+    | LBRACKETLESS
+    | LBRACKETGREATER
+    | LBRACKETBAR
+    | LBRACKETATATAT
+    | LBRACKETATAT
+    | LBRACKETAT
+    | LBRACKET
+    | LBRACELESS
+    | LBRACE
+    | LAZY
+    | LABEL of (
+# 705 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 108 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INT of (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 113 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INITIALIZER
+    | INHERIT
+    | INFIXOP4 of (
+# 698 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 120 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INFIXOP3 of (
+# 697 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 125 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INFIXOP2 of (
+# 696 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 130 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INFIXOP1 of (
+# 695 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 135 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INFIXOP0 of (
+# 694 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 140 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | INCLUDE
+    | IN
+    | IF
+    | HASHOP of (
+# 753 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 148 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | HASH
+    | GREATERRBRACKET
+    | GREATERRBRACE
+    | GREATERDOT
+    | GREATER
+    | FUNCTOR
+    | FUNCTION
+    | FUN
+    | FOR_LWT
+    | FOR
+    | FLOAT of (
+# 683 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 163 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | FINALLY_LWT
+    | FALSE
+    | EXTERNAL
+    | EXCEPTION
+    | EQUAL
+    | EOL
+    | EOF
+    | END
+    | ELSE
+    | DOWNTO
+    | DOTTILDE
+    | DOTOP of (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 179 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | DOTLESS
+    | DOTDOT
+    | DOT
+    | DONE
+    | DOCSTRING of (
+# 772 "src/ocaml/preprocess/parser_raw.mly"
+       (Docstrings.docstring)
+# 188 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | DO
+    | CONSTRAINT
+    | COMMENT of (
+# 771 "src/ocaml/preprocess/parser_raw.mly"
+       (string * Location.t)
+# 195 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | COMMA
+    | COLONGREATER
+    | COLONEQUAL
+    | COLONCOLON
+    | COLON
+    | CLASS
+    | CHAR of (
+# 663 "src/ocaml/preprocess/parser_raw.mly"
+       (char)
+# 206 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | BEGIN
+    | BARRBRACKET
+    | BARBAR
+    | BAR
+    | BANG
+    | BACKQUOTE
+    | ASSERT
+    | AS
+    | ANDOP of (
+# 701 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 219 "src/ocaml/preprocess/parser_raw.ml"
+  )
+    | AND
+    | AMPERSAND
+    | AMPERAMPER
+  
+end
+
+include MenhirBasics
+
+let _eRR =
+  MenhirBasics.Error
+
+# 18 "src/ocaml/preprocess/parser_raw.mly"
+  
+
+[@@@ocaml.warning "-9"]
+
+open Asttypes
+open Longident
+open Parsetree
+open Ast_helper
+open Docstrings
+open Docstrings.WithMenhir
+open Msupport_parsing
+
+let mkloc = Location.mkloc
+let mknoloc = Location.mknoloc
+
+let make_loc (startpos, endpos) = {
+  Location.loc_start = startpos;
+  Location.loc_end = endpos;
+  Location.loc_ghost = false;
+}
+
+let ghost_loc (startpos, endpos) = {
+  Location.loc_start = startpos;
+  Location.loc_end = endpos;
+  Location.loc_ghost = true;
+}
+
+let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
+let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
+let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
+let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
+let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
+let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
+let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
+let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
+let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d
+
+let pstr_typext (te, ext) =
+  (Pstr_typext te, ext)
+let pstr_primitive (vd, ext) =
+  (Pstr_primitive vd, ext)
+let pstr_type ((nr, ext), tys) =
+  (Pstr_type (nr, tys), ext)
+let pstr_exception (te, ext) =
+  (Pstr_exception te, ext)
+let pstr_include (body, ext) =
+  (Pstr_include body, ext)
+let pstr_recmodule (ext, bindings) =
+  (Pstr_recmodule bindings, ext)
+
+let psig_typext (te, ext) =
+  (Psig_typext te, ext)
+let psig_value (vd, ext) =
+  (Psig_value vd, ext)
+let psig_type ((nr, ext), tys) =
+  (Psig_type (nr, tys), ext)
+let psig_typesubst ((nr, ext), tys) =
+  assert (nr = Recursive); (* see [no_nonrec_flag] *)
+  (Psig_typesubst tys, ext)
+let psig_exception (te, ext) =
+  (Psig_exception te, ext)
+let psig_include (body, ext) =
+  (Psig_include body, ext)
+
+let mkctf ~loc ?attrs ?docs d =
+  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
+let mkcf ~loc ?attrs ?docs d =
+  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d
+
+let mkrhs rhs loc = mkloc rhs (make_loc loc)
+let ghrhs rhs loc = mkloc rhs (ghost_loc loc)
+
+let push_loc x acc =
+  if x.Location.loc_ghost
+  then acc
+  else x :: acc
+
+let reloc_pat ~loc x =
+  { x with ppat_loc = make_loc loc;
+           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
+let reloc_exp ~loc x =
+  { x with pexp_loc = make_loc loc;
+           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
+let reloc_typ ~loc x =
+  { x with ptyp_loc = make_loc loc;
+           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;
+
+let mkexpvar ~loc (name : string) =
+  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))
+
+let mkoperator =
+  mkexpvar
+
+let mkpatvar ~loc name =
+  mkpat ~loc (Ppat_var (mkrhs name loc))
+
+(*
+  Ghost expressions and patterns:
+  expressions and patterns that do not appear explicitly in the
+  source file they have the loc_ghost flag set to true.
+  Then the profiler will not try to instrument them and the
+  -annot option will not try to display their type.
+
+  Every grammar rule that generates an element with a location must
+  make at most one non-ghost element, the topmost one.
+
+  How to tell whether your location must be ghost:
+  A location corresponds to a range of characters in the source file.
+  If the location contains a piece of code that is syntactically
+  valid (according to the documentation), and corresponds to the
+  AST node, then the location must be real; in all other cases,
+  it must be ghost.
+*)
+let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
+let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
+let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
+let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
+let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
+let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d
+
+let mkinfix arg1 op arg2 =
+  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])
+
+let neg_string f =
+  if String.length f > 0 && f.[0] = '-'
+  then String.sub f 1 (String.length f - 1)
+  else "-" ^ f
+
+let mkuminus ~oploc name arg =
+  match name, arg.pexp_desc with
+  | "-", Pexp_constant(Pconst_integer (n,m)) ->
+      Pexp_constant(Pconst_integer(neg_string n,m))
+  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
+      Pexp_constant(Pconst_float(neg_string f, m))
+  | _ ->
+      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
+
+let mkuplus ~oploc name arg =
+  let desc = arg.pexp_desc in
+  match name, desc with
+  | "+", Pexp_constant(Pconst_integer _)
+  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
+  | _ ->
+      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
+
+(* TODO define an abstraction boundary between locations-as-pairs
+   and locations-as-Location.t; it should be clear when we move from
+   one world to the other *)
+
+let mkexp_cons_desc consloc args =
+  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
+let mkexp_cons ~loc consloc args =
+  mkexp ~loc (mkexp_cons_desc consloc args)
+
+let mkpat_cons_desc consloc args =
+  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
+let mkpat_cons ~loc consloc args =
+  mkpat ~loc (mkpat_cons_desc consloc args)
+
+let ghexp_cons_desc consloc args =
+  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
+let ghpat_cons_desc consloc args =
+  Ppat_construct(ghrhs (Lident "::") consloc, Some args)
+
+let rec mktailexp nilloc = let open Location in function
+    [] ->
+      let nil = ghloc ~loc:nilloc (Lident "[]") in
+      Pexp_construct (nil, None), nilloc
+  | e1 :: el ->
+      let exp_el, el_loc = mktailexp nilloc el in
+      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
+      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
+      ghexp_cons_desc loc arg, loc
+
+let rec mktailpat nilloc = let open Location in function
+    [] ->
+      let nil = ghloc ~loc:nilloc (Lident "[]") in
+      Ppat_construct (nil, None), nilloc
+  | p1 :: pl ->
+      let pat_pl, el_loc = mktailpat nilloc pl in
+      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
+      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
+      ghpat_cons_desc loc arg, loc
+
+let mkstrexp e attrs =
+  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }
+
+let mkexp_constraint ~loc e (t1, t2) =
+  match t1, t2 with
+  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
+  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
+  | None, None -> assert false
+
+let mkexp_opt_constraint ~loc e = function
+  | None -> e
+  | Some constraint_ -> mkexp_constraint ~loc e constraint_
+
+let mkpat_opt_constraint ~loc p = function
+  | None -> p
+  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))
+
+(*
+let syntax_error () =
+  raise Syntaxerr.Escape_error
+*)
+
+let not_expecting loc nonterm =
+  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))
+
+(*
+let unclosed opening_name opening_loc closing_name closing_loc =
+  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
+                                           make_loc closing_loc, closing_name)))
+
+let expecting loc nonterm =
+    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))
+*)
+
+let dotop ~left ~right ~assign ~ext ~multi =
+  let assign = if assign then "<-" else "" in
+  let mid = if multi then ";.." else "" in
+  String.concat "" ["."; ext; left; mid; right; assign]
+let paren = "(",")"
+let brace = "{", "}"
+let bracket = "[", "]"
+let lident x =  Lident x
+let ldot x y = Ldot(x,y)
+let dotop_fun ~loc dotop =
+  (* We could use ghexp here, but sticking to mkexp for parser.mly
+     compatibility. TODO improve parser.mly *)
+  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))
+
+let array_function ~loc str name =
+  ghloc ~loc (Ldot(Lident str,
+                   (if !Clflags.fast then "unsafe_" ^ name else name)))
+
+let array_get_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
+let string_get_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))
+
+let array_set_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
+let string_set_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))
+
+let multi_indices ~loc = function
+  | [a] -> false, a
+  | l -> true, mkexp ~loc (Pexp_array l)
+
+let index_get ~loc get_fun array index =
+  let args = [Nolabel, array; Nolabel, index] in
+   mkexp ~loc (Pexp_apply(get_fun, args))
+
+let index_set ~loc set_fun array index value =
+  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
+   mkexp ~loc (Pexp_apply(set_fun, args))
+
+let array_get ~loc = index_get ~loc (array_get_fun ~loc)
+let string_get ~loc = index_get ~loc (string_get_fun ~loc)
+let dotop_get ~loc path (left,right) ext array index =
+  let multi, index = multi_indices ~loc index in
+  index_get ~loc
+    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
+    array index
+
+let array_set ~loc = index_set ~loc (array_set_fun ~loc)
+let string_set ~loc = index_set ~loc (string_set_fun ~loc)
+let dotop_set ~loc path (left,right) ext array index value=
+  let multi, index = multi_indices ~loc index in
+  index_set ~loc
+    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
+    array index value
+
+
+let bigarray_function ~loc str name =
+  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))
+
+let bigarray_untuplify = function
+    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
+  | exp -> [exp]
+
+let bigarray_get ~loc arr arg =
+  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
+  let bigarray_function = bigarray_function ~loc in
+  let get = if !Clflags.fast then "unsafe_get" else "get" in
+  match bigarray_untuplify arg with
+    [c1] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
+                       [Nolabel, arr; Nolabel, c1]))
+  | [c1;c2] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
+  | [c1;c2;c3] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
+  | coords ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
+                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))
+
+let bigarray_set ~loc arr arg newval =
+  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
+  let bigarray_function = bigarray_function ~loc in
+  let set = if !Clflags.fast then "unsafe_set" else "set" in
+  match bigarray_untuplify arg with
+    [c1] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
+  | [c1;c2] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
+                       [Nolabel, arr; Nolabel, c1;
+                        Nolabel, c2; Nolabel, newval]))
+  | [c1;c2;c3] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
+                       [Nolabel, arr; Nolabel, c1;
+                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
+  | coords ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
+                       [Nolabel, arr;
+                        Nolabel, ghexp(Pexp_array coords);
+                        Nolabel, newval]))
+
+let lapply ~loc p1 p2 =
+  if !Clflags.applicative_functors
+  then Lapply(p1, p2)
+  else raise (Syntaxerr.Error(
+                  Syntaxerr.Applicative_path (make_loc loc)))
+
+let exp_of_longident ~loc lid =
+  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})
+
+(* [loc_map] could be [Location.map]. *)
+let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
+  { x with txt = f x.txt }
+
+let loc_last (id : Longident.t Location.loc) : string Location.loc =
+  loc_map Longident.last id
+
+let loc_lident (id : string Location.loc) : Longident.t Location.loc =
+  loc_map (fun x -> Lident x) id
+
+let exp_of_label ~loc lbl =
+  mkexp ~loc (Pexp_ident (loc_lident lbl))
+
+let pat_of_label ~loc lbl =
+  mkpat ~loc (Ppat_var (loc_last lbl))
+
+let mk_newtypes ~loc newtypes exp =
+  let mkexp = mkexp ~loc in
+  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
+    newtypes exp
+
+let wrap_type_annotation ~loc newtypes core_type body =
+  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
+  let mk_newtypes = mk_newtypes ~loc in
+  let exp = mkexp(Pexp_constraint(body,core_type)) in
+  let exp = mk_newtypes newtypes exp in
+  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))
+
+let wrap_exp_attrs ~loc body (ext, attrs) =
+  let ghexp = ghexp ~loc in
+  (* todo: keep exact location for the entire attribute *)
+  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
+  match ext with
+  | None -> body
+  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))
+
+let mkexp_attrs ~loc d attrs =
+  wrap_exp_attrs ~loc (mkexp ~loc d) attrs
+
+let wrap_typ_attrs ~loc typ (ext, attrs) =
+  (* todo: keep exact location for the entire attribute *)
+  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
+  match ext with
+  | None -> typ
+  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))
+
+let wrap_pat_attrs ~loc pat (ext, attrs) =
+  (* todo: keep exact location for the entire attribute *)
+  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
+  match ext with
+  | None -> pat
+  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))
+
+let mkpat_attrs ~loc d attrs =
+  wrap_pat_attrs ~loc (mkpat ~loc d) attrs
+
+let wrap_class_attrs ~loc:_ body attrs =
+  {body with pcl_attributes = attrs @ body.pcl_attributes}
+let wrap_mod_attrs ~loc:_ attrs body =
+  {body with pmod_attributes = attrs @ body.pmod_attributes}
+let wrap_mty_attrs ~loc:_ attrs body =
+  {body with pmty_attributes = attrs @ body.pmty_attributes}
+
+let wrap_str_ext ~loc body ext =
+  match ext with
+  | None -> body
+  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))
+
+let wrap_mkstr_ext ~loc (item, ext) =
+  wrap_str_ext ~loc (mkstr ~loc item) ext
+
+let wrap_sig_ext ~loc body ext =
+  match ext with
+  | None -> body
+  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))
+
+let wrap_mksig_ext ~loc (item, ext) =
+  wrap_sig_ext ~loc (mksig ~loc item) ext
+
+let text_str pos = Str.text (rhs_text pos)
+let text_sig pos = Sig.text (rhs_text pos)
+let text_cstr pos = Cf.text (rhs_text pos)
+let text_csig pos = Ctf.text (rhs_text pos)
+let text_def pos = [Ptop_def (Str.text (rhs_text pos))]
+
+let extra_text startpos endpos text items =
+  match items with
+  | [] ->
+      let post = rhs_post_text endpos in
+      let post_extras = rhs_post_extra_text endpos in
+      text post @ text post_extras
+  | _ :: _ ->
+      let pre_extras = rhs_pre_extra_text startpos in
+      let post_extras = rhs_post_extra_text endpos in
+        text pre_extras @ items @ text post_extras
+
+let extra_str p1 p2 items = extra_text p1 p2 Str.text items
+let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
+let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
+let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
+let extra_def p1 p2 items =
+  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items
+
+let extra_rhs_core_type ct ~pos =
+  let docs = rhs_info pos in
+  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }
+
+(*
+type let_binding =
+  { lb_pattern: pattern;
+    lb_expression: expression;
+    lb_attributes: attributes;
+    lb_docs: docs Lazy.t;
+    lb_text: text Lazy.t;
+    lb_loc: Location.t; }
+
+type let_bindings =
+  { lbs_bindings: let_binding list;
+    lbs_rec: rec_flag;
+    lbs_extension: string Asttypes.loc option;
+    lbs_loc: Location.t }
+*)
+
+let mklb first ~loc (p, e) attrs =
+  {
+    lb_pattern = p;
+    lb_expression = e;
+    lb_attributes = attrs;
+    lb_docs = symbol_docs_lazy loc;
+    lb_text = (if first then empty_text_lazy
+               else symbol_text_lazy (fst loc));
+    lb_loc = make_loc loc;
+  }
+
+let mklbs ~loc ext rf lb =
+  {
+    lbs_bindings = [lb];
+    lbs_rec = rf;
+    lbs_extension = ext ;
+    lbs_loc = make_loc loc;
+  }
+
+let addlb lbs lb =
+  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }
+
+let val_of_let_bindings ~loc lbs =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           ~docs:(Lazy.force lb.lb_docs)
+           ~text:(Lazy.force lb.lb_text)
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
+  match lbs.lbs_extension with
+  | None -> str
+  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
+
+let expr_of_let_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
+      (lbs.lbs_extension, [])
+
+let class_of_let_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+    (* Our use of let_bindings(no_ext) guarantees the following: *)
+    assert (lbs.lbs_extension = None);
+    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))
+
+(* Alternatively, we could keep the generic module type in the Parsetree
+   and extract the package type during type-checking. In that case,
+   the assertions below should be turned into explicit checks. *)
+let package_type_of_module_type pmty =
+  let err loc s =
+    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
+  in
+  let map_cstr = function
+    | Pwith_type (lid, ptyp) ->
+        let loc = ptyp.ptype_loc in
+        if ptyp.ptype_params <> [] then
+          err loc "parametrized types are not supported";
+        if ptyp.ptype_cstrs <> [] then
+          err loc "constrained types are not supported";
+        if ptyp.ptype_private <> Public then
+          err loc "private types are not supported";
+
+        (* restrictions below are checked by the 'with_constraint' rule *)
+        (* assert (ptyp.ptype_kind = Ptype_abstract); *)
+        (* assert (ptyp.ptype_attributes = []); *)
+        begin match ptyp.ptype_manifest with
+        | Some ty -> Some (lid, ty)
+        | None -> None
+        end
+    | _ ->
+        err pmty.pmty_loc "only 'with type t =' constraints are supported";
+        None
+  in
+  match pmty with
+  | {pmty_desc = Pmty_ident lid} -> (lid, [])
+  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
+      (lid, List.filter_map map_cstr cstrs)
+  | _ ->
+      err pmty.pmty_loc
+        "only module type identifier and 'with type' constraints are supported"
+      ; (Location.mkloc (Lident "_") pmty.pmty_loc, [])
+
+let mk_directive_arg ~loc k =
+  { pdira_desc = k;
+    pdira_loc = make_loc loc;
+  }
+
+let mk_directive ~loc name arg =
+  Ptop_dir {
+      pdir_name = name;
+      pdir_arg = arg;
+      pdir_loc = make_loc loc;
+    }
+
+let merloc startpos ?endpos x =
+  let endpos = match endpos with
+    | None -> x.pexp_loc.Location.loc_end
+    | Some endpos -> endpos
+  in
+  let loc = make_loc (startpos, endpos) in
+  let str = mkloc "merlin.loc" loc in
+  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
+  { x with pexp_attributes = attr :: x.pexp_attributes }
+
+let val_of_lwt_bindings ~loc lbs =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           ~docs:(Lazy.force lb.lb_docs)
+           ~text:(Lazy.force lb.lb_text)
+           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
+      lbs.lbs_bindings
+  in
+  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
+  match lbs.lbs_extension with
+  | None -> str
+  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
+
+let expr_of_lwt_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
+      lbs.lbs_bindings
+  in
+  Fake.app Fake.Lwt.in_lwt
+    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
+       (lbs.lbs_extension, []))
+
+
+# 834 "src/ocaml/preprocess/parser_raw.ml"
+
+module Tables = struct
+  
+  include MenhirBasics
+  
+  let token2terminal : token -> int =
+    fun _tok ->
+      match _tok with
+      | AMPERAMPER ->
+          131
+      | AMPERSAND ->
+          130
+      | AND ->
+          129
+      | ANDOP _ ->
+          128
+      | AS ->
+          127
+      | ASSERT ->
+          126
+      | BACKQUOTE ->
+          125
+      | BANG ->
+          124
+      | BAR ->
+          123
+      | BARBAR ->
+          122
+      | BARRBRACKET ->
+          121
+      | BEGIN ->
+          120
+      | CHAR _ ->
+          119
+      | CLASS ->
+          118
+      | COLON ->
+          117
+      | COLONCOLON ->
+          116
+      | COLONEQUAL ->
+          115
+      | COLONGREATER ->
+          114
+      | COMMA ->
+          113
+      | COMMENT _ ->
+          112
+      | CONSTRAINT ->
+          111
+      | DO ->
+          110
+      | DOCSTRING _ ->
+          109
+      | DONE ->
+          108
+      | DOT ->
+          107
+      | DOTDOT ->
+          106
+      | DOTLESS ->
+          105
+      | DOTOP _ ->
+          104
+      | DOTTILDE ->
+          103
+      | DOWNTO ->
+          102
+      | ELSE ->
+          101
+      | END ->
+          100
+      | EOF ->
+          99
+      | EOL ->
+          98
+      | EQUAL ->
+          97
+      | EXCEPTION ->
+          96
+      | EXTERNAL ->
+          95
+      | FALSE ->
+          94
+      | FINALLY_LWT ->
+          93
+      | FLOAT _ ->
+          92
+      | FOR ->
+          91
+      | FOR_LWT ->
+          90
+      | FUN ->
+          89
+      | FUNCTION ->
+          88
+      | FUNCTOR ->
+          87
+      | GREATER ->
+          86
+      | GREATERDOT ->
+          85
+      | GREATERRBRACE ->
+          84
+      | GREATERRBRACKET ->
+          83
+      | HASH ->
+          82
+      | HASHOP _ ->
+          81
+      | IF ->
+          80
+      | IN ->
+          79
+      | INCLUDE ->
+          78
+      | INFIXOP0 _ ->
+          77
+      | INFIXOP1 _ ->
+          76
+      | INFIXOP2 _ ->
+          75
+      | INFIXOP3 _ ->
+          74
+      | INFIXOP4 _ ->
+          73
+      | INHERIT ->
+          72
+      | INITIALIZER ->
+          71
+      | INT _ ->
+          70
+      | LABEL _ ->
+          69
+      | LAZY ->
+          68
+      | LBRACE ->
+          67
+      | LBRACELESS ->
+          66
+      | LBRACKET ->
+          65
+      | LBRACKETAT ->
+          64
+      | LBRACKETATAT ->
+          63
+      | LBRACKETATATAT ->
+          62
+      | LBRACKETBAR ->
+          61
+      | LBRACKETGREATER ->
+          60
+      | LBRACKETLESS ->
+          59
+      | LBRACKETPERCENT ->
+          58
+      | LBRACKETPERCENTPERCENT ->
+          57
+      | LESS ->
+          56
+      | LESSMINUS ->
+          55
+      | LET ->
+          54
+      | LETOP _ ->
+          53
+      | LET_LWT ->
+          52
+      | LIDENT _ ->
+          51
+      | LPAREN ->
+          50
+      | MATCH ->
+          49
+      | MATCH_LWT ->
+          48
+      | METHOD ->
+          47
+      | MINUS ->
+          46
+      | MINUSDOT ->
+          45
+      | MINUSGREATER ->
+          44
+      | MODULE ->
+          43
+      | MUTABLE ->
+          42
+      | NEW ->
+          41
+      | NONREC ->
+          40
+      | OBJECT ->
+          39
+      | OF ->
+          38
+      | OPEN ->
+          37
+      | OPTLABEL _ ->
+          36
+      | OR ->
+          35
+      | PERCENT ->
+          34
+      | PLUS ->
+          33
+      | PLUSDOT ->
+          32
+      | PLUSEQ ->
+          31
+      | PREFIXOP _ ->
+          30
+      | PRIVATE ->
+          29
+      | QUESTION ->
+          28
+      | QUESTIONQUESTION ->
+          27
+      | QUOTE ->
+          26
+      | RBRACE ->
+          25
+      | RBRACKET ->
+          24
+      | REC ->
+          23
+      | RPAREN ->
+          22
+      | SEMI ->
+          21
+      | SEMISEMI ->
+          20
+      | SIG ->
+          19
+      | STAR ->
+          18
+      | STRING _ ->
+          17
+      | STRUCT ->
+          16
+      | THEN ->
+          15
+      | TILDE ->
+          14
+      | TO ->
+          13
+      | TRUE ->
+          12
+      | TRY ->
+          11
+      | TRY_LWT ->
+          10
+      | TYPE ->
+          9
+      | UIDENT _ ->
+          8
+      | UNDERSCORE ->
+          7
+      | VAL ->
+          6
+      | VIRTUAL ->
+          5
+      | WHEN ->
+          4
+      | WHILE ->
+          3
+      | WHILE_LWT ->
+          2
+      | WITH ->
+          1
+  
+  and error_terminal =
+    0
+  
+  and token2value : token -> Obj.t =
+    fun _tok ->
+      match _tok with
+      | AMPERAMPER ->
+          Obj.repr ()
+      | AMPERSAND ->
+          Obj.repr ()
+      | AND ->
+          Obj.repr ()
+      | ANDOP _v ->
+          Obj.repr _v
+      | AS ->
+          Obj.repr ()
+      | ASSERT ->
+          Obj.repr ()
+      | BACKQUOTE ->
+          Obj.repr ()
+      | BANG ->
+          Obj.repr ()
+      | BAR ->
+          Obj.repr ()
+      | BARBAR ->
+          Obj.repr ()
+      | BARRBRACKET ->
+          Obj.repr ()
+      | BEGIN ->
+          Obj.repr ()
+      | CHAR _v ->
+          Obj.repr _v
+      | CLASS ->
+          Obj.repr ()
+      | COLON ->
+          Obj.repr ()
+      | COLONCOLON ->
+          Obj.repr ()
+      | COLONEQUAL ->
+          Obj.repr ()
+      | COLONGREATER ->
+          Obj.repr ()
+      | COMMA ->
+          Obj.repr ()
+      | COMMENT _v ->
+          Obj.repr _v
+      | CONSTRAINT ->
+          Obj.repr ()
+      | DO ->
+          Obj.repr ()
+      | DOCSTRING _v ->
+          Obj.repr _v
+      | DONE ->
+          Obj.repr ()
+      | DOT ->
+          Obj.repr ()
+      | DOTDOT ->
+          Obj.repr ()
+      | DOTLESS ->
+          Obj.repr ()
+      | DOTOP _v ->
+          Obj.repr _v
+      | DOTTILDE ->
+          Obj.repr ()
+      | DOWNTO ->
+          Obj.repr ()
+      | ELSE ->
+          Obj.repr ()
+      | END ->
+          Obj.repr ()
+      | EOF ->
+          Obj.repr ()
+      | EOL ->
+          Obj.repr ()
+      | EQUAL ->
+          Obj.repr ()
+      | EXCEPTION ->
+          Obj.repr ()
+      | EXTERNAL ->
+          Obj.repr ()
+      | FALSE ->
+          Obj.repr ()
+      | FINALLY_LWT ->
+          Obj.repr ()
+      | FLOAT _v ->
+          Obj.repr _v
+      | FOR ->
+          Obj.repr ()
+      | FOR_LWT ->
+          Obj.repr ()
+      | FUN ->
+          Obj.repr ()
+      | FUNCTION ->
+          Obj.repr ()
+      | FUNCTOR ->
+          Obj.repr ()
+      | GREATER ->
+          Obj.repr ()
+      | GREATERDOT ->
+          Obj.repr ()
+      | GREATERRBRACE ->
+          Obj.repr ()
+      | GREATERRBRACKET ->
+          Obj.repr ()
+      | HASH ->
+          Obj.repr ()
+      | HASHOP _v ->
+          Obj.repr _v
+      | IF ->
+          Obj.repr ()
+      | IN ->
+          Obj.repr ()
+      | INCLUDE ->
+          Obj.repr ()
+      | INFIXOP0 _v ->
+          Obj.repr _v
+      | INFIXOP1 _v ->
+          Obj.repr _v
+      | INFIXOP2 _v ->
+          Obj.repr _v
+      | INFIXOP3 _v ->
+          Obj.repr _v
+      | INFIXOP4 _v ->
+          Obj.repr _v
+      | INHERIT ->
+          Obj.repr ()
+      | INITIALIZER ->
+          Obj.repr ()
+      | INT _v ->
+          Obj.repr _v
+      | LABEL _v ->
+          Obj.repr _v
+      | LAZY ->
+          Obj.repr ()
+      | LBRACE ->
+          Obj.repr ()
+      | LBRACELESS ->
+          Obj.repr ()
+      | LBRACKET ->
+          Obj.repr ()
+      | LBRACKETAT ->
+          Obj.repr ()
+      | LBRACKETATAT ->
+          Obj.repr ()
+      | LBRACKETATATAT ->
+          Obj.repr ()
+      | LBRACKETBAR ->
+          Obj.repr ()
+      | LBRACKETGREATER ->
+          Obj.repr ()
+      | LBRACKETLESS ->
+          Obj.repr ()
+      | LBRACKETPERCENT ->
+          Obj.repr ()
+      | LBRACKETPERCENTPERCENT ->
+          Obj.repr ()
+      | LESS ->
+          Obj.repr ()
+      | LESSMINUS ->
+          Obj.repr ()
+      | LET ->
+          Obj.repr ()
+      | LETOP _v ->
+          Obj.repr _v
+      | LET_LWT ->
+          Obj.repr ()
+      | LIDENT _v ->
+          Obj.repr _v
+      | LPAREN ->
+          Obj.repr ()
+      | MATCH ->
+          Obj.repr ()
+      | MATCH_LWT ->
+          Obj.repr ()
+      | METHOD ->
+          Obj.repr ()
+      | MINUS ->
+          Obj.repr ()
+      | MINUSDOT ->
+          Obj.repr ()
+      | MINUSGREATER ->
+          Obj.repr ()
+      | MODULE ->
+          Obj.repr ()
+      | MUTABLE ->
+          Obj.repr ()
+      | NEW ->
+          Obj.repr ()
+      | NONREC ->
+          Obj.repr ()
+      | OBJECT ->
+          Obj.repr ()
+      | OF ->
+          Obj.repr ()
+      | OPEN ->
+          Obj.repr ()
+      | OPTLABEL _v ->
+          Obj.repr _v
+      | OR ->
+          Obj.repr ()
+      | PERCENT ->
+          Obj.repr ()
+      | PLUS ->
+          Obj.repr ()
+      | PLUSDOT ->
+          Obj.repr ()
+      | PLUSEQ ->
+          Obj.repr ()
+      | PREFIXOP _v ->
+          Obj.repr _v
+      | PRIVATE ->
+          Obj.repr ()
+      | QUESTION ->
+          Obj.repr ()
+      | QUESTIONQUESTION ->
+          Obj.repr ()
+      | QUOTE ->
+          Obj.repr ()
+      | RBRACE ->
+          Obj.repr ()
+      | RBRACKET ->
+          Obj.repr ()
+      | REC ->
+          Obj.repr ()
+      | RPAREN ->
+          Obj.repr ()
+      | SEMI ->
+          Obj.repr ()
+      | SEMISEMI ->
+          Obj.repr ()
+      | SIG ->
+          Obj.repr ()
+      | STAR ->
+          Obj.repr ()
+      | STRING _v ->
+          Obj.repr _v
+      | STRUCT ->
+          Obj.repr ()
+      | THEN ->
+          Obj.repr ()
+      | TILDE ->
+          Obj.repr ()
+      | TO ->
+          Obj.repr ()
+      | TRUE ->
+          Obj.repr ()
+      | TRY ->
+          Obj.repr ()
+      | TRY_LWT ->
+          Obj.repr ()
+      | TYPE ->
+          Obj.repr ()
+      | UIDENT _v ->
+          Obj.repr _v
+      | UNDERSCORE ->
+          Obj.repr ()
+      | VAL ->
+          Obj.repr ()
+      | VIRTUAL ->
+          Obj.repr ()
+      | WHEN ->
+          Obj.repr ()
+      | WHILE ->
+          Obj.repr ()
+      | WHILE_LWT ->
+          Obj.repr ()
+      | WITH ->
+          Obj.repr ()
+  
+  and default_reduction =
i\000[\002e\000\000\000\000\000\000\000\000\0009\000\000\000\000\001E\000:\002T\000\000\001\016\000\000\001\149\000f\000\000\002\241\000\000\000\000\000\000\000\000\000\000\000\000\001\128\001\146\001\145\001\144\001\150\001\154\001\148\001\147\001\129\001\152\001\143\001\142\001\141\001\140\001\139\001\137\001\153\001\151\000\000\000\000\000\000\000\218\000\000\000\000\001\132\000\000\000\000\000\000\001\134\000\000\000\000\000\000\001\136\001\158\001\155\001\138\001\130\001\156\001\157\000\000\002\242\000\000\000\000\000\016\001A\000\000\000\214\000\215\000\015\000\000\000\000\001\180\001\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\238\000\000\000\000\002\235\000\000\002\234\002\230\002\012\000\000\002\233\000\000\002\r\000\000\000\000\000\000\000\000\000b\000\000\000\000\000_\000\000\000\000\002\228\000\000\000\000\000\000\000\000\000\000\000\000\001\162\000\000\000\000\000\029\000\000\000\000\000\000\000\022\000\000\000\000\001i\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001C\000\000\001B\000\000\002\229\000 \000\000\000\000\000\023\000\018\000\000\000\000\000\000\000\198\000\000\000\000\000\000\000\200\002\022\002\b\000\000\000\026\000\000\002\t\000\000\000\000\001\159\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\011\002\208\000\000\002\209\000\000\000q\000\000\000\000\000\025\000\000\000\000\000\000\000\027\000\000\000\028\000\000\000\030\000\000\000\000\000\031\001\254\001\253\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\0013\000\000\000\000\0014\000\000\000\021\000\000\000\020\000\000\000\000\000\199\000\000\000`\000\000\000\000\000\000\000\024\000\019\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000^\000\000\001c\000\000\000\000\000\000\000\000\000\000\000\000\000\222\000\000\001y\000\000\000\225\000\223\000a\001u\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\000m\000\000\000\000\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\208\000\000\000\000\001\237\001\235\001\236\000\000\001q\000\000\000\000\000\209\000\000\000\000\001x\001t\002\227\000\000\000\000\000\000\000\000\000\000\001{\001w\001s\000\000\000\000\001z\001v\001r\001p\000\000\001\247\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\247\000\000\000\000\000\000\000\000\000\000\000\000\001\022\000\213\000\000\000\000\001\225\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000e\000h\000\000\000\000\000\000\000\000\000d\000\000\000\186\000\000\002\197\001\242\001\243\001\238\001\240\001\239\001\241\000\000\000\000\000\000\000\187\002\232\000\000\000\000\001\247\000\000\000\212\000\000\000\000\000\000\000\000\002\196\000\000\000\t\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002w\000\000\002?\002@\000\000\002=\002>\000\000\000\000\000\000\000\000\000\000\001T\001S\000\000\002u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\207\002\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\232\000\000\000\000\000\000\000\000\000\228\000\000\000\000\000\229\000\000\002A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\000\000\002|\000\\\000Z\002q\002r\001\204\002t\000\000\000\000\002y\002<\002{\000\000\000\000\000\000\002\127\000\000\000\000\000\000\001\201\001\192\000\000\000\000\000\000\000\000\000\000\001\191\000\000\001\203\002\130\000\000\001\202\001\196\000\000\002\128\000\000\000\000\000\000\000\000\000\000\001\193\000\000\002~\000\000\002B\000\000\000\000\002 \002}\002z\000\000\000\000\000\000\000\000\001\164\001+\001,\002D\000\000\002C\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\212\000\000\000\000\000\000\000\000\000\000\000\000\000\237\001\211\000\238\000\000\000\000\000\000\001k\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\000\000\000\000\000\000\000\000\000\000\000\000\001\250\000\000\000\000\001[\000\000\000\000\000\000\000\000\000\000\000\000\003\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\006\000\000\000\000\002\007\000\000\000\000\001Z\000\000\000\000\000\000\001a\001`f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\000\000\000\233\000\000\000\000\000\000\002b\000\000\000\000\000\000\002I\000\000\000\000\000\000\000\000\002d\002Y\002X\000\000\000\000\000t`\000\000\002l\000\000\002k\000\000\002o\000\000\002n\000\000\000\000\002a\000\000\000\000\000\000\001\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\000\002#\001\233\000\000\002h\000\000\000\000\000\000\002\244\000\000\000r\000s\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000{\000\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\242\000\000\000\195\000\196\000\000\000\000\002s\000\000\000\000\002\129\000\132\000\000\000\131\000\000\000\000\0011\000\000\0012\0010\002\002\000\000\000\000\002\003\002\001\000\000\000\000\000\000\000\000\000\000\002S\000\000\002R\000\000\000\000\002E\000\000\000\000\002g\000\000\000\000\000\000\002\029\002^\000\000\002]\000\000\002m\002j\000\000\002i\000\129\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~v\000\000\000;\000\000\000\000\000<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\247\000\000\000\000\002\249\000\000\000.\000\000\000\000\002\255\000\000\002\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\246\000\000\000\000\002\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\001>\000\000\001<\000\000\000/\000\000\000\000\003\002\000\000\003\001\000\000\000\000\000\000\001:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001?\000\000\000\000\001=\001;\000\000\000\000\000\000\000\000\000\000\001\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\012\002\200\000\000\000\000\002\199\000\000\000\000\000\000\000\000\000\000\000\000\002\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001m\000\000\001\223\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\183\000\000\000\000\002(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\127\000\000\000\000\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014\0026\000\000\000\000\000\000\0024\000\000\000\000\000\000\0023\000\000\001J\000\000\000\000\000\000\000\000\0029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\252\000\000\000\000\000\000\000\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\000\000\000\000\000\000\000\000\001h\000\000\001gn\000V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\000\000\000U\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b}\000\000\000\000\000\000\001|\000\000\000\000\001\028\001\027\000\000\001\222\000\211\000\000\000\000\000\000\000\000\0021\001\246\001\244\001\245\000\000\000\000\000\000\001\247\000\000\000\210\000\000\000\000\000\000\000\000\0020\000\000\001V\000\000\000\014\000\000\002\250\000\000\000\185\002[\000\000\000\000\000\000\000\000\002U\000\000\000\000\002V\000\000\002G\000\000\002H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000y\000\000\000x\000\000\000\000\000\000\000\137\000\000\000#\000\000\000\000\000\000\000\000\000z\000\000\000\216\000\001\000\000\000\000\000\219\000\002\000\000\000\003\000\000\001\187\000\000\000\000\001\188\000\004\000\000\000\000\001\189\000\005\000\000\000\000\000\000\002\216\002\211\002\212\002\215\002\213\000\000\000\000\002\220\000\006\000\000\002\219\000\000\001#\000\000\000\000\002\217\000\000\002\218\000\000\000\000\000\000\000\000\001'\001(\000\000\000\000\001&\001%\000\007\000\000\000\000\000\000\002\240\000\000\002\239")
+  
+  and error =
+    (132, "2\248H\018\197V\254fz\002\128\251\145@\003\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\224^\221\145\004\023\241R\000\tf\255\130\161\251\137Q\007\158\005\237\217\016A\127\021 \000\1528\0298\224\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$\250\000\128\250\001@\001\142\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\2240\184@\018\225F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\018\000@0$r\000\000\n\001@\001\140\000\b\000\000\002\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\128\000\000\000\000\000\000\000\000\ba\003\158@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184b\019\241V\254\164z|\194\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132! \004\003\002G \000\000\160\020\000\024\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\000\000\000\000\002\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000 \003\240\006\004\128\000|bb\0160\184@\000 \000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\216\016\"\000@$\000\128\000A\000\004(\000 \000\024\128\000 \000\002@\b\000\004\016\000B\000\002\000\001\136\000\002\000\000\024\000\002\006\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\002\004\000 \000\000\000\000\000\000\000\000\000\000\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\136\016A\000\0040\000 \000\029\128\017 \004\001\136\000,\b\0000\184P\000 \002\000 \000\016\000$\000\136\000a\002\1648\000\"\000\025\129\016a\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\128\002\128\128\003\011\133\000\002\000 \002\000\001\000\001\128\002(\b\0160\184@\000 \000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\192\004\025\026C\129\130\"\001\216\001f\017`\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002 \000\002\000\000\000\000\128\004\000\000\000\016\000\000\000\"\000\000\000\004\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000(\002F\000\000\145\0048\024\002 \004\129\018\000\016\001\128\000(\b\0000\184@\000 \000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\024\000\n\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000(\b\0000\184@\000 \000\000\000\000\020\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\236\000A\144\1648\024\" \029\128\022!\022\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\002\236\000A\144\1648\024\" \029\128\022!\022\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\002\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\192\004\025\026C\129\130\"\001\216\001b\017`\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\192\004\025\026C\129\130\"\001\216\001b\017`\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000B\192.\192\004\025\026C\129\130\"\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\bb\000\000\000\000\b\000\000 \000\000\000\001\018\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128\000\002\000\000\000\000\017 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128\000\002\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\014\192\004\025\nC\129\130\"\001\216\001b\017@\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000 \000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\004@\000\000\000\000\128\000\002\000\000\000\000\001\000\000\000@\000\000\000\000\b\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\024\000\002\000\000\003\011\140\000\002 \000\002\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000@\000\000\001\000\000\000\002 \000\000\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\128\000\002\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\004\000\000\000\128\000\000\000\000\016\000\000\000 \000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\000\000\001\128\000\168\b\0000\184@\000 \000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000D\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002\001\000\bb\128\004\016*C@\002 \003\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\006\016\nb\128\004\016\nC\128\002 \001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\006\016\nC\128\002 \001\152\001\006\016@$\000\136\000A\000\1648\000\"\000\025\128\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\216\001\002\000@\bb\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\152\001\002\000E\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\000\024\000\002\006\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\129\004\016\nC\000\002 \001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\001\002\000@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\001\"\000@$\000\136\000A\016\1640\0242\000\025\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000a\000\1648\000\"\000\029\128\000ab\128\004\016\nC\128\002 \001\152\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\006\016\nC\128\002 \001\216\000\006\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\004\016\nC\128\002 \001\152\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\129\004\016\nC\000\002 \001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000$\000\136\000A\000\1640\000\"\000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003/\132\137,Uo\230g\160(\015\185\148\0008\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000 \000  \128\000\001\000\000\000\000\b\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\0002\248H\018\197V\254f\250\002\128\251\137@\003\142\003/\132\129,Uo\230g\160(\015\184\148\0008\224\002\000\000\000 \001 B\129\128\000\000\b\001\000\000\000 \000\000\000\000\018\004(\024\000\000\000\128\016\000\000\002\000\000\000\000\001 B\001\128\000\000\b\001\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\002\000\000\000\000\000\002\000\000\b\000\000\000\000\000\024\000\000\002\000\000\000\bb\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000(\b\000\000\000\002\002\000\000\000\016\000\000\000\000\0000\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\225F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\136A\000`\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\020@\001\136@\128@\0020$Z\000 \n\128\000\001\004\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000@\000\004\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\004@\000\000\000\000\128\000\000\000@\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\004\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\024\132\000\006\000#\002M \002\000\160\000\000\016@\001\136@\000@\0020$\210\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bl\132\128\163\002M`\018\000\165\002\006\213P\000\000@\000@\002\000\000\002\000\000\b\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\138F\200H\n0$\222\001 \n\208\016mU\000\b\000\000\000\000\002\000E\000\000\000\000\000\000\000\000\001\136B\000@\0020$Z\000 \n\128\000\t\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000`\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000l\000\000\128\000\b\000\016\000\005\000\004\197\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000l\000\000\128\000\b\000\016\000\005\000\004\197\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000l\000\000\128\000\b\000\016\000\005\000\004\197\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\132l\004\000\163\002M\160\018\000\173\000\004\213P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\136F\192@\n0$\218\001 \n\208\000MU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\129\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\006\192\000\b\000\000\128\001\000\000P\000LQ\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\006\192\000\b\000\000\128\001\000\000P\000LQ\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\b\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\b\000\000\000\000\000\004\133\016\001\136@\128@\0020$Z\000 \n\128\000\001D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\128\000\000\000\000\000H\017\000\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000@\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$\214\000 \n@\000m\021\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\004\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\138@\bH\0020$\214\000 \nb\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\001\136@\000@\0020$R\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\016\006A#\002M\160\002\000\168\000\000\016@\000\128\128\000 \000  \128\000\001\000\000\000\000\b\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\001\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\000\"\000@\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\016\000\000\024\000\002\192\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\000\"\001@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\001\"\001D$\000\168\000A\128\1648\000\"\000\029\128\018 \004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\000\"\000\029\129\002 \004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\216\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\000\"\000@\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\n\128\004\024\nC\128\002 \001\216\000\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\216\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\003 \001\216\000&\000@(\b \000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\002\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\003 \001\216\016&\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\206\003\011\132\t,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\128\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192@\000\004@\000\000\000\000\000\000`\000@\144$\000\000\b\132\001 \004\003\002G \000\000\160\020\000\024\1920\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\132\001\"\004\003\002O \000\000\160\020\000\024\192\000\136@\018\000@0$\242\000\000\n\001@\001\140\000\b\132\001 \004\003\002G \000\000\160\020\000\024\1920\184@\018\225F\254$\250\000\128\250\t@\001\142\003\011\132\001,\020o\226O\160\b\015\160\148\000\024\2240\184@\018\193F\254$z\000\128\250\t@\001\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000`\0020$\218\000 \n\128\000\001\020\000\024\132\000\004\000#\002M\160\002\000\168\000\000\017@\001\136@\000@\0020$Z\000 \n\128\000\001\020\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\000\000\000\b\000\000\128\000\000\000\000\000H\017\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\138@\bh\0020$\214\000 \n\000\000\001\004\000\024\164\000\132\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000`\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\016\000\004\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\136@\018\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223\000\128\000\000\000\0000\004p\000\000\000\000\000\000\000\003\011\134!?\021o\234G\167\204/\164\028\001\154\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132!,\020o\226G\160\b\015\160\020\000\024\2240\184B\018\193F\254$z\000\128\250\001@\001\142\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\004\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184B\018\193F\254$z\000\128\250\001@\001\142\003\011\132!,\020o\226G\160\b\015\160\020\000\024\224\001\136B\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\132\001\"\004\003\002O \000\000\160\020\000\024\192\000\136@\018\000@0$\242\000\000\n\001@\001\140\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192BE.\193\244\031\n\195\129\255n\005\222\155~p\240\b\132\001 \004\003\002G \000\000\160\020\000\024\192B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224B\207n\219\252_:\231\247\255n\015\223\219\127\252\240\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\003\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\207BE.\193\244\031\n\195\129\255n\005\222\155~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000C\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000C\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\207BE.\193\244\031\n\195\129\255n\005\222\155~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007/\214\237?U\255\238\127\191\250\239\253\244\183\255\239^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\015\001\136@\000@\0020$\218\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000L\017\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\bz\000\128\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002l\031\000`\b\b\007\192 \004\000\005\134\0030\184B\210\193F\254$z\000\128\250\001@\001\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\b\000\000\000\000\003\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\015B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\244,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223B\207n\219\252_:\231\247\255.\015\223K\127\252\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\131\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136B\018\000@0$r\000\000\n\001@\001\140\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\028\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\t,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\018\000@0$r\000\000\n\001@\001\140\004\000\000\000\000\000\000\000\000\000\006\000\000\t\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000@\000$\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\006@\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\006@\000\000\000\000\128\000\000\000@\000 \000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\006@\000\000\000\000\128\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000@\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000@\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\006\000\000\t\000\000\000\000\128\000\000\000\0000\004p\000\000\000\000\000\000\000\004\000\000D\000\000\000\000\000\000\006\000\004\t\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\004\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\128\000\000\000\b\016\000\000\000 \000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000 \000\000\128\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000L\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\n0$V\000 \n\000\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\021\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$R\236\031A\240\1728\031\242\224]\224\183\231\015\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$R\236\031A\240\1728\031\246\224]\233\183\231\015\000\000 \001\240\006\000\128\128|\006\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002D\031\000`\b\b\007\192\160\004\000\005\130\003\000\000\004\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\b\128\004\016*C\128\003 \001\152\000\002\000@\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\000\000\000\b\000\000\128\000\000\000@\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\b\128\004\016*C\128\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000 \000\000\b\000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136A\000@\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000$\000\136\000A\000\1640\0002\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000%\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\192\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255.\005\222\011~p\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\020\004$R\236\031A\240\1728\031\242\224]\224\183\231\015@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@BE.\193\244\031\n\195\129\255.\005\222\011~p\240\000\002 \031\000`\b\b\007\192 \004\000\007\194\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\216\000\"\000D\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000B\001\128\000\000\b\001\000\000\000@\000\000\000\002\001\000\b\000\000\000\000\000\000\000\128\000\000\000\000\000 \016\000\128\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002@\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\bb\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\002@\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\b\000\000\000\000\000\000\000\128\000\000\000\004\000\000\016\000\128\000\000\000\000\000\000\000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\001\192\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\004\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\bb\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\001\192\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\000\128\000\000\000\000\128\000\000\000\000\000H\017\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\016\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000 \000\016\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000\"\000\029\128\000 \000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\1648\000\"\000\025\128\000 \000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\024\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\001\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C/\132\137\172Uo\230g\160(\015\184\020\000x\224\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@H\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000a\000\1648\000\"\000\029\128\000`\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\152\000\002\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\000\138\128\193\003\015\164\000\"\000\024\000\000 \000\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\002\0040\000 \000\025\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\002\0040\000 \000\025\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\016\002\000\000\000\b\000\000\000\000\000\000\000\000\001\128\001\000\000\000\000\000\128\000\000\000\000\000\000\000\000\024\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\020\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016 C\000\002\000\001\152\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\128\000 \004\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\024\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\128\000 \004\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\0040\000 \000\025\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\b\128\004\024\000C\128\002\000\001\152\000\002\000\000$\000\136\000A\000\0040\000 \000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\b\128\004\024\000C\128\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000a\000\0048\000 \000\025\128\000`\000\004@\000\000 \000\016\000\192\000\000\000\000\000\000\000\000@\000\000\002\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002\000\000\000\000\001 B\128\128\000\000\b\001\000\000\000 \000\000\000\000\018\004 \b\000\000\000\128\016\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \b\000\000\000\128\016\000\000\004\000\000\000\000 \016\000\128\000\000\000\000\000\000\000\000@\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\bb\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\018 \192\000\000\000\000\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\b\"\000\029\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002@\n\128\004\017\nC\128\130 \001\216\001\002\000@ \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\140\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\002\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000,\002\168\000A\129\0048\000\"\000\029\128\000`\004\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\192*\128\004\024\016C\128\002 \001\216\000\002\000@,\002\168\000A\129\0048\000\"\000\029\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\000\0048\000 \000\029\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\152\000\002\000@$\000\136\000A\000\004 \000 \000\025\128\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\002@\bb\128\004\016\000C\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\001\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\0040\000 \000\025\128\016 \004\002@\bbH\0020$V\000 \n@\000\005\004\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\002\000\000\000\000\001 B\129\128\000\000\b\001\000\000\000 \000\000\000\000\018\004 \024\000\000\000\128\016\000\000\002\000\000\000\000\001\000B\001\128\000\000\b\001\000\000\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000 \000\000\000\000\016\0040\024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\003\"\012\000\000\004\000\000\000\000\128\000\128\000\000\001\0002 \192\000\000@\000\000\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\024\132\016\006@#\002M\160\002\000\160\000\000\016@^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131@\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128\163\002E`\002\000\160\000\000\016@\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202J\154\012Q:g\247\130 \011\153A\007\141@,\164\169\160\197\019\166\127x\"\000\185\148\016x\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\n\128\004\017\nC\129\130 \001\152\001\006\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184\192\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\001\138@\bH\0020$V\000 \n@\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\000$\000\136\000A\000\1640\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\128\000 \000\002@\b\128\004\016\nB\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\152\000\002\000@\000\000\bb\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\128\000 \000\002@\b\128\004\016\nB\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000$\000\136\000A\000\0040\000 \000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000 \000\000\002\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@BE.\193\244\031\n\195\129\255.\005\222\011~p\244$R\236\031A\240\1728\031\242\224]\224\183\231\015\001\136@\000@\0020$Z\000 \n\128\000\001\020\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\000B\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\001\000\004\129\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\248H\018\197V\254fz\002\160\251\145@\003\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\200H\000\004\016:B\002\002 \003\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nB\000\002 \001\144\016\002\000\000\b\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nB\000\002\000\001\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003/\132\129,Uo\230g\160*\015\185\020\0008\2242\248H\018\197V\254fz\002\160\251\145@\003\142\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\128\000A\000\1640\000\"\000\025\000\000 \000\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nC\000\002 \001\144\000\002\000\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
+  
+  and start =
+    7
+  
+  and action =
+    ((16, "I\026Q\198M\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\228M\242\000\000\000\000\021\234M\242I\026Q\198\021\234\000\003\000\000Q\198\021\234\000\003Q\198\021\234\000\003\000\000\000\000\000\000\017\242\024\218\002\156\000\\\000\000\0008\004`\000\000\000\000\000\000\021\234\000\000G\018\000\000\000\000w\156\000\000M\242I\026\000\228\000/\002Bh^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\002\218\000\214\000\000\001\174\003\004\000\000\000\240\002\208\005J\000\000\000z\003\142\006\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\252\000\000\004DYf\000\000\000\000\004\166\000\000\000\000\000\000\004\246\004\210\000\000\000\000YfG<\0216IDa~\021\234e\246N\024\021\234Nv\000\000Nv\000\000\003(\005\014\000\000\004\166\000\000\000\000\000\000\002j\000\000\003(\000\000\006\018z\174\129\156i\002\000\000\132\020Yf\000\000V\150Wx\000\000m@\024\226o`\004\166x\002V\216\000\000Yf}\022\000\000Yfl\168\000\\\000\000Yf\004\166\000\000\000\000[\186YfZ\242Wx\002\198\006\018\000\172\000\000\006\020\000\000\006N\000\000\000\000X<\000\\\000\000\000\000Wx\005\240Yf\000\000Y$WxZ\012\000\000\000\000\000\000\006*\000\000Yf\000\000\021\194[\252\000\000Yf\021\194Yf\000\000\031\234\006P\004\166\000\000\000\000 \230\000\000\025\210\000\000^P\006~\000\000\005\200Yf\007\234\000\000\bv\000\000\000%\000\000\000\003\002(\000\000\000\000\000\000\005\134\004\166\000\000Yf \006\000\r\004\212\021\234\137\018\000\000\000\000\025\222\137l\000\000!\002\000\000\007\142\000\000\007\250Yf\000\000\b\136\000\000\005R\006\222\000\\\000\000\000\000Yf\004\234\005\240\000\000Yf\007\218\134\022\000\000\004N\000\000\bd\b>o`\001v\006\146\021\b\000\000\tH\000\000\005\176\000\000\000\000\000\000\000\000m\022\000\000\0066\tZr\188Wx\004N\t\242\000\000\nRWxb<\000\000i\170Wx\nFWxm\186b\226\021\234\000\000}\200\003N\000\000\000\000\000\000~T\000\000r\188\021\234\000\000\004N\n~\000\000\000\000\000\000z~K\218\025\178\004N\011\022\000\000\000\000\000\000\004N\011\028\000\000\000\000\000\000\000\000\129\156\000\000sHM\242I\026N\024\021\234R\224Nv\b\022{\n\000\000sHYf\nXYfjNsX\000\000\000\000\011\\G\228\000\000\028\224\003Nr\188\004T\t*\011t\000\000\011\142\000\000\000\000\002\000\007Z\011\"\012@\000\000\021\234\000\000p\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000x|\004T\021\234\000\000\000\000\b\156{\n\000\000sH\000\000\012^G\228\028\224p\028\000\000I\026\000\000\000\000G<\027\154\021\234\026\016\021\234I\026L4\021\174O\226Z:\000\000\000s\000\000\000\000\000\186\000\000\000\000N\218\000\162\003\248\002\156\000\t\000\000\000\000\b\142\000\000ID\012\154\012n\021\234\026\016\026\016\021\234\000\003\000\000\000\000Q\198\021\234\000\003Q\198\021\234\000\003\000\250\000\003Q\206\021\234\127\198\000\000Z:Z:~\222\t\204\000\000\004\216\n\014\000\000\012\212\000\000\025XYf\029\246\002\224Z:Q\206\021\234Z:\000\000\006\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000W\142\027\\\000\000\000\000\000\000\001\250\022H[ \000\000Q\206\021\234Z:\000\000\000\000^\022Z:b&Z:qX\000\000\\\130\000\000\000\000]v\000\000\000\000\022\168\000\000Z:\134DZ:\134\150\002B\000\000\127.\000\000\012\240\000\000K<{\148\000\000\000\000\000\000\023(\007\134\028X\b\002\000\000\000\000\000\000\000\000\012b\000\000_\020\003F\r\020\007\148Yf\001\132\r|\000\000\000\000\nH\r\020\001\162\000\003Z:_d\002\228\000\000Z:\026\028Yf\011\132\001\162\r\138\000\000\000\000\000\000N\218\006Z\006Z\000\000\014\014nDZ:\000\000\000\003n\148H\180\027\154\021\234\026\016\000/\000\234\000\t\000\000\rRIDID\000/\000\234\b\190\000\000\r\234ID\000\000o.\000 Nv\t\204\003\148wp\000\000Yfj\242Yfc\134kz\000\003\000\216\006\018d*\004`\006\018d\206\000\000o\144\000 \000\000IDp4\000\000\003L\n\148er\000\000\000\000\000\000\000\000\000\220\000\000\004\n\000\000\014\030\026\016\000\000`\182\026\016\000\000\004\242\000\000ID\005\016\000\000\000\000\000\000`\018\000\000\003x\000\003I\026K\014\011t\b\142\000\003\023\214Nl\017\242\000\003Qf\021\234\017\242Q\198\021\234J\020Q\198\021\234\000\003y\006\021\234[ Z:If\000\003Q\206\021\234|$O\212\006Z\014ps\226\000\003Q\206\021\234Z:\023(\000\003Q\206\021\234Z:\030\012\000\003\017\242\000\000\000\000\000\000\000\000\001\246\024\210H\022\000\000R\152Sj\027\154\021\234\026\016\t\232ID\005\188\000\000T<U\014Z:\028\020Yf\011\150\000\003Qf\021\234\017\242\023\214\017\242\002\252\003\204\000\003\000\003\017\242\0148\000\000\014<\000\000\017\242\004\002\014L\000\000\023(\000\003\014\212\000\000\027\198\000\003\018\238\024\210\000\000\000\000\000\000\002r\000\003\000\000\000\000\n\168\000\003\000\000\028\194\000\003\029\190\000\003\030\186\000\000\019\234\025\206\000\003\000\000\000\003M\242\000\003\000\000\000\000\000\003\031\182\000\003 \178\000\003!\174\000\003\"\170\000\003#\166\000\003$\162\000\003%\158\000\003&\154\000\003'\150\000\003(\146\000\003)\142\000\003*\138\000\003+\134\000\003,\130\000\003-~\000\003.z\000\003/v\000\0030r\000\0031n\000\0032j\021\234Z:\029\016Yf\012V\000\003\000\000 \004\000\003\000\000Z:!\000Z:!\252Z:\"\248\002B\000\000\000\000\000\000#\244Z:$\240p\028\000\000\000\000\000\0003f\000\003\015\b\000\000\000\003tN\000\000\004\216\004\210\000\003\015\018\000\000a,J\020\000\000\000\003\015$\000\000\000\003\0150\000\000\000\000\017\242\005\b\b\204\000\003\015F\006\014\000\0034b\000\003\015Z\007\n\000\0035^\000\003\015^\b\006\000\0036Z\027`\000\003\015l\t\002\000\0037V\000\003\015j\t\254\000\0038R\000\003t\148\n\250\000\0039N\b\210\t\200\000\003\015p\011\246\000\003:J\000\003\015n\012\242\000\003;F\000\003\015|\r\238\000\003<B\014\234\000\003=>\015\230\020\230\000\000\000\000\000\000\015\146\000\000\000\003\015\154\000\000\000\003\015\180\000\000\000\000%\236\000\003\000\000\006\206\000\003\000\000Z:\000\000\000\000y\132\015\200\000\000K\014\000\000\015\b\000\000U\222\000\000\015\204\000\000\011t\015d\000\000\023\214\023\028\t\204\000\000\027PYf\028\166Yf\027\254Yf\029\162\000\000\003\230\n\246\t\204\000\000\000\000\015\226\000\000\001n\026\202Of\000\000\012<\000\000\000\000\000\003\015>\000\003\015H\000\000\015V\000\003\015\\\000\000\000\003\012<\000\003\015Z\000\003\015b\000\000\000\000P\206\006Z\016\026s\226Wx\006\178\000\003\000\000\000\000s\226\000\000\000\000\004$\030\012\000\000Yf\011.\000\000\000\000s\226\000\000\015\240\000\003\000\000\000\003\000\000\000\000\000\000>:Z:\000\000\000\000\0166\000\003?6\000\003@2\000\000\015\148\000\000\026\202k\240\000\000\016\236\016,\000\000k\240\012\252\rl\000\000\000\000\015\198\000\000\016V\000\000\000\000\015\154\000\000\000\000\021\234\026\016\007\240\000\003\000\000\003\248\002\156\000\t\000\234\026\016|lID\027\192\026\016|\228\015\246\000\003\000\000\000\234\000\000\022\248\021\234\003N\025f\t\232\015\248\000\003\000\000\021\234\127\198Z:p\028\000\000\000\000\015\216\000\003\000\000\000\000nD\000\000\000\000\000\000\000\000\016p\000\000\000\000o`\006Z\015\228Yf\r\142\000\003\000\000\t|Yf\r\162\000\003\000\000\016\004\000\003\000\000\000\000p\028\000\000A.\016\240[ B*\016\244[ C&k\240\000\000ID\006\022\000\000ID\027\250\000\000ID\007\232\000\000l\148\b\228\000\000\031\b\000\000Yf\011\202\000\000P&\022~\012\172\004N\016\148\006\250\000\003\000\000\016>\000\003\000\000P \000\000\016\142\007,\000\000\007T\000\000\016\156\016\"YfK&\016\172\n\234\000\003\000\000\016^\000\003\000\000\029<\004\168\012\b\016\192uJ\136J\006Z\016fYf\014N\000\003\000\000\n\142YfI2\016~\000\003\000\000J,\000\000P \000\000\r\194\012D\000\000\012\140\000\000\016\232\016lo`\000\000\016\244u\154\136\198\006Z\016\140Yf\014\138\000\003\000\000\016\162\000\003\000\000\000\000M\242I\026Z:Jd\000\003\000\000\024\248\024\218\002\156\004\166\129\248ID\127\154p\028\000\000\002\156\t\168\000\t\000\234p\028\132p\002\156\000\t\000\234p\028\132p\000\000\000\000\000\234p\028\000\000M\242I\026\027\154\021\234\026\016sH\000\000\000\228\000/\002B\016\138Yf\014\158\017j\1302\000\000p\028\000\000\022\248\021\234\003Nx\146\004T\021\234p\028\000\000\021\234p\028\000\000p\182\136\208\023\184\003\248\002\156\006\018sX\000\000\002\156\006\018sX\000\000\024\248\002\156\011\000\025 \006\018sX\000\000\000\t\016\176IDsH\135\b\002\156\000\t\016\178IDsH\135\b\000\000\000\000\002\236\000\003\134\172\000\000ID\132\164i\022\000\000\002\236\000\000G<\0216IDsH\000\000\022\248\021\234\003Nr\188'\154\0284\006\216\005\172\000\000\012\218\003(\r\"\000\000\0178\016\222I\230\021\174P\186Yf\r\018\000\000R\250\021\176\016\230\t`\000\000\r<\000\000\017<\016\198YfP \000\000\004\168\014\190\012j\000\000\r`\000\000\017Z\016\220o`P \000\000\021\176I\230\000\000\017\130\016@\002\156\000\003\n\172I\230Yf\rv\r2\006\212\014.\000\000\000\000Yf\b6\t2\000\000\000\000q(\000\000\000\003\n\210I\230q\180P \000\000\021\234Yf\015DYfM(P \000\000\017 \000\000P \000\000\000\000R\250\000\000sH\132\222\006\216\005\172\012\218\017\144\0176I\230sH\132\222\000\000\000\000\006\216\005\172\012\218\017\148\017\018\135\140rZWx\017\168\135\140l\168\031\012\017\174\135\140Wx\017\176\135\140\r\184\014>v6v\154\000\000\130\182\000\000\000\000i\022\135\176\006\216\005\172\012\218\017\172\017.\135\140i\022\135\176\000\000\000\000\000\000\136\208\000\000\000\000\000\000\000\000\000\000\000\000i\022\000\000\1336\021\174M\006\017\186{\n\000\000sH\133@\000\000\000\000\136\n\021\174M\006\017\192\017F\129\156\000\000sH\136\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\186'\154\006\216\005\172\012\218\017\216w\014N\198\021\174O\226P&\021\234\000\003P \000\000\021\182\021\176N\198N\198z\006M\242\021\234\127\198Z:\011\166\000\000\016\154\002\156\000\003\012\202N\198Yf\r\190\000\\\000\000\021\234]vw\014N\198\rdN\198\000\000L\000L\244\000\000e\250\000\000\000\000f\160\000\000\000\000gF\000\003\014`N\198g\236\127\198Z:\011\166\000\000\011\224\000\000\135\140\018\020\000\000H\022\017\220\000\000P \000\000N\198H\022P \000\000\021\234YfP \000\000\017~\000\000P \000\000\000\000P&\000\000\128>\135\140\017\144N\198\128\160w\014\000\000p\028\133\164\006\216\005\172\012\218\017\238w\014p\028\133\164\000\000\000\000\000\000q\252Q\206\000\000\000\000\000\000\000\000\000\000\131\024\000\000\131|p\028\000\000\133@\000\000\000\000\000\000\000\000p\028q\252\000\000\018,\000\000\131\024\000\000\131\154\0180\000\000\017\160\000\000\017\162\000\000sH\000\000\021\234\026\016sH\000\000p\028q\252\000\000\000\000\018J\000\000\000\000\018TG\228\029\220i\022\000\000\000\000\000\000\000\000\014\178\129\004\129\156\000\000sH\000\000\018ZG\228\029\220i\022\000\000\017\216\000\000\t\224\000\000sH\000\000\018r\000\000\000\000\027\154\021\234\026\016\007\240\000\000ID\n\220\000\000\011F\000\000\018x\000\000\018\164[ D\"E\030[ F\026\000\003\000\000\000\003\000\000\017\204\000\003\017\222\000\000\018\150\000\000\000\003\017\240\000\003\017\250\000\000\018(\000\000\000\000e\246\0186\000\000\000\000Yf\000\000\011\224\000\000\000\003\018<\000\000\000\000Z:\026\028\000\000\000\000J\020\004\166}\142\000\000\000\000\000\000\000\000\000\000\\\222\nN\000\000\000\000\018\220\000\000g\212\000\000\015\"\018\230\000\000\018\236\000\000K\014K\014g.g.\000\000\000\000f\136g.\000\000\000\000\000\000f\136g.\018V\000\000\018\\\000\000"), (16, "\b\145\000\006\000\246\007\"\007&\b\145\004\018\001\002\b\145\001\006\001\018\001\030\b\145\006\250\b\145\0049\001\"\b\145\tv\b\145\b\145\b\145\001\210\b\145\b\145\t\170\001&\0049\0049\001*\b\145\006\194\006\198\012B\b\145\006\254\b\145\001\234\006\226\001\250\001.\000\238\b\145\b\145\007R\007V\b\145\007Z\007f\001Z\007r\007z\b\254\tV\001\002\b\145\b\145\001n\000\238\t\210\nz\b\145\b\145\b\145\n~\n\130\n\142\n\158\004\022\007\210\b\145\b\145\b\145\b\145\b\145\b\145\b\145\b\145\b\145\n\182\0049\b\145\001\214\b\145\b\145\b\145\003a\n\194\n\218\n\250\011\014\007\222\b\145\006B\b\145\b\145\b\145\001:\b\145\b\145\b\145\b\145\n\150\006=\n\154\003\162\0162\b\145\003J\b\145\b\145\t\166\b\145\b\145\b\145\b\145\b\145\b\145\007\226\n\170\b\145\b\145\b\145\011\"\003\"\011\134\011\193\b\145\b\145\b\145\b\145\011\193\n*\011\193\011\193\001B\003B\011\193\011\193\011\193\011\193\001\214\011\193\011\193\003a\011\193\011\193\011\193\000\n\011\193\011\193\006\250\011\193\011\193\t\254\011\193\011\193\011\193\011\193\011\193\011\193\011\193\011\193\007\006\002\217\002\217\011\193\tr\011\193\011\193\011\193\011\193\011\193\006\254\000\238\011\193\011\193\011\193\002\217\011\193\007v\011\193\011\193\011\193\001\137\007\n\011\193\011\193\011\193\011\193\011\193\011\193\011\193\003N\011\193\011\193\011\193\011\193\011\193\011\193\011\193\011\193\011\193\011\193\011\193\t\218\011\193\011\193\0049\011\193\011\193\011\193\0049\001\218\016\222\t\226\003\137\011\193\011\193\011\193\011\193\011\193\011\193\tr\003\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\004\030\001\137\001\137\001\137\001\137\001\137\b\250\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\002\174\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\130\001j\0049\0049\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\0049\011:\001\137\b\014\001\137\001\137\006J\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\t\n\001\137\001\137\001\137\001\137\001\137\t\137\001\242\0049\001\214\003a\t\137\006\177\t\137\t\137\011\254\006\177\t\137\t\137\t\137\t\137\000\238\t\137\t\137\003\"\t\137\t\137\t\137\003B\t\137\t\137\006\t\t\137\t\137\011\173\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\014\t*\002\178\t\137\tr\t\137\t\137\t\137\t\137\t\137\011\173\004\254\t\137\t\137\t\137\002\202\t\137\002\130\t\137\t\137\t\137\001\230\012\242\t\137\t\137\t\137\t\137\t\137\t\137\t\137\002\138\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\003V\t\137\t\137\007\194\t\137\t\137\t\137\b\210\b\234\020\186\003B\005\002\t\137\t\137\t\137\t\137\t\137\t\137\002\002\t\137\t\137\t\137\t\137\t\137\011\158\t\137\005\006\011\206\t\137\020\198\t\137\t\137\nF\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\000\238\t\137\t\137\t\137\t\137\t\137\003\165\002\217\002\217\004\242\t\166\003\165\006\161\003\165\003\165\nv\006\161\003\165\003\165\003\165\003\165\n\014\003\165\003\165\002&\003\165\003\165\003\165\011\162\003\165\003\165\n2\003\165\003\165\000\n\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\014\170\006I\014\182\003\165\t\182\003\165\003\165\003\165\003\165\003\165\t\254\001\002\003\165\003\165\003\165\001\030\003\165\001F\003\165\003\165\003\165\002\217\t\190\003\165\003\165\003\165\003\165\003\165\003\165\003\165\000\238\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\004\190\011\150\011\198\n\138\003\165\003\165\003\165\007\006\0049\005\133\002>\006.\003\165\003\165\003\165\003\165\003\165\003\165\001J\003\165\003\165\003\165\003\165\003\165\011\158\003\165\006:\011\206\003\165\007\n\003\165\003\165\0049\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\004F\003\165\003\165\003\165\003\165\003\165\003\153\002B\0049\006B\t\166\003\153\b=\003\153\003\153\002\150\nR\003\153\003\153\003\153\003\153\000\238\003\153\003\153\002.\003\153\003\153\003\153\r\130\003\153\003\153\n^\003\153\003\153\002\154\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\r\154\nF\r\166\003\153\002N\003\153\003\153\003\153\003\153\003\153\t\254\000\238\003\153\003\153\003\153\000\238\003\153\006\017\003\153\003\153\003\153\004\138\004\217\003\153\003\153\003\153\003\153\003\153\003\153\003\153\000\238\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\r~\011\150\011\198\007\162\003\153\003\153\003\153\021\018\001\246\004.\002R\t\166\003\153\003\153\003\153\003\153\003\153\003\153\b=\003\153\003\153\003\153\003\153\003\153\011\158\003\153\nV\011\206\003\153\003}\003\153\003\153\011f\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\004\190\003\153\003\153\003\153\003\153\003\153\t-\011\233\t\254\005\133\t\166\t-\004\166\t-\t-\0026\003R\t-\t-\t-\t-\011\233\t-\t-\004\154\t-\t-\t-\000\238\t-\t-\017\230\t-\t-\003z\t-\t-\t-\t-\t-\t-\t-\t-\003\158\0046\003R\t-\002\214\t-\t-\t-\t-\t-\t\254\000\238\t-\t-\t-\002\190\t-\r\206\t-\t-\t-\003\206\005\165\t-\t-\t-\t-\t-\t-\t-\000\238\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\003\242\t-\t-\003Z\t-\t-\t-\004\214\003\250\t:\0026\003q\t-\t-\t-\t-\t-\t-\004\170\t-\t-\t-\t-\t-\t-\t-\0049\t-\t-\006\025\t-\t-\0026\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\015\230\t)\t-\t-\t-\t-\t)\002\226\t)\t)\004~\003\162\t)\t)\t)\t)\002\006\t)\t)\005\165\t)\t)\t)\003B\t)\t)\0049\t)\t)\002\226\t)\t)\t)\t)\t)\t)\t)\t)\003f\000\238\0049\t)\018f\t)\t)\t)\t)\t)\001F\014\214\t)\t)\t)\bU\t)\r\226\t)\t)\t)\018^\004\142\t)\t)\t)\t)\t)\t)\t)\011\241\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\021\214\t)\t)\b\170\t)\t)\t)\004\161\005\137\018:\006N\003\133\t)\t)\t)\t)\t)\t)\014\222\t)\t)\t)\t)\t)\t)\t)\0156\t)\t)\015>\t)\t)\t\166\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\bA\t1\t)\t)\t)\t)\t1\017\254\t1\t1\004\002\026r\t1\t1\t1\t1\0026\t1\t1\b\178\t1\t1\t1\006\137\t1\t1\004n\t1\t1\t\254\t1\t1\t1\t1\t1\t1\t1\t1\004v\nF\003\133\t1\000\238\t1\t1\t1\t1\t1\b)\000\238\t1\t1\t1\000\238\t1\r\246\t1\t1\t1\005\234\b\218\t1\t1\t1\t1\t1\t1\t1\016\198\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\004\n\t1\t1\0026\t1\t1\t1\004\130\000\238\006\161\007.\bA\t1\t1\t1\t1\t1\t1\004\198\t1\t1\t1\t1\t1\t1\t1\026v\t1\t1\003\162\t1\t1\t\166\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\006\154\t!\t1\t1\t1\t1\t!\018\n\t!\t!\003)\b)\t!\t!\t!\t!\tr\t!\t!\004\202\t!\t!\t!\r\194\t!\t!\006\161\t!\t!\t\254\t!\t!\t!\t!\t!\t!\t!\t!\r\214\n\138\r\234\t!\001b\t!\t!\t!\t!\t!\b%\000\238\t!\t!\t!\003\162\t!\014\014\t!\t!\t!\0072\004\226\t!\t!\t!\t!\t!\t!\t!\004\182\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\014B\t!\t!\007\162\t!\t!\t!\004.\000\238\021V\007\"\007&\t!\t!\t!\t!\t!\t!\005\149\t!\t!\t!\t!\t!\t!\t!\019\138\t!\t!\001\002\t!\t!\t\166\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\b\133\t%\t!\t!\t!\t!\t%\026J\t%\t%\0062\b%\t%\t%\t%\t%\001F\t%\t%\005\026\t%\t%\t%\014F\t%\t%\007\154\t%\t%\t\254\t%\t%\t%\t%\t%\t%\t%\t%\014Z\nF\014n\t%\017\146\t%\t%\t%\t%\t%\001F\000\238\t%\t%\t%\000\238\t%\014\"\t%\t%\t%\007\166\005\"\t%\t%\t%\t%\t%\t%\t%\0049\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\005:\t%\t%\n\018\t%\t%\t%\b\242\017n\005~\001\130\001j\t%\t%\t%\t%\t%\t%\004.\t%\t%\t%\t%\t%\t%\t%\011^\t%\t%\000\238\t%\t%\t\166\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\002B\tA\t%\t%\t%\t%\tA\026~\tA\tA\007\"\020r\tA\tA\tA\tA\005\254\tA\tA\015Z\tA\tA\tA\b\129\tA\tA\020\130\tA\tA\t\254\tA\tA\tA\tA\tA\tA\tA\tA\012\014\005\158\021\194\tA\005\178\tA\tA\tA\tA\tA\016\018\000\238\tA\tA\tA\018\202\tA\0146\tA\tA\tA\022\006\026\134\tA\tA\tA\tA\tA\tA\tA\t\226\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\006\022\tA\tA\0066\tA\tA\tA\t\226\012\242\018\130\000\238\003\249\tA\tA\tA\tA\tA\tA\006>\tA\tA\tA\tA\tA\tA\tA\0156\tA\tA\015>\tA\tA\n\134\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\tA\018\030\t9\tA\tA\tA\tA\t9\000\238\t9\t9\006R\024\150\t9\t9\t9\t9\000\238\t9\t9\016\150\t9\t9\t9\005\206\t9\t9\0156\t9\t9\015>\t9\t9\t9\t9\t9\t9\t9\t9\006\026\004Q\003\249\t9\000\238\t9\t9\t9\t9\t9\015\130\011\130\t9\t9\t9\000\238\t9\014R\t9\t9\t9\006V\007}\t9\t9\t9\t9\t9\t9\t9\018\246\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\018\254\t9\t9\006\174\t9\t9\t9\021\130\027\015\004Q\011\253\007:\t9\t9\t9\t9\t9\t9\007>\t9\t9\t9\t9\t9\t9\t9\024\154\t9\t9\007\141\t9\t9\000\238\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\007\129\t5\t9\t9\t9\t9\t5\0049\t5\t5\007\174\015\134\t5\t5\t5\t5\0049\t5\t5\r\006\t5\t5\t5\b\138\t5\t5\016\142\t5\t5\000\238\t5\t5\t5\t5\t5\t5\t5\t5\021B\002\241\0026\t5\021^\t5\t5\t5\t5\t5\021\"\b\198\t5\t5\t5\021\026\t5\014f\t5\t5\t5\024\026\021\138\t5\t5\t5\t5\t5\t5\t5\b\214\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\000\238\t5\t5\021\170\t5\t5\t5\t\226\005\145\bi\021\206\b\230\t5\t5\t5\t5\t5\t5\t&\t5\t5\t5\t5\t5\t5\t5\007\137\t5\t5\018\242\t5\t5\n\134\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\024&\t=\t5\t5\t5\t5\t=\018\250\t=\t=\024B\002\178\t=\t=\t=\t=\000\238\t=\t=\bm\t=\t=\t=\003B\t=\t=\000\238\t=\t=\007}\t=\t=\t=\t=\t=\t=\t=\t=\tF\t~\003R\t=\t\154\t=\t=\t=\t=\t=\003R\017\134\t=\t=\t=\021\226\t=\014z\t=\t=\t=\017\154\012\242\t=\t=\t=\t=\t=\t=\t=\n:\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\022\198\t=\t=\021\218\t=\t=\t=\n\242\011\178\021\226\011\186\022\202\t=\t=\t=\t=\t=\t=\011\202\t=\t=\t=\t=\t=\t=\t=\0026\t=\t=\021~\t=\t=\000\238\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\007Y\ty\t=\t=\t=\t=\ty\021\134\ty\ty\024z\011\218\ty\ty\ty\ty\000\238\ty\ty\018\190\ty\ty\ty\026\022\ty\ty\000\238\ty\ty\007\133\ty\ty\ty\ty\ty\ty\ty\ty\t\226\rj\000\238\ty\r\138\ty\ty\ty\ty\ty\004Q\019.\ty\ty\ty\r\162\ty\014\134\ty\ty\ty\019\246\r\174\ty\ty\ty\ty\ty\ty\ty\r\202\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\r\222\ty\ty\r\242\ty\ty\ty\014\n\014\030\014N\014b\005\206\ty\ty\ty\ty\ty\ty\014v\ty\ty\ty\ty\ty\ty\ty\014\166\ty\ty\000\238\ty\ty\014\178\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\ty\014\190\003\149\ty\ty\ty\ty\003\149\014\242\003\149\003\149\015\002\015\018\003\149\003\149\003\149\003\149\022\"\003\149\003\149\015\030\003\149\003\149\003\149\015j\003\149\003\149\015\146\003\149\003\149\015\154\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\015\162\015\170\015\190\003\149\015\198\003\149\003\149\003\149\003\149\003\149\015\218\016&\003\149\003\149\003\149\0049\003\149\016R\003\149\003\149\003\149\016j\016\130\003\149\003\149\003\149\003\149\003\149\003\149\003\149\016\158\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\016\166\011\150\011\198\016\178\003\149\003\149\003\149\016\250\017\"\018Z\017F\017j\003\149\003\149\003\149\003\149\003\149\003\149\0049\003\149\003\149\003\149\003\149\003\149\011\158\003\149\017~\011\206\003\149\000\238\003\149\003\149\017\166\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\018b\003\149\003\149\003\149\003\149\003\149\t\021\021R\017\194\005\133\017\206\t\021\0186\t\021\t\021\018F\018n\t\021\t\021\t\021\t\021\018r\t\021\t\021\018~\t\021\t\021\t\021\000\238\t\021\t\021\018\142\t\021\t\021\018\166\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\021\182\021Z\018\182\t\021\018\214\t\021\t\021\t\021\t\021\t\021\005\141\019\006\t\021\t\021\t\021\019\n\t\021\019\022\t\021\t\021\t\021\019&\019:\t\021\t\021\t\021\t\021\t\021\t\021\t\021\019\238\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\019\250\011\150\011\198\024\014\t\021\t\021\t\021\020\138\020\162\021*\021.\021f\t\021\t\021\t\021\t\021\t\021\t\021\021j\t\021\t\021\t\021\t\021\t\021\011\158\t\021\021\146\011\206\t\021\021\150\t\021\t\021\021\178\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\t\021\0226\t\021\t\021\t\021\t\021\t\021\001\241\022f\022j\022\142\022\146\001\241\022\162\001\002\001\241\022\178\022\190\001\030\001\241\011\174\001\241\022\250\001\"\001\241\022\254\001\241\001\241\001\241\023J\001\241\001\241\023r\001&\011\182\023v\001*\001\241\001\241\001\241\001\241\001\241\011\190\001\241\023\186\024\162\024\174\001.\024\222\001\241\001\241\001\241\001\241\001\241\025\002\025*\001Z\001j\001\241\025\150\001\241\025\170\001\241\001\241\001n\025\178\025\186\nz\001\241\001\241\001\241\n~\n\130\n\142\025\234\r\182\007\210\001\241\001\241\001\241\001\241\001\241\001\241\001\241\001\241\001\241\025\246\011\150\011\198\026.\001\241\001\241\001\241\026B\026Z\026\142\026\150\026\190\007\222\001\241\006B\001\241\001\241\001\241\026\198\001\241\001\241\001\241\001\241\n\150\r\190\n\154\026\206\r\254\001\241\026\218\001\241\001\241\026\226\001\241\001\241\001\241\001\241\001\241\001\241\007\226\n\170\001\241\001\241\001\241\011\"\003\"\026\235\te\001\241\001\241\001\241\001\241\te\026\251\001\002\te\027\027\027g\001\030\te\te\te\027{\001\"\te\027\131\te\te\te\027\191\te\te\027\199\001&\te\000\000\001*\te\te\te\te\te\te\te\000\000\000\000\000\000\001.\000\000\te\te\te\te\te\000\000\000\000\001Z\001j\te\000\000\te\000\000\te\te\001n\000\000\000\000\nz\te\te\te\n~\n\130\n\142\000\000\te\007\210\te\te\te\te\te\te\te\te\te\000\000\te\te\000\000\te\te\te\000\000\000\000\000\000\000\000\000\000\007\222\te\006B\te\te\te\000\000\te\te\te\te\n\150\te\n\154\000\000\te\te\000\000\te\te\000\000\te\te\te\te\te\te\007\226\n\170\te\te\te\011\"\003\"\000\000\ta\te\te\te\te\ta\000\000\001\002\ta\000\000\000\000\001\030\ta\ta\ta\000\000\001\"\ta\000\000\ta\ta\ta\000\000\ta\ta\000\000\001&\ta\000\000\001*\ta\ta\ta\ta\ta\ta\ta\000\000\000\000\000\000\001.\000\000\ta\ta\ta\ta\ta\000\000\000\000\001Z\001j\ta\000\000\ta\000\000\ta\ta\001n\000\000\000\000\nz\ta\ta\ta\n~\n\130\n\142\000\000\ta\007\210\ta\ta\ta\ta\ta\ta\ta\ta\ta\000\000\ta\ta\000\000\ta\ta\ta\000\000\000\000\000\000\000\000\000\000\007\222\ta\006B\ta\ta\ta\000\000\ta\ta\ta\ta\n\150\ta\n\154\000\000\ta\ta\000\000\ta\ta\000\000\ta\ta\ta\ta\ta\ta\007\226\n\170\ta\ta\ta\011\"\003\"\000\000\0025\ta\ta\ta\ta\0025\000\000\001\002\0025\000\000\000\000\001\030\0025\011\174\0025\000\000\001\"\0025\000\000\0025\0025\0025\000\000\0025\0025\000\000\001&\011\182\000\000\001*\0025\0025\0025\0025\0025\011\190\0025\000\000\000\000\000\000\001.\0049\0025\0025\0025\0025\0025\0049\000\000\001Z\001j\0025\000\000\0025\000\000\0025\0025\001n\0049\000\000\nz\0025\0025\0025\n~\n\130\n\142\0049\r\182\007\210\0025\0025\0025\0025\0025\0025\0025\0025\0025\000\000\000\238\0025\0049\0025\0025\0025\000\000\000\000\000\000\0049\0049\007\222\0025\006B\0025\0025\0025\0049\0025\0025\0025\0025\n\150\000\238\n\154\0049\0049\0025\0049\0025\0025\0049\0025\0025\0025\0025\0025\0025\007\226\nb\018\023\226\0049\0049\000\000\000\000\0049\000\000\0049\0049\000\000\007\142\000\000\003\190\0049\b~\000\000\007\150\000\000\0049\bb\0049\0049\0049\000\000\000\000\0049\0049\0049\0049\000\129\000\129\0049\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\238\000\129\000\000\000\129\000\129\002\217\000\129\000\129\000\000\002\217\000\129\000\129\000\000\000\129\000\129\000\129\015*\000\129\000\000\000\129\000\129\000\238\000\000\000\129\000\129\000\000\000\129\000\129\000\129\001\002\000\129\000\n\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\006\181\000\000\000\129\000\129\006\181\002\217\000\129\000\129\000\000\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\018*\002\217\002\217\000\000\000\000\000\129\000\000\000\129\000\000\000\129\bf\011\210\007\154\b:\000\129\000\129\000\129\000\129\000\129\000\129\bn\000\129\000\129\000\129\bv\000\238\rb\000\129\rn\000\000\000\129\002\217\000\129\000\000\000\222\000\000\011\150\011\198\000\129\000\000\011\n\002\217\000\000\000\000\000\129\000\129\000\129\000\129\000\000\002)\000\129\000\129\000\129\000\129\002)\000\000\001\002\002)\015\174\011\158\001\030\002)\011\206\002)\000\000\001\"\002)\000\n\002)\002)\002)\000\000\002)\002)\bf\001&\000\000\b:\001*\002)\002)\002)\002)\002)\bn\002)\000\000\000\000\bv\001.\000\000\002)\002)\002)\002)\002)\000\000\002\217\001Z\n\146\002)\000\000\002)\000\000\002)\002)\001n\000\000\000\000\nz\002)\002)\002)\n~\n\130\n\142\000\000\000\000\007\210\002)\002)\002)\002)\002)\002)\002)\002)\002)\000\000\011\150\011\198\000\000\002)\002)\002)\000\000\000\000\000\000\000\000\000\000\007\222\002)\006B\002)\002)\002)\000\000\002)\002)\002)\002)\n\150\011\158\n\154\000\000\011\206\002)\020B\002)\002)\000\000\002)\002)\002)\002)\002)\002)\007\226\n\170\002)\002)\002)\011\"\003\"\000\000\002A\002)\002)\002)\002)\002A\000\000\001F\002A\000\000\000\000\002\217\002A\000\000\002A\011\141\000\000\002A\000\000\002A\002A\002A\000\000\002A\002A\002\217\002\217\019b\011\141\000\000\002A\002A\002A\002A\002A\000\000\002A\000\n\000\000\000\000\000\000\002\217\002A\002A\002A\002A\002A\000\000\000\000\011>\001j\002A\000\nbY\003-\020v\004Z\005I\002=\002=\002=\002=\002=\005\002\002=\006\153\007J\000\000\001\002\000\000\002=\002=\002=\002=\002=\000\000\006\218\000\000\005\006\002=\005\150\002=\nJ\002=\002=\007\182\002\226\000\000\003\245\002=\002=\002=\0052\000\238\000\000\000\000\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\002=\002=\004\242\011\150\011\198\007F\002=\002=\002=\000\000\bY\000\000\003f\001n\005\162\002=\004\221\002=\002=\002=\000\000\002=\002=\002=\002=\000\238\011\158\000\000\000\000\011\206\002=\004\250\002=\002=\000\000\002=\002=\002=\002=\002=\002=\000\000\tj\002=\002=\002=\000\000\bY\000\000\002-\002=\002=\002=\002=\002-\000\000\001F\002-\003\245\000\000\027+\002-\000\000\002-\000\000\000\000\002-\000\000\002-\002-\002-\000\000\002-\002-\bf\000\000\000\000\b:\t\022\002-\002-\002-\002-\002-\bn\002-\000\000\000\000\bv\000\000\000\000\002-\002-\002-\002-\002-\000\000\000\000\011>\015v\002-\000\000\002-\000\000\002-\002-\000\000\000\000\000\000\014\246\002-\002-\002-\015\006\015\022\015\"\000\000\000\000\000\000\002-\002-\002-\002-\002-\002-\002-\002-\002-\000\000\011\150\011\198\001\002\002-\002-\002-\000\000\006\193\000\000\001\"\000\000\006\193\002-\000\000\002-\002-\002-\000\000\002-\002-\002-\002-\000\000\011\158\000\000\006\246\011\206\002-\000\000\002-\002-\002\217\002-\002-\002-\002-\002-\002-\007\002\002\217\002-\002-\002-\t\166\014\002\007\154\0029\002-\002-\002-\002-\0029\000\000\000\000\0029\000\000\000\000\000\n\0029\014\022\0029\014*\007\210\0029\000\000\0029\0029\0029\000\000\0029\0029\000\000\t\166\002\217\000\000\000\000\0029\0029\0029\0029\0029\002\217\0029\006\193\007\222\000\000\t\254\002\217\0029\0029\0029\0029\0029\017\242\011y\011y\000\000\0029\011y\0029\0156\0029\0029\015>\000\000\002\217\000\238\0029\0029\0029\002\217\007\226\000\000\000\000\000\000\t\254\0029\0029\0029\0029\0029\0029\0029\0029\0029\b\174\001\002\0029\000\000\0029\0029\0029\000\000\000\000\000\n\000\238\000\000\000\238\0029\016\238\0029\0029\0029\004\165\0029\0029\0029\0029\007!\000\000\000\000\002\217\000\000\0029\000\000\0029\0029\000\000\011\226\0029\0029\0029\0029\0029\002\217\002\217\0029\0029\0029\007\154\011y\000\000\b\141\0029\0029\0029\0029\b\141\011\129\011\129\b\141\007!\011\129\000\000\b\141\017\246\b\141\015F\000\000\012\026\000\000\b\141\012>\b\141\004\254\b\141\b\141\007!\002\202\000\000\007!\011z\012R\012j\012r\012Z\012z\007!\b\141\000\000\000\000\007!\000\000\000\000\b\141\b\141\012\130\012\138\b\141\000\000\000\000\000\238\000\000\b\141\000\000\b\141\000\000\012\146\b\141\000\000\000\000\000\000\000\000\b\141\b\141\000\238\005\002\0049\000\000\000\000\000\000\000\000\b\141\b\141\012\"\012b\012\154\012\162\012\178\b\141\b\141\005\006\000\000\b\141\011\129\b\141\b\141\012\186\000\000\000\000\000\000\0049\000\000\000\000\b\141\000\000\b\141\b\141\012\194\000\000\b\141\b\141\b\141\b\141\t\197\000\000\000\000\000\000\000\000\b\141\004\242\b\141\b\141\0049\012\226\b\141\012\234\012\170\b\141\b\141\000\000\000\000\b\141\012\202\b\141\000\000\000\238\000\000\002m\b\141\b\141\012\210\012\218\002m\011}\011}\002m\t\197\011}\006\"\002m\000\000\002m\000\000\000\000\002m\000\000\002m\002m\002m\004\254\002m\002m\t\197\002\202\000\000\t\197\012\254\002m\002m\002m\002m\002m\t\197\002m\000\000\000\000\t\197\000\000\000\000\002m\002m\002m\002m\002m\000\000\006\157\000\238\000\000\002m\006\157\002m\000\000\002m\002m\000\000\018\154\000\000\016\006\002m\002m\002m\005\002\000\000\000\000\000\000\000\000\000\000\002m\002m\012\"\002m\002m\002m\002m\002m\002m\005\006\000\000\002m\011}\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\000\238\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\002m\000\238\000\000\000\000\000\000\000\000\002m\004\242\002m\002m\000\000\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\002m\002m\000\000\006\157\000\000\002U\002m\002m\002m\002m\002U\000\000\000\000\002U\011\030\000\000\005R\002U\000\000\002U\000\000\000\000\002U\000\000\002U\002U\002U\000\000\002U\002U\bf\000\000\000\000\b:\016\n\002U\002U\002U\002U\002U\bn\002U\000\000\000\000\bv\000\000\000\000\002U\002U\002U\002U\002U\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\018\018\002U\002U\002U\b%\000\000\000\000\000\000\000\000\000\000\002U\002U\012\"\002U\002U\002U\002U\002U\002U\000\000\000\000\002U\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\002U\000\000\002U\002U\002U\002U\000\238\000\000\000\238\000\000\000\000\002U\000\000\002U\002U\000\000\002U\002U\002U\002U\002U\002U\000\000\000\000\002U\002U\002U\000\000\000\000\000\000\002a\002U\002U\002U\002U\002a\000\000\000\000\002a\000\000\000\000\000\000\002a\000\000\002a\000\000\000\000\012\026\000\000\002a\002a\002a\000\000\002a\002a\bf\000\000\b%\b:\018\022\002a\002a\002a\012Z\002a\bn\002a\bY\000\000\bv\000\000\000\000\002a\002a\002a\002a\002a\000\000\000\000\b\017\000\000\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\007q\002a\002a\002a\007q\000\000\000\000\000\000\000\000\000\000\002a\002a\012\"\012b\002a\002a\002a\002a\002a\000\000\000\000\002a\000\000\002a\002a\002a\000\000\000\000\000\000\b\017\000\000\000\000\002a\000\000\002a\002a\002a\000\000\002a\002a\002a\002a\000\238\007q\000\000\000\000\000\000\002a\000\000\002a\002a\b\017\002a\002a\002a\002a\002a\002a\000\000\000\000\002a\002a\002a\000\000\000\000\007q\002q\002a\002a\002a\002a\002q\000\000\000\000\002q\r\018\000\000\000\000\002q\000\000\002q\000\000\000\000\002q\000\000\002q\002q\002q\b\017\002q\002q\r\026\003\202\000\000\r\"\b\017\002q\002q\002q\002q\002q\r*\002q\000\000\000\000\r2\003\202\000\000\002q\002q\002q\002q\002q\000\000\000\000\b\r\000\000\002q\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\007m\002q\002q\002q\007m\000\000\000\000\000\000\000\000\000\000\002q\002q\012\"\002q\002q\002q\002q\002q\002q\000\000\000\000\002q\000\000\002q\002q\002q\000\000\000\000\000\000\b\r\000\000\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\238\007m\000\000\000\000\000\000\002q\000\000\002q\002q\b\r\002q\002q\002q\002q\002q\002q\000\000\000\000\002q\002q\002q\000\000\000\000\007m\002Q\002q\002q\002q\002q\002Q\000\000\000\000\002Q\007\029\000\000\000\000\002Q\000\000\002Q\000\000\000\000\002Q\000\000\002Q\002Q\002Q\b\r\002Q\002Q\007\029\003\202\000\000\b:\b\rb:\000\000\002]\002]\002]\012Z\002]\0071\002]\000\000\000\000\0071\000\000\000\000\002]\002]\002]\002]\002]\000\000\000\000\000\000\000\000\002]\000\000\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\002]\002]\002]\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\012\"\012b\002]\002]\002]\002]\002]\000\000\000\000\002]\000\000\002]\002]\002]\000\000\000\000\000\000\000\000\000\000\000\000\002]\000\000\002]\002]\002]\000\000\002]\002]\002]\002]\000\238\000\000\000\000\000\000\000\000\002]\000\000\002]\002]\000\000\002]\002]\002]\002]\002]\002]\000\000\000\000\002]\002]\002]\000\000\000\000\000\000\002Y\002]\002]\002]\002]\002Y\000\000\000\000\002Y\007E\000\000\000\000\002Y\000\000\002Y\000\000\000\000\012\026\000\000\002Y\002Y\002Y\000\000\002Y\002Y\bf\000\000\000\000\b:\000\000\002Y\002Y\002Y\012Z\002Y\007E\002Y\000\000\000\000\007E\000\000\000\000\002Y\002Y\002Y\002Y\002Y\000\000\000\000\000\000\000\000\002Y\000\000\002Y\000\000\002Y\002Y\000\000\000\000\000\000\000\000\002Y\002Y\002Y\000\000\000\000\000\000\000\000\000\000\000\000\002Y\002Y\012\"\012brF\000\000\000\000\007A\000\000\012R\012j\012r\012Z\012z\007A\002\129\000\000\000\000\007A\000\000\000\000\002\129\002\129\012\130\012\138\002\129\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\012\146\002\129\000\000\000\000\000\000\000\000\002\129\002\129\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\012\"\012b\012\154\012\162\012\178\002\129\002\129\000\000\000\000\002\129\000\000\002\129\002\129\012\186\000\000\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\002\129\012\194\000\000\002\129\002\129\002\129\002\129\000\238\000\000\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\012\170\002\129\002\129\000\000\000\000\002\129\012\202\002\129\000\000\000\000\000\000\002i\002\129\002\129\012\210\012\218\002i\000\000\000\000\002i\007\025\000\000\000\000\002i\000\000\002i\000\000\000\000\012\026\000\000\002i\002i\002i\000\000\002i\002i\007\025\000\000\000\000\b:\000\000\002i\002i\002i\012Z\002i\007\025\002i\000\000\000\000\007\025\000\000\000\000\002i\002i\002i\002i\002i\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\012\"\012b\002i\002i\002i\002i\002i\000\000\000\000\002i\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\000\000\002i\002i\002i\002i\000\238\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\000\000\002i\002i\002i\002i\002i\002i\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\002e\002i\002i\002i\002i\002e\000\000\000\000\002e\014\202\000\000\000\000\002e\000\000\002e\000\000\000\000\012\026\000\000\002e\002e\002e\000\000\002e\002e\r\026\000\000\000\000\r\"\000\000\002e\002e\002e\012Z\002e\r*\002e\000\000\000\000\r2\000\000\000\000\002e\002e\002e\002e\002e\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\002e\012\"\012b\002e\002e\002e\002e\002e\000\000\000\000\002e\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\000\000\002e\002e\002e\002e\002e\002e\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\002y\002e\002e\002e\002e\002y\002\217\000\000\002y\000\000\021\006\000\000\002y\000\000\002y\000\000\000\000\012\026\000\000\002y\002y\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\002y\000\n\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\012\130\012\138\002y\000\000\000\000\000\000\000\000\002y\002\217\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\000\238\000\000\002\217\002\217\000\000\000\000\000\000\002y\002y\012\"\012b\012\154\012\162\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\012\170\002y\002y\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\002M\002y\002y\002y\002y\002M\000\000\000\000\002M\000\000\000\000\000\000\002M\000\000\002M\000\000\000\000\012\026\000\000\002M\002M\002M\000\000\002M\002M\000\000\000\000\000\000\000\000\000\000\002M\002M\002M\012Z\002M\000\000\002M\000\000\000\000\000\000\000\000\000\000\002M\002M\002M\002M\002M\000\000\000\000\000\000\000\000\002M\000\000\002M\000\000\002M\002M\000\000\000\000\000\000\000\000\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\000\000\002M\002M\012\"\012bj\012r\012Z\002I\000\000\002I\000\000\000\000\000\000\000\000\000\000\002I\002I\012\130\012\138\002I\000\000\000\000\000\000\000\000\002I\000\000\002I\000\000\002I\002I\000\000\000\000\000\000\000\000\002I\002I\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002I\002I\012\"\012bj\012r\012Z\002\165\000\000\002\165\000\000\000\000\000\000\000\000\000\000\002\165\002\165\012\130\012\138\002\165\000\000\000\000\000\000\000\000\002\165\000\000\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\002\165\002\165\002\165\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\012\"\012bj\012r\012Z\002E\000\000\002E\000\000\000\000\000\000\000\000\000\000\002E\002E\012\130\012\138\002E\000\000\000\000\000\000\000\000\002E\000\000\002E\000\000\002E\002E\000\000\000\000\000\000\000\000\002E\002E\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002E\002E\012\"\012b\012\154\012\162\002E\002E\002E\000\000\000\000\002E\000\000\002E\002E\002E\000\000\000\000\000\000\000\000\000\000\000\000\002E\000\000\002E\002E\002E\000\000\002E\002E\002E\002E\000\000\000\000\000\000\000\000\000\000\002E\000\000\002E\002E\000\000\002E\002E\002E\012\170\002E\002E\000\000\000\000\002E\002E\002E\000\000\000\000\000\000\002}\002E\002E\002E\002E\002}\000\000\000\000\002}\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\012\026\000\000\002}\002}\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\012\130\012\138\002}\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\012\"\012b\012\154\012\162\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\012\170\002}\002}\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\002u\002}\002}\002}\002}\002u\000\000\000\000\002u\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\012\026\000\000\002u\002u\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\012\130\012\138\002u\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\012\"\012b\012\154\012\162\002u\002u\002u\000\000\000\000\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\002u\000\000\002u\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\002u\002u\002u\012\170\002u\002u\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\002\133\002u\002u\002u\002u\002\133\000\000\000\000\002\133\000\000\000\000\000\000\002\133\000\000\002\133\000\000\000\000\012\026\000\000\002\133\002\133\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\012\130\012\138\002\133\000\000\000\000\000\000\000\000\002\133\000\000\002\133\000\000\012\146\002\133\000\000\000\000\000\000\000\000\002\133\002\133\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\012\"\012bj\012r\012Z\002\137\000\000\002\137\000\000\000\000\000\000\000\000\000\000\002\137\002\137\012\130\012\138\002\137\000\000\000\000\000\000\000\000\002\137\000\000\002\137\000\000\012\146\002\137\000\000\000\000\000\000\000\000\002\137\002\137\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\012\"\012bj\012r\012Z\002\141\000\000\002\141\000\000\000\000\000\000\000\000\000\000\002\141\002\141\012\130\012\138\002\141\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\012\146\002\141\000\000\000\000\000\000\000\000\002\141\002\141\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\012\"\012b\012\154\012\162\012\178\002\141\002\141\000\000\000\000\002\141\000\000\002\141\002\141\012\186\000\000\000\000\000\000\000\000\000\000\000\000\002\141\000\000\002\141\002\141\012\194\000\000\002\141\002\141\002\141\002\141\000\000\000\000\000\000\000\000\000\000\002\141\000\000\002\141\002\141\000\000\002\141\002\141\002\141\012\170\002\141\002\141\000\000\000\000\002\141\002\141\002\141\000\000\000\000\000\000\bI\002\141\002\141\012\210\012\218\bI\000\000\000\000\bI\000\000\000\000\000\000\bI\000\000\bI\000\000\000\000\012\026\000\000\bI\bI\bI\000\000\bI\bI\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\bI\000\000\000\000\000\000\000\000\000\000\bI\bI\012\130\012\138\bI\000\000\000\000\000\000\000\000\bI\000\000\bI\000\000\012\146\bI\000\000\000\000\000\000\000\000\bI\bI\000\238\000\000\000\000\000\000\000\000\000\000\000\000\bI\bI\012\"\012b\012\154\012\162\012\178\bI\bI\000\000\000\000\bI\000\000\bI\bI\012\186\000\000\000\000\000\000\000\000\000\000\000\000\bI\000\000\bI\bI\012\194\000\000\bI\bI\bI\bI\000\000\000\000\000\000\000\000\000\000\bI\000\000\bI\bI\000\000\bI\bI\bI\012\170\bI\bI\000\000\000\000\bI\012\202\bI\000\000\000\000\000\000\002\145\bI\bI\012\210\012\218\002\145\000\000\000\000\002\145\000\000\000\000\000\000\002\145\000\000\002\145\000\000\000\000\012\026\000\000\002\145\002\145\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\002\145\000\000\000\000\000\000\000\000\000\000\002\145\002\145\012\130\012\138\002\145\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\012\146\002\145\000\000\000\000\000\000\000\000\002\145\002\145\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\012\"\012b\012\154\012\162\012\178\002\145\002\145\000\000\000\000\002\145\000\000\002\145\002\145\012\186\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\012\194\000\000\002\145\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\000\000\012\226\002\145\012\234\012\170\002\145\002\145\000\000\000\000\002\145\012\202\002\145\000\000\000\000\000\000\bE\002\145\002\145\012\210\012\218\bE\000\000\000\000\bE\000\000\000\000\000\000\bE\000\000\bE\000\000\000\000\012\026\000\000\bE\bE\bE\000\000\bE\bE\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\bE\000\000\000\000\000\000\000\000\000\000\bE\bE\012\130\012\138\bE\000\000\000\000\000\000\000\000\bE\000\000\bE\000\000\012\146\bE\000\000\000\000\000\000\000\000\bE\bE\000\238\000\000\000\000\000\000\000\000\000\000\000\000\bE\bE\012\"\012b\012\154\012\162\012\178\bE\bE\000\000\000\000\bE\000\000\bE\bE\012\186\000\000\000\000\000\000\000\000\000\000\000\000\bE\000\000\bE\bE\012\194\000\000\bE\bE\bE\bE\000\000\000\000\000\000\000\000\000\000\bE\000\000\bE\bE\000\000\bE\bE\bE\012\170\bE\bE\000\000\000\000\bE\012\202\bE\000\000\000\000\000\000\002\193\bE\bE\012\210\012\218\002\193\000\000\000\000\002\193\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\012\026\000\000\002\193\002\193\002\193\000\000\002\193\002\193\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\002\193\012\130\012\138\002\193\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\012\146\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\012\"\012bj\012r\012Z\012z\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\012\130\012\138\002\189\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\012\146\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\012\"\012bj\012r\012Z\012z\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\002\197\012\130\012\138\002\197\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\012\146\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\012\"\012bj\012r\012Z\012z\000\000\002\177\000\000\000\000\000\000\000\000\000\000\002\177\002\177\012\130\012\138\002\177\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\012\146\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\012\"\012bj\012r\012Z\012z\000\000\002\181\000\000\000\000\000\000\000\000\000\000\002\181\002\181\012\130\012\138\002\181\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\012\146\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\012\"\012bj\012r\012Z\012z\000\000\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\012\130\012\138\002\185\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\012\146\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\012\"\012bj\012r\012Z\012z\000\000\002\205\000\000\000\000\000\000\000\000\000\000\002\205\002\205\012\130\012\138\002\205\000\000\000\000\000\000\000\000\002\205\000\000\002\205\000\000\012\146\002\205\000\000\000\000\000\000\000\000\002\205\002\205\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\205\012\"\012bj\012r\012Z\012z\000\000\002\201\000\000\000\000\000\000\000\000\000\000\002\201\002\201\012\130\012\138\002\201\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\012\146\002\201\000\000\000\000\000\000\000\000\002\201\002\201\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\012\"\012bj\012r\012Z\012z\000\000\002\209\000\000\000\000\000\000\000\000\000\000\002\209\002\209\012\130\012\138\002\209\000\000\000\000\000\000\000\000\002\209\000\000\002\209\000\000\012\146\002\209\000\000\000\000\000\000\000\000\002\209\002\209\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\209\012\"\012bj\012r\012Z\012z\000\000\002\173\000\000\000\000\000\000\000\000\000\000\002\173\002\173\012\130\012\138\002\173\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\012\146\002\173\000\000\000\000\000\000\000\000\002\173\002\173\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\012\"\012b\012\154\012\162\012\178\002\173\002\173\000\000\000\000\002\173\000\000\002\173\002\173\012\186\000\000\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\002\173\012\194\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\012\226\002\173\012\234\012\170\002\173\002\173\000\000\000\000\002\173\012\202\002\173\000\000\000\000\000\000\002\005\002\173\002\173\012\210\012\218\002\005\000\000\000\000\002\005\000\000\000\000\000\000\002\005\000\000\002\005\000\000\000\000\002\005\000\000\002\005\002\005\002\005\000\000\002\005\002\005\000\000\000\000\000\000\000\000\000\000\002\005\002\005\002\005\002\005\002\005\000\000\002\005\000\000\000\000\000\000\000\000\000\000\002\005\002\005\002\005\002\005\002\005\000\000\000\000\000\000\000\000\002\005\000\000\002\005\000\000\002\005\002\005\000\000\000\000\000\000\000\000\002\005\002\005\002\005\000\000\000\000\000\000\000\000\000\000\000\000\002\005\002\005\002\005\002\005\002\005\002\005\002\005\002\005\002\005\000\000\000\000\002\005\000\000\002\005\002\005\002\005\000\000\000\000\000\000\000\000\000\000\000\000\002\005\000\000\002\005\002\005\002\005\000\000\002\005\002\005\002\005\002\005\000\000\000\000\000\000\000\000\000\000\002\005\000\000\002\005\002\005\000\000\002\005\002\005\002\005\002\005\002\005\002\005\000\000\000\000\002\005\002\005\016B\000\000\000\000\000\000\002\029\002\005\002\005\002\005\002\005\002\029\000\000\000\000\002\029\000\000\000\000\000\000\002\029\000\000\002\029\000\000\000\000\012\026\000\000\002\029\002\029\002\029\000\000\002\029\002\029\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\000\000\002\029\000\000\000\000\000\000\000\000\000\000\002\029\002\029\012\130\012\138\002\029\000\000\000\000\000\000\000\000\002\029\000\000\002\029\000\000\012\146\002\029\000\000\000\000\000\000\000\000\002\029\002\029\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\029\002\029\012\"\012bj\012r\012Z\012z\000\000\002\025\000\000\000\000\000\000\000\000\000\000\002\025\002\025\012\130\012\138\002\025\000\000\000\000\000\000\000\000\002\025\000\000\002\025\000\000\012\146\002\025\000\000\000\000\000\000\000\000\002\025\002\025\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\025\002\025\012\"\012bj\012r\012Z\012z\000\000\002\169\000\000\000\000\000\000\000\000\000\000\002\169\002\169\012\130\012\138\002\169\000\000\000\000\000\000\000\000\002\169\000\000\002\169\000\000\012\146\002\169\000\000\000\000\000\000\000\000\002\169\002\169\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\012\"\012bb\000\000\000\000\000\000\000\000\001&\000\000\002\217\001f\001\138\011F\011J\001\150\001\154\000\000\002\217\000\000\006\226\002\217\001.\000\000\026b\000\000\011j\011n\000\000\007Z\007f\001Z\007r\007z\011r\tV\000\n\001\170\000\000\001n\000\000\000\000\nz\000\000\000\000\002\217\n~\n\130\n\142\n\158\000\000\007\210\002\217\002\217\001\174\001\178\001\182\001\186\001\190\000\000\002\217\n\182\001\194\000\000\000\000\000\000\002\217\001\198\000\000\n\194\n\218\n\250\011\014\007\222\000\000\006B\000\000\000\000\001\202\000\000\000\000\000\000\000\000\000\000\n\150\001\206\n\154\000\000\000\000\002\217\000\000\000\000\000\000\000\000\007}\000\000\002\n\0062\007}\000\000\007\226\n\170\000\000\002\014\000\000\014\234\003\"\011\134\000\000\002\022\000\000\002\026\002\030\000\006\000\246\006\026\000\000\006\145\000\000\001\002\000\000\001\006\001\018\001\030\000\000\000\000\006\206\000\000\001\"\001^\000\000\000\000\000\000\011B\000\000\000\000\007}\000\000\001&\000\000\000\000\001f\001\138\011F\011J\001\150\001\154\000\000\000\000\000\000\006\226\007}\001.\000\000\011N\000\000\011j\011n\006\145\007Z\007f\001Z\007r\007z\011r\tV\000\000\001\170\006\145\001n\000\000\000\000\nz\006\145\006\145\000\238\n~\n\130\n\142\n\158\007}\007\210\006\145\006\145\001\174\001\178\001\182\001\186\001\190\000\000\000\000\n\182\001\194\000\000\000\000\000\000\000\000\001\198\002\217\n\194\n\218\n\250\011\014\007\222\000\000\006B\002\217\000\000\001\202\007}\000\000\006\145\000\000\000\000\n\150\001\206\n\154\000\000\000\000\000\000\000\000\000\000\006\145\000\000\000\n\000\000\002\n\006R\000\000\000\000\007\226\n\170\000\000\002\014\000\000\014\234\003\"\011\134\024\170\002\022\002\217\002\026\002\030\000\006\000\246\000\000\000\000\001v\002\217\001\002\005\214\001\006\001\018\001\030\002\217\000\000\000\000\000\000\001\"\007i\000\000\006\190\000\000\000\000\000\000\004e\000\000\000\000\001&\019N\002j\001*\000\000\006\194\006\198\000\000\000\000\002\217\006\202\000\000\006\226\002n\001.\n\214\019^\000\000\007R\007V\000\000\007Z\007f\001Z\007r\007z\b\254\tV\000\000\000\000\019F\001n\007i\000\000\nz\019\194\000\000\0076\n~\n\130\n\142\n\158\007i\007\210\t\130\002B\t^\007i\007i\000\238\000\000\019\202\001n\n\182\000\000\016.\007i\007i\000\000\000\000\000\000\n\194\n\218\n\250\011\014\007\222\000\000\006B\019\222\020\n\000\000\000\000\004e\004e\000\000\000\238\n\150\000\000\n\154\000\000\000\000\t\134\007i\0026\000\000\007i\000\000\000\000\000\000\000\000\0206\023\166\007\226\n\170\016\170\000\000\007i\011\"\003\"\011\134\000\006\000\246\000\000\000\000\001v\000\000\001\002\005\214\001\006\001\018\001\030\000\000\000\000\000\000\0212\001\"\007e\000\000\004\133\000\000\ba\000\000\ba\ba\bf\001&\021\170\b:\001*\021\174\006\194\006\198\000\000\001n\bn\006\202\000\000\006\226\bv\001.\021\198\019^\019V\007R\007V\000\000\007Z\007f\001Z\007r\007z\b\254\tV\000\000\000\000\019F\001n\007e\000\000\nz\019\194\000\000\007]\n~\n\130\n\142\n\158\007e\007\210\000\000\000\000\000\000\007e\007e\000\238\000\000\019\202\000\000\n\182\000\000\0276\007e\007e\000\000\000\000\000\000\n\194\n\218\n\250\011\014\007\222\000\000\006B\019\222\020\n\000\000\000\000\027[\016b\000\000\000\000\n\150\000\238\n\154\000\000\000\000\000\000\007e\000\000\000\000\007e\000\000\000\000\000\000\000\000\000\000\023\166\007\226\n\170\ba\000\000\007e\011\"\003\"\011\134\000\006\000\246\000\000\000\000\001v\000\000\001\002\005\214\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\011\209\000\000\027\138\000\000\000\000\000\000\006>\000\000\000\000\001&\bf\000\000\001*\b:\006\194\006\198\000\000\000\000\000\000\006\202\bn\006\226\000\000\001.\bv\019^\b\146\007R\007V\bu\007Z\007f\001Z\007r\007z\b\254\tV\000\000\000\000\019F\001n\011\209\000\000\nz\019\194\000\000\000\000\n~\n\130\n\142\n\158\011\209\007\210\000\000\000\000\000\000\011\209\011\209\000\238\000\000\019\202\000\000\n\182\000\000\0276\011\209\011\209\000\000\000\000\000\238\n\194\n\218\n\250\011\014\007\222\000\000\006B\019\222\020\n\000\000\000\000\004\141\000\000\000\000\000\000\n\150\000\000\n\154\000\000\000\000\000\000\000\000\004\254\000\000\011\209\000\000\002\202\000\000\000\000\000\000\023\166\007\226\n\170\014\250\000\000\011\209\011\"\003\"\011\134\000\141\000\000\001\002\000\141\005\146\000\000\001\030\000\000\011\174\bf\000\000\001\"\b:\000\000\000\141\000\000\000\141\bu\000\141\bn\000\000\001&\011\182\bv\001*\005\002\002\217\000\000\000\000\000\000\011\190\000\141\000\000\000\000\000\000\001.\000\000\000\141\000\000\000\000\005\006\000\141\005\170\000\000\001Z\001j\000\141\000\000\000\141\000\000\000\000\000\141\001n\000\000\000\n\nz\000\141\000\141\000\141\n~\n\130\n\142\000\000\r\182\007\210\000\141\000\141\002\217\000\000\004\242\002\217\000\000\000\141\000\000\000\000\000\000\000\141\002\217\000\000\000\000\000\000\005\182\002\217\000\000\002\217\000\000\007\222\000\000\006B\000\141\000\141\002\217\002\217\000\141\000\141\000\000\000\000\n\150\004\250\n\154\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\141\000\141\007\226\n\170\000\000\000\000\000\000\011\"\003\"\002\217\000\141\000\165\000\141\001\002\000\165\000\000\000\000\001\030\000\000\011\174\002\217\011\173\001\"\000\000\000\000\000\165\000\000\000\165\000\000\000\165\000\000\000\000\001&\011\182\000\000\001*\000\000\001\165\000\000\000\000\011\173\011\190\000\165\000\000\000\000\000\000\001.\002\130\000\165\000\000\000\000\000\000\000\165\000\000\000\000\001Z\001j\000\165\000\000\000\165\002\138\000\000\000\165\001n\002\142\011\153\nz\000\165\000\165\000\165\n~\n\130\n\142\000\000\r\182\007\210\000\165\000\165\001\165\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\165\001\165\000\000\000\000\000\000\000\000\001\165\001\165\000\238\000\000\007\222\000\000\006B\000\165\000\165\001\165\001\165\000\165\000\165\000\000\000\000\n\150\000\000\n\154\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\165\000\165\007\226\n\170\000\000\000\000\000\000\011\"\003\"\001\165\000\165\000\014\000\165\000\018\000\022\000\026\000\030\000\000\000\"\000&\001\165\000*\000.\0002\000\000\0006\000:\000\000\000\000\000>\000\000\000\000\000\000\000B\000\000\000\000\002\217\002\217\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000\000\002\217\000\000\000j\000\000\000n\000\000\000r\002\217\000\n\000v\000\000\000\000\000\000\000\000\002\217\000\000\000\000\011\193\000\000\000\000\002\217\000\000\000\000\000z\002\217\002\217\000~\000\130\011\173\011\153\000\000\000\000\000\000\000\134\000\138\000\142\000\000\003\141\002\217\000\000\000\000\003\141\000\146\000\150\000\154\000\000\000\158\011\173\000\000\000\162\000\166\000\170\000\000\000\000\002\130\000\174\000\178\000\182\000\000\000\000\000\000\002\134\000\000\000\186\000\000\000\190\000\194\002\138\000\000\001\002\000\000\002\142\011\153\000\198\000\000\000\202\000\000\000\000\006\242\001\002\t6\000\206\000\210\001\030\000\214\000\000\000\000\000\000\001\"\001^\000\000\000\000\000\000\001b\000\000\000\000\000\000\011\193\011\193\000\000\023\194\001\134\001\138\001\142\007\018\001\150\001\154\000\000\000\000\000\000\000\000\023\234\001:\003\141\007\022\023\238\001\158\015\254\000\000\001n\011\193\007\014\001j\011\193\001\166\000\000\024\030\001\170\000\000\001n\003\141\000\000\007\142\003\141\000\000\000\000\007\146\000\000\007\150\007\198\000\000\007\210\011\193\000\000\001\174\001\178\001\182\001\186\001\190\000\000\024.\000\000\001\194\007\214\000\000\000\000\000\000\001\198\000\000\000\000\000\000\000\000\003\145\007\222\000\000\006B\003\145\b\026\001\202\000\000\000\000\000\000\000\000\000\000\000\000\001\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\n\0062\000\000\000\000\007\226\000\000\000\000\002\014\000\000\002\018\003\"\000\000\000\000\002\022\000\000\002\026\002\030\006\242\001\002\n\234\000\000\000\000\001\030\000\241\000\000\000\000\000\000\001\"\001^\000\000\000\000\000\000\001b\000\000\000\000\000\000\011\193\011\193\000\000\000\000\001\134\001\138\001\142\007\018\001\150\001\154\000\000\000\000\000\000\000\000\000\000\000\000\003\145\007\022\004Q\001\158\015\254\018&\000\000\011\193\007\014\001j\011\193\001\166\000\241\000\000\001\170\006\238\001n\003\145\000\000\007\142\003\145\000\000\000\241\007\146\000\000\007\150\007\198\000\241\007\210\000\000\000\000\001\174\001\178\001\182\001\186\001\190\000\241\000\241\000\000\001\194\007\214\000\000\000\000\004Q\001\198\000\000\018\150\000\000\000\000\000\000\007\222\000\000\006B\004Q\b\026\001\202\019F\000\000\004Q\005\206\000\238\019\194\001\206\000\000\000\000\000\241\000\000\004Q\004Q\000\000\023\206\023\222\000\000\002\n\0062\000\000\000\241\007\226\000\000\000\249\002\014\000\000\002\018\003\"\000\000\000\000\002\022\000\000\002\026\002\030\006\242\001\002\015\210\000\000\000\000\001\030\004Q\000\000\000\000\004}\001\"\001^\000\000\000\000\000\000\001b\000\000\004Q\000\000\000\000\024\202\000\000\000\000\001\134\001\138\001\142\007\018\001\150\001\154\000\000\000\249\000\000\000\000\021:\000\000\000\000\007\022\000\000\001\158\015\254\000\249\000\000\000\000\007\014\001j\000\249\001\166\000\000\000\000\001\170\000\000\001n\000\000\000\000\007\142\000\249\000\000\000\000\007\146\000\000\007\150\007\198\000\000\007\210\000\000\000\000\001\174\001\178\001\182\001\186\001\190\000\000\000\000\000\000\001\194\007\214\000\000\002\217\000\000\001\198\000\000\002\217\000\000\000\249\000\000\007\222\002\217\006B\000\000\b\026\001\202\000\000\000\000\000\000\000\249\000\000\002\217\001\206\000\000\002\217\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\002\n\0062\002\217\000\000\007\226\000\000\000\000\002\014\000\000\002\018\003\"\002\217\002\217\002\022\000\000\002\026\002\030\002\217\000\000\002\217\002\217\002\217\002\217\000\000\000\000\002\217\002\217\002\217\002\217\000\000\002\217\002\217\000\000\000\000\000\000\000\000\002\217\000\000\000\000\002\217\000\000\002\217\002\217\000\n\000\000\000\000\002\217\000\nv\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\000!\019F\000\029\000\029\000\000\000\000\019\194\000\000\000\029\000\000\000\029\000\029\000\029\000\000\000!\000!\021\162\000\029\000\000\000!\000!\000!\006=\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\029\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\000\000\000\004un\000\000\000\000\001&\000\000\000\000\001*\000\000\006\194\006\198\000\000\000\000\000\000\000\000\000\000\006\226\000\000\001.\000\000\000\000\000\000\007R\007V\000\000\007Z\007f\001Z\007r\007z\b\254\tV\000\000\000\000\000\000\001n\000\000\000\000\nz\000\000\000\000\000\000\n~\n\130\n\142\n\158\000\000\007\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\194\n\218\n\250\011\014\007\222\011\141\006B\000\000\000\000\000\000\011\141\000\000\011\141\011\141\000\000\n\150\000\000\n\154\000\000\000\000\000\000\000\000\011\141\000\000\011\141\011\141\011\141\000\000\011\141\011\141\000\000\007\226\nt\221\011\141\011\141\t\221\t\221\000\000\000\000\000\000\t\221\000\000\t\221\002:\000\000\t\221\000\000\000\000\000\000\t\221\t\221\000\000\t\221\t\221\000\000\000\000\t\221\000\000\000\000\000\000\002\254\t\221\006\129\000\000\t\221\000\000\000\000\002Z\002\226\000\000\000\000\000\000\t\221\002\230\t\221\001n\002\250\003\006\t\221\t\221\000\000\000\000\003\018\000\000\005\018\000\000\t\221\000\000\000\000\t\221\000\000\000\000\t\221\t\221\000\000\t\221\000\000\t\221\t\221\003\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\221\000\000\000\000\t\221\000\000\000\000\000\000\000\000\000\000\bM\000\000\000\000\000\000\t\221\bM\t\221\0026\bM\t\221\000\000\t\221\000\000\000\000\000\000\000\000\000\000\bM\007\250\bM\bM\bM\000\000\bM\bM\t\221\t\221\000\000\t\221\t\221\000\000\t\221\000\000\t\221\000\000\t\221\bM\t\221\000\000\t\221\000\000\000\000\bM\bM\000\000\000\000\bM\000\000\000\000\000\000\002\226\bM\000\000\bM\000\000\000\000\bM\000\000\000\000\000\000\000\000\bM\bM\bM\000\000\000\000\000\000\000\000\000\000\000\000\bM\bM\000\000\000\000\000\000\000\000\000\000\bM\000\000\000\000\000\000\003f\000\000\000\000\000\000\bM\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bM\bM\bM\000\000\bM\bM\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bM\000\000\bM\bM\000\000\000\000\011q\bM\000\000\000\000\000\000\011q\bM\0026\011q\000\000\bM\000\000\bM\bM\000\000\000\000\000\000\003\134\000\000\011q\011q\011q\000\000\011q\011q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011q\000\000\000\000\0022\0026\000\000\011q\011q\000\000\000\000\011q\000\000\000\000\000\000\002\226\011q\000\000\011q\002\214\000\000\011q\000\000\002:\000\000\002J\011q\011q\011q\000\000\000\000\000\000\000\000\002V\000\000\011q\011q\000\000\000\000\000\000\002^\000\000\011q\000\000\000\000\000\000\003f\002Z\002\218\000\000\011q\000\000\000\000\002\230\000\000\001n\002\250\003\006\000\000\011q\011q\011q\003\018\011q\011q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011q\000\000\011q\011q\003\022\000\000\bQ\011q\000\000\000\000\000\000\bQ\011q\0026\bQ\000\000\011q\000\000\011q\011q\000\000\000\000\000\000\bQ\000\000\bQ\bQ\bQ\000\000\bQ\bQ\000\000\000\000\000\000\000\000\006\242\001\002\000\000\004~\000\000\001\030\000\000\bQ\000\000\000\000\001\"\000\000\003\"\bQ\bQ\006\001\000\000\bQ\000\000\000\000\000\000\002\226\bQ\000\000\bQ\000\000\006\246\bQ\000\000\000\000\000\000\000\000\bQ\bQ\bQ\000\000\000\000\000\000\000\000\007\002\000\000\bQ\bQ\007\014\001j\000\000\000\000\000\000\bQ\000\000\000\000\001n\003f\000\000\007\142\000\000\bQ\000\000\007\146\000\000\007\150\007\198\000\000\007\210\000\000\bQ\bQ\bQ\000\000\bQ\bQ\000\000\000\000\000\000\000\000\007\214\000\000\000\000\000\000\000\000\000\000\bQ\000\000\bQ\bQ\007\222\011u\006B\bQ\b\026\000\000\011u\000\000\bQ\011u\000\000\000\000\bQ\000\000\bQ\bQ\000\000\000\000\003:\000\000\011u\011u\011u\000\000\011u\011u\000\000\007\226\000\000\b\190\006\242\001\002\000\000\003\"\000\000\001\030\000\000\011u\000\000\000\000\001\"\000\000\000\000\011u\011u\b\022\000\000\011u\000\000\000\000\000\000\000\000\011u\000\000\011u\000\000\006\246\011u\000\000\000\000\000\000\000\000\011u\011u\011u\000\000\000\000\000\000\000\000\007\002\000\000\011u\011u\007\014\001j\000\000\000\000\000\000\011u\000\000\000\000\001n\011u\000\000\007\142\000\000\011u\000\000\007\146\000\000\007\150\007\198\000\000\007\210\000\000\011u\011u\011u\000\000\011u\011u\003\017\000\000\000\000\000\000\007\214\003\017\000\000\000\000\003\017\000\000\011u\000\000\011u\011u\007\222\000\000\006B\011u\b\026\003\017\003\017\003\017\011u\003\017\003\017\000\000\011u\000\000\011u\011u\000\000\000\000\000\000\000\000\000\000\000\000\003\017\000\000\006R\006}\006}\007\226\003\017\0032\000\000\n\206\003\017\003\"\000\000\000\000\000\000\003\017\000\000\003\017\000\000\000\000\003\017\000\000\006}\000\000\006}\003\017\003\017\003\017\000\000\000\000\000\000\000\000\006}\000\000\003\017\003\017\000\000\000\000\000\000\000\000\000\000\003\017\000\000\000\000\000\000\003\017\006}\006}\000\000\003\017\000\000\000\000\006}\000\000\006}\006}\006}\000\000\003\017\003\017\003\017\006}\003\017\003\017\000\000\000\000\000\000\t\233\000\000\000\000\006\242\001\002\000\000\000\000\003\017\001\030\003\017\003\017\006}\000\000\001\"\003\017\000\000\000\000\t\233\t\233\003\017\t\233\t\233\000\000\003\017\000\000\003\017\003\017\000\000\000\000\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\233\000\000\007\002\000\000\000\000\000\000\007\014\001j\011U\000\000\000\000\011U\000\000\000\000\001n\000\000\000\000\007\142\000\000\003\178\t\233\007\146\011U\007\150\007\198\000\000\007\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\233\000\000\000\000\007\214\011U\000\000\000\000\000\000\000\000\000\000\011U\000\000\000\000\007\222\000\000\006B\000\000\b\026\t\233\011U\t\233\011U\000\000\000\000\011U\000\000\000\000\000\000\000\000\011U\000\000\000\000\000\000\000\000\t\233\000\000\000\000\t\233\t\233\000\000\007\226\000\000\t\233\000\000\t\233\011U\003\"\t\229\t\233\011U\006\242\001\002\000\000\000\000\000\000\001\030\000\000\b\206\000\000\000\000\001\"\000\000\011U\011U\t\229\t\229\011U\t\229\t\229\000\000\000\000\b\238\000\000\000\000\027V\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\011U\000\000\t\229\000\000\007\002\000\000\000\000\000\000\007\014\001j\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\007\142\000\000\000\000\t\229\007\146\000\000\007\150\007\198\tJ\007\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\229\000\000\000\000\007\214\000\000\007\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\222\000\000\006B\000\000\b\026\t\229\000\000\t\229\000\000\007\005\007\005\000\000\007\005\007\005\000\000\000\000\000\000\000\000\001\189\000\000\000\000\t\229\000\000\001\189\t\229\t\229\001\189\007\226\000\000\t\229\000\000\t\229\007\005\003\"\000\000\tb2\000\000\001\189\007\005\007\005\000\000\000\000\000\000\007\005\000\000\007\005\001\189\001\189\001\189\007\005\001\189\001\189\000\000\000\000\000\000\000\000\006\242\001\002\000\000\000\000\000\000\001\030\001\189\b\206\001\189\001\189\001\"\000\000\000\000\001\189\000\000\000\000\000\000\000\000\001\189\000\000\000\000\b\238\003\202\000\000\001\189\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\002\006\242\001\002\000\000\t2\001j\001\030\000\000\b\206\000\000\000\000\001\"\001n\000\000\000\000\007\142\000\000\000\000\t\193\007\146\000\000\007\150\b\238\tJ\007\210\000\000\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\007\214\000\000\000\000\000\000\007\002\000\000\000\000\000\000\t2\001j\007\222\000\000\006B\000\000\000\000\tR\001n\000\000\000\000\007\142\000\000\000\000\t\193\007\146\000\000\007\150\000\000\tJ\007\210\000\000\000\000\t\193\0156\000\000\t\193\017r\000\000\007\226\000\000\000\000\007\214\t\193\000\000\003\"\000\000\t\193\0059\000\000\000\000\000\000\007\222\0059\006B\000\000\0059\tR\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0059\000\000\0059\000\000\0059\000\000\t\193\000\000\000\000\t\193\t\193\000\000\007\226\000\000\000\000\000\000\t\193\0059\003\"\000\000\t\193\000\000\000\000\0059\0059\000\000\000\000\000\000\000\000\000\000\0059\000\000\0059\000\000\0059\000\000\000\000\0059\000\000\000\000\000\000\000\000\0059\0059\0059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0059\0059\000\000\000\000\0059\005-\000\000\000\000\000\000\000\000\005-\000\000\000\000\005-\000\000\000\000\000\000\0059\0059\0059\000\000\0059\0059\000\000\005-\000\000\005-\000\000\005-\t\226\000\000\000\000\000\000\000\000\000\000\000\000\0059\000\000\000\000\0059\0059\005-\000\000\000\000\000\000\000\000\000\000\005-\005-\000\000\000\000\0059\000\000\000\000\nF\000\000\005-\000\000\005-\000\000\000\000\005-\000\000\000\000\000\000\000\000\005-\005-\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\026\005-\005-\r\146\b]\005-\b]\b]\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\005-\005-\005-\000\000\005-\005-\003U\000\000\000\000\012\130\012\138\003U\000\000\000\000\003U\000\000\000\000\000\000\000\000\005-\012\146\000\000\005-\005-\000\000\003U\000\000\003U\000\238\003U\000\000\000\000\000\000\000\000\005-\000\000\000\000\012\"\012b\012\154\012\162\012\178\003U\000\000\000\000\000\000\000\000\000\000\003U\003U\012\186\000\000\000\000\000\000\000\000\005\001\000\000\003U\000\000\003U\000\000\012\194\003U\000\000\000\000\000\000\000\000\003U\003U\003U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\226\000\000\012\234\012\170\000\000\000\000\003U\000\000\b]\012\202\003U\000\000\000\000\000\000\000\000\000\000\007\017\012\210\012\218\000\000\000\000\000\000\000\000\003U\003U\003U\000\000\003U\003U\001\173\000\000\0026\001\173\007\017\007\017\005\001\007\017\007\017\000\000\000\000\000\000\bf\000\000\000\000\000\000\007\017\000\000\007\017\0039\000\000\0026\0039\000\000\000\000\001\173\001\173\000\000\000\000\001\173\001\173\b5\007\017\0039\000\000\b:\007\017\0039\000\000\000\000\007\017\001\173\007\017\000\000\000\000\000\000\007\017\000\000\001\173\000\000\0039\000\000\000\000\001\173\000\000\000\000\0039\001\169\000\000\001\173\000\000\000\000\000\000\000\000\002\226\0039\000\000\0039\000\000\000\000\0039\000\000\000\000\000\000\000\000\0039\0039\0039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0039\0039\000\000\000\000\003fv\000\000\000\149\002v\000\000\000\149\003U\000\000\000\000\000\000\003U\000\000\000\000\000\000\020:\000\000\000\149\000\000\000\149\000\000\000\149\000\000\000\000\003U\003U\003U\000\000\003U\003U\000\000\000\000\020>\000\000\000\149\000\000\005\005\000\000\020fv\000\217\000\000\005\214\000\000\000\217\004Q\004Q\000\000\000\000\004Q\000\000\000\157\000\000\027\138\000\157\000\000\000\000\000\217\000\217\000\000\000\000\000\217\000\217\000\000\000\000\000\157\000\000\000\157\004Q\000\157\006\202\000\000\000\000\000\217\000\000\000\000\019^\000\000\000\000\000\217\000\217\000\000\000\157\000\000\000\000\007z\000\000\025F\000\157\000\217\019F\000\217\000\157\000\000\000\000\019\194\000\000\000\157\000\000\000\157\000\000\000\000\000\157\000\000\000\000\000\000\000\000\000\157\000\157\000\238\000\000\019\202\000\000\000\000\000\000\0276\000\157\000\157\000\000\000\000\000\000\000\000\001v\000\157\000\000\005\214\000\000\000\157\019\222\020\n\000\000\000\000\004\141\000\000\000\153\000\000\004\133\000\153\000\000\000\000\000\157\000\157\000\000\000\000\000\157\000\157\000\000\000\000\000\153\000\000\000\153\023\166\000\153\006\202\000\000\000\000\000\157\000\000\000\000\019^\000\000\000\000\000\157\000\157\000\000\000\153\000\000\000\000\007z\000\000\025F\000\153\000\157\019F\000\157\000\153\000\000\000\000\019\194\000\000\000\153\000\000\000\153\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\153\000\153\000\238\000\000\019\202\000\000\000\000\000\000\000\000\000\153\000\153\000\000\000\000\001^\000\000\000\000\000\153\000\000\000\000\000\000\000\153\019\222\020\n\000\000\000\000\001\134\001\138\001\142\001\146\001\150\001\154\000\000\000\000\000\153\000\153\000\000\000\000\000\153\000\153\000\000\001\158\001\162\000\000\000\000\023\166\000\000\000\000\000\000\001\166\000\153\000\000\001\170\000\000\000\000\000\000\000\153\000\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\153\000\000\000\153\001\174\001\178\001\182\001\186\001\190\000\000\000\000\000\000\001\194\000\000\000\000\000\000\000\000\001\198\000\000\001q\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\000\001\202\004Q\000\000\000\000\004Q\001q\000\000\001\206\000\000\001q\000\000\000\000\000\000\000\000\000\000\004Q\000\000\000\000\002\n\004Q\000\000\000\000\001q\001q\000\000\002\014\000\000\002\018\001q\000\000\000\000\002\022\004Q\002\026\002\030\005\001\000\000\001q\004Q\001q\000\000\000\000\001q\000\000\000\000\000\000\000\000\001q\001q\001q\000\000\000\000\004Q\000\000\000\000\000\000\000\000\004Q\005\206\000\000\000\000\000\000\000\000\001q\000\000\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\000\004Q\000\000\001\169\000\000\0026\001\169\000\000\001q\001q\000\000\000\000\001q\001q\000\000\b5\000\000\001\169\004Q\004Q\005\001\001\169\004Q\004Q\001q\000\000\000\000\000\000\000\000\000\000\001q\001q\000\000\000\000\001\169\000\000\001q\000\000\000\000\000\000\001\169\004Q\001q\000\000\000\000\000\000\005R\000\000\002\226\001\169\000\000\001\169\004Q\000\000\001\169\000\000\000\000\000\000\000\000\001\169\001\169\001\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\169\001\169\000\000\000\000\003f\007\221\000\000\000\000\000\000\000\000\007\221\000\000\000\000\007\221\000\000\000\000\000\000\001\169\001\169\000\000\000\000\001\169\001\169\000\000\007\221\000\000\007\221\000\000\007\221\000\000\000\000\000\000\000\000\001\169\000\000\000\000\000\000\000\000\000\000\000\000\001\169\007\221\000\000\000\000\000\000\001\169\000\000\007\221\007\221\000\000\000\000\001\169\000\000\000\000\000\000\000\000\007\221\000\000\007\221\000\000\000\000\007\221\000\000\000\000\000\000\000\000\007\221\007\221\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\221\000\000\000\000\000\000\007\221\012\r\000\000\000\000\000\000\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\007\221\007\221\007\221\000\000\007\221\007\221\000\000\012\r\000\000\012\r\000\000\012\r\000\000\000\000\000\000\000\000\007\221\000\000\000\000\007\221\000\000\000\000\000\000\007\221\012\r\000\000\000\000\000\000\000\000\000\000\012\r\012\r\000\000\000\000\007\221\000\000\000\000\000\000\000\000\012\r\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\000\000\012\r\012\r\012\r\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\000\000\012\t\000\000\000\000\012\t\012\r\000\000\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\012\t\000\000\012\t\000\000\012\t\000\000\000\000\012\r\012\r\012\r\000\000\012\r\012\r\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\000\012\t\012\t\000\000\012\r\000\000\000\000\000\000\012\r\000\000\012\t\000\000\012\t\000\000\000\000\012\t\000\000\003\202\000\000\012\r\012\t\012\t\012\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\026\012\t\000\000\006\165\017\218\012\t\000\000\006\165\000\000\000\000\000\000\000\000\000\000\012R\012j\012r\012Z\012z\012\t\012\t\012\t\000\000\012\t\012\t\000\000\000\000\000\000\012\130\012\138\000\000\000\000\000\000\000\000\000\000\005\246\000\000\000\000\012\t\012\146\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\012\t\000\000\000\000\012\"\012b\012\154\012\162\012\178\000\000\000\000\000\000\000\000\000\000\005]\006\165\016v\012\186\000\000\005]\000\000\000\000\005]\000\000\000\000\000\000\000\000\000\000\012\194\000\000\0022\0026\000\000\005]\000\000\005]\000\000\005]\000\000\000\000\000\000\000\000\000\000\000\000\012\226\017\222\012\234\012\170\017\234\002:\005]\002J\000\000\012\202\000\000\000\000\005]\005]\000\000\002V\000\000\012\210\012\218\nF\000\000\005]\000\000\005]\000\000\000\000\005]\000\000\000\000\002Z\002\218\005]\005]\000\238\000\000\002\230\000\000\001nn\002\250\003\006\001\181\000\000\000\000\000\000\003\018\000\000\0035\000\000\0026\0035\000\000\000\000\004\242\001\181\001\181\000\000\000\000\001\181\001\181\000\000\0035\003\022\000\000\000\000\0035\004f\000\000\000\000\000\000\001\181\000\000\000\000\000\000\000\000\000\000\000\000\001\181\0035\000\000\000\000\000\000\000\000\000\000\0035\000\000\004N\000\000\001\181\000\000\000\000\000\000\002\226\0035\000\000\0035\000\000\000\000\0035\000\000\000\000\000\000\000\000\0035\0035\0035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\242\001\002\0035\0035\000\000\001\030\003f\b\206\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0035\0035\b\238\000\000\0035\0035\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\0035\000\000\000\000\000\000\007\002\002\217\002\217\0035\t2\001j\002\217\000\000\0035\000\000\000\000\002\217\001n\000\000\0035\007\142\000\000\002\217\000\000\007\146\000\000\007\150\000\000\tJ\007\210\000\000\000\000\002\217\000\n\000\000\000\000\tZ\000\000\000\000\000\000\000\000\007\214\016\206\000\000\000\000\002\217\000\000\000\000\000\000\002\217\002\217\007\222\000\000\006B\000\000\000\000\tR\002\217\000\000\000\000\002\217\000\000\000\000\002\217\002\217\000\000\002\217\002\217\000\000\002\217\000\000\000\000\000\000\0156\000\000\000\000\015>\t\166\007\226\000\000\000\000\002\217\005Y\000\000\003\"\005Y\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\000\000\017\n\005Y\000\000\005Y\000\000\005Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0022\0026\017v\000\000\000\000\005Y\000\000\000\000\000\000\000\000\002\217\005Y\t\254\000\000\000\000\000\000\002\217\000\000\005q\002\242\005Y\002J\005Y\005q\000\000\005Y\005q\000\000\000\000\002V\005Y\005Y\000\238\000\000\000\000\000\000\000\000\005q\000\000\005q\000\000\005q\000\000\002Z\002\218\000\000\005Y\000\000\000\000\002\230\005Y\001n\002\250\003\006\005q\000\000\000\000\000\000\003\018\000\000\005q\005q\000\000\005Y\005Y\005Y\000\000\005Y\005Y\005q\000\000\005q\000\000\000\000\005q\003\022\000\000\000\000\000\000\005q\005q\005q\005Y\000\000\000\000\000\000\005Y\000\000\000\000\000\000\000\000\000\000\000\000\004Q\000\000\005q\004Q\005Y\000\000\005q\t\166\000\000\000\000\000\000\000\000\005m\000\000\004Q\005m\000\000\000\000\004Q\005q\005q\005q\000\000\005q\005q\000\000\005m\000\000\005m\000\000\005m\004Q\000\000\000\000\000\000\000\000\000\000\004Q\005q\000\000\000\000\000\000\005q\005m\000\000\000\000\004Q\000\000\004Q\005m\t\254\004Q\000\000\t\246\000\000\000\000\004Q\005\206\005m\000\000\005m\000\000\000\000\005m\000\000\000\000\000\000\000\000\005m\005m\000\238\000\000\004Q\004Q\000\000\000\000\004Q\001v\0022\0026\002v\000\000\000\000\000\000\005m\000\000\000\000\000\000\005m\004Q\004Q\020:\000\000\004Q\004Q\004Y\000\000\002:\000\000\002J\000\000\005m\005m\005m\000\000\005m\005m\002V\020>\000\000\000\000\000\000\004Q\000\000\020f\000\000\000\000\006\"\000\000\000\000\005m\002Z\002\218\004Q\005m\000\000\000\000\002\230\019F\001n\002\250\003\006\000\000\019\194\001-\005mv\001)\000\000\005\214\000\000\001)\001-\000\000\000\000\006\245\001)\006\245\001)\000\000\006\190\001)\000\000\001-\004e\000\000\001)\001)\000\238\000\000\000\000\006\245\000\000\000\000\b:\006\245\001)\006\202\000\000\006\245\000\000\006\245\001)\019^\000\000\006\245\001)\000\000\000\000\000\000\000\000\000\000\007z\001Y\025F\011\141\001Y\019F\000\000\001)\001)\001)\019\194\001)\001)\011\141\000\000\001Y\000\000\001Y\000\000\001Y\000\000\000\000\000\000\001)\000\000\000\000\019\202\000\000\000\000\000\000\001)\000\000\001Y\000\000\000\000\000\000\000\000\000\000\001Y\011\141\000\000\001)\000\000\019\222\020\n\000\000\011\141\004e\004e\000\000\003-\000\000\001Y\003-\000\000\000\000\000\000\001Y\001Y\001Y\000\000\000\000\000\000\000\000\003-\000\000\023\166\000\000\003-\000\000\000\000\000\000\000\000\001Y\000\000\000\000\000\000\011\141\000\000\000\000\000\000\003-\005\014\000\000\000\000\000\000\000\000\003-\000\000\000\000\001Y\001Y\001Y\000\000\001Y\001Y\003-\000\000\003-\000\000\000\000\003-\000\000\000\000\000\000\000\000\003-\003-\003-\000\000\000\000\000\000\022\154\001Y\000\000\t\166\000\000\000\000\000\000\000\000\004Q\000\000\003-\004Q\001Y\000\000\003-\000\000\004Q\000\000\000\000\004Q\000\000\000\000\004Q\000\000\000\000\000\000\004Q\003-\003-\006*\004Q\003-\003-\000\000\004Q\000\000\000\000\000\000\000\000\004Q\000\000\000\000\000\000\003-\000\000\004Q\t\254\004Q\000\000\0052\003-\000\000\nF\004Q\004Q\003-\004Q\004Q\000\000\004Q\003B\003-\004Q\000\000\004Q\005\206\000\238\004Q\000\000\000\000\000\000\000\000\004Q\005\206\000\000\000\000\000\000\000\000\000\000\000\000\004Q\004Q\004Q\000\000\004Q\000\000\006\242\001\002\004Q\004Q\000\000\001\030\004Q\b\206\000\000\000\000\001\"\004Q\004Q\000\000\000\000\004Q\004Q\000\000\000\000\004Q\004Q\b\238\000\000\004Q\004Q\000\000\006\246\005\246\000\000\t\006\000\000\003N\000\000\000\000\004Q\004Q\000\000\n\246\000\000\007\002\000\000\000\000\004Q\015\206\001j\004Q\000\000\000\000\000\000\000\000\000\000\001n\000\000\004Q\007\142\000\000\000\000\000\000\007\146\000\000\007\150\000\000\tJ\007\210\000\000\012\026\000\000\000\000\000\000\000\000\000\000\000\000\rv\000\000\000\000\007\214\000\000\000\000\012R\012j\012r\012Z\012z\000\000\000\000\007\222\000\000\006B\000\000\000\000\000\000\000\000\012\130\012\138\000\000\000\000\000\000\000\000\000\000\000\000\012\026\000\000\000\000\012\146\000\000\000\000\000\000\0142\000\000\000\000\015\222\000\238\007\226\012R\012j\012r\012Z\012z\003\"\000\000\012\"\012b\012\154\012\162\012\178\000\000\000\000\012\130\012\138\000\000\000\000\000\000\000\000\012\186\000\000\000\000\000\000\000\000\012\146\000\000\000\000\000\000\000\000\000\000\012\194\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\"\012b\012\154\012\162\012\178\012\226\000\000\012\234\012\170\000\000\000\000\000\000\000\000\012\186\012\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\210\012\218\012\194\006\242\001\002\000\000\000\000\000\000\001\030\000\000\b\206\000\000\000\000\001\"\000\000\000\000\000\000\000\000\012\226\000\000\012\234\012\170\000\000\000\000\b\238\000\000\000\000\012\202\000\000\006\246\000\000\000\000\t\006\000\000\000\000\012\210\012\218\000\000\000\000\000\000\000\000\000\000\007\002\006\242\001\002\000\000\t2\001j\001\030\000\000\b\206\000\000\000\000\001\"\001n\000\000\000\000\007\142\000\000\000\000\000\000\007\146\000\000\007\150\b\238\tJ\007\210\000\000\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\007\214\000\000\000\000\000\000\007\002\000\000\000\000\000\000\t2\001j\007\222\000\000\006B\000\000\000\000\tR\001n\000\000\000\000\007\142\000\000\000\000\000\000\007\146\000\000\007\150\000\000\tJ\007\210\000\000\000\000\000\000\000\000\000\000\000\000\018\170\000\000\007\226\000\000\000\000\007\214\000\000\001]\003\"\011\145\001]\000\000\000\000\000\000\000\000\007\222\000\000\006B\000\000\011\145\tR\001]\000\000\001]\000\000\001]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001]\000\000\019\026\000\000\007\226\000\000\001]\011\145\000\000\000\000\003\"\000\000\000\000\000\000\011\145\000\000\000\000\000\000\000\000\001\029\001]\000}\001\029\000\000\000\000\001]\001]\001]\000\000\000\000\000\000\000}\000\000\001\029\000\000\001\029\000\000\001\029\000\000\000\000\000\000\001]\000\000\000\000\000\000\011\145\000\000\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\001\029\000}\001]\001]\001]\000\000\001]\001]\000}\000\000\000\000\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000\000\001\029\001\029\001\029\006\242\001\002\000\000\001]\000\000\001\030\000\000\b\206\000\000\000\000\001\"\000\000\000\000\001\029\001]\000\000\000\000\000}\000\000\000\000\000\000\b\238\000\000\000\000\000\000\000\000\006\246\000\000\000\000\t\006\001\029\001\029\001\029\000\000\001\029\001\029\000\000\024:\000\000\007\002\000\000\000\000\000\000\007\014\001j\000\000\000\000\000\000\000\000\012\025\012\025\001n\000\000\001\029\007\142\000\000\000\000\000\000\007\146\000\000\007\150\000\000\tJ\007\210\001\029\000\000\000\000\000\000\012\025\000\000\012\025\t\186\001\002\000\000\000\000\007\214\001\030\000\000\012\025\000\000\000\000\001\"\000\000\000\000\000\000\007\222\005\253\006B\000\000\000\000\023\190\001&\012\025\012\025\001*\000\000\000\000\000\000\012\025\000\000\012\025\012\025\012\025\000\000\000\000\001.\000\000\012\025\000\000\000\000\024\250\000\000\007\226\000\000\001Z\001j\000\000\000\000\003\"\000\000\000\000\0009\001n\0009\012\025\nz\000\000\000\000\000\000\n~\n\130\n\142\000\000\0009\007\210\000\000\0009\000\000\000\000\000\000\0009\007\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\222\000\000\006B\0009\000\000\000\000\0009\000\000\000\000\000\000\0009\n\150\000\000\n\154\000\000\000\000\0009\000\000\000\000\000\000\000\000\0009\0009\0009\000\000\000\000\003-\007\226\nnj\000\000\000\000\000\000\000\000\002\217\000\000\001n\000\000\002\217\nz\002\217\000\000\000\000\n~\n\130\n\142\000\000\000\000\007\210\000\000\0049\0049\000\000\000\000\000\000\0049\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\007\222\000\000\006B\000\000\000\000\000\000\0049\023\242\000\000\000\000\024\n\n\150\000\000\n\154\000\000\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\0049\0049\000\000\000\000\007\226\nby\000\000\011\133\011\133\002\194\000\000\011\133\011\133\000\000\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\133\000\000\000\000\000\000\007\002\000\000\000\000\011\133\007\014\001j\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\011\133\007\142\000\000\000\000\000\000\007\146\000\000\007\150\007\198\000\000\007\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\242\001\002\000\000\007\214\000\000\001\030\000\000\b\206\000\000\000\000\001\"\000\000\000\000\007\222\000\000\006B\000\000\b\026\000\000\000\000\000\000\b\238\000\000\000\000\000\000\000\000\006\246\000\000\000\000\t\006\000\000\000\000\000\000\000\000\000\000\005\021\000\000\000\000\005\021\007\002\007\226\000\000\by\n\230\001j\000\000\003\"\000\000\000\000\005\021\000\000\001n\000\000\005\021\007\142\000\000\000\000\000\000\007\146\000\000\007\150\000\000\tJ\007\210\000\000\000\000\005\021\000\000\000\000\000\000\000\000\000\000\005\021\000\000\000\000\007\214\000\000\000\000\000\000\nF\000\000\005\021\000\000\005\021\000\000\007\222\005\021\006B\000\000\000\000\000\000\005\021\005\021\000\238\000\000\005\025\000\000\000\000\005\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\021\005\021\005\025\000\000\005\021\007\226\005\025\000\000\000\000\000\000\000\000\003\"\000\000\000\000\006\129\006\129\000\000\005\021\005\021\005\025\000\000\005\021\005\021\000\000\000\000\005\025\000\000\000\000\000\000\000\000\000\000\003\n\njj\001\030\000\000\000\000\000\000\000\000\001\"\001n\000\000\005\185\007\142\000\000\000\000\b\130\007\146\000\000\007\150\007\198\000\000\007\210\000\000\000\000\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\214\000\000\000\000\000\000\007\002\000\000\000\000\000\000\007\014\001j\007\222\000\000\006B\t\166\b\026\000\000\001n\000\000\006\173\007\142\000\000\006\173\000\000\007\146\000\000\007\150\007\198\000\000\007\210\000\000\000\000\000\000\006\173\000\000\000\000\000\000\006\173\007\226\000\000\000\000\007\214\007\153\007\153\003\"\000\000\000\000\007\153\000\000\000\000\006\173\007\222\007\153\006B\000\000\b\026\006\173\tn\002\250\003\006\000\000\000\000\000\000\000\000\004\178\006\169\005vr\000\000\006\169\006\169\001E\000\000\000\000\001E\000\000\000\000\005\173\000\000\000\000\000\000\005\173\000\000\000\000\000\000\001E\000\000\001E\006\169\001E\000\000\000\000\000\000\000\000\005\173\005\173\000\000\000\000\005\173\005\173\000\000\000\000\001E\000\000\000\000\000\000\000\000\000\000\001E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\173\000\000\000\000\n\241\000\000\001E\n\241\000\000\000\000\000\000\001E\001E\000\238\000\000\000\000\000\000\000\000\n\241\000\000\000\000\000\000\n\241\000\000\000\000\000\000\000\000\001E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\241\000\000\000\000\000\000\000\000\000\000\n\241\000\000\000\000\001E\001E\001E\000\000\001E\001E\n\241\000\000\n\241\000\000\n\245\n\241\000\000\n\245\000\000\000\000\n\241\000\000\000\000\000\000\000\000\000\000\000\000\001E\n\245\n\245\000\000\000\000\n\245\000\000\000\000\000\000\n\241\011\254\001E\000\000\n\241\000\000\000\000\n\245\000\000\n\245\000\000\n\245\000\000\000\000\000\000\n\245\000\000\n\241\n\241\000\000\000\000\n\241\n\241\000\000\n\245\000\000\n\245\000\000\000\000\n\245\n\245\000\000\000\000\000\000\n\245\000\000\000\000\000\000\000\000\n\245\n\241\n\245\000\000\000\000\n\245\000\000\000\000\000\000\000\000\n\245\n\245\012\242\000\000\000\000\n\245\0022\002\198\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\n\245\012\014\n\245\n\245\n\245\000\000\n\245\n\245\000\000\002:\000\000\002J\000\000\000\000\000\000\000\000\000\000\n\245\n\245\002V\000\000\n\245\n\245\000\000\000\000\n\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\210\002\218\004)\012\242\000\000\004)\002\230\n\245\001n\002\250\003\006\000\000\000\000\000\000\000\000\004\178\004)\004\186\012\242\000\000\004)\000\000\000\000\t\166\000\000\000\000\000\000\000\000\005!\000\000\000\000\005!\003\022\004)\000\000\000\000\000\000\000\000\000\000\004)\000\000\000\000\005!\000\000\004\242\000\000\005!\000\000\004)\000\000\004)\000\000\000\000\004)\000\000\000\000\004\246\004!\004)\005!\004!\000\000\000\000\000\000\000\000\005!\tn\002\250\003\006\004\017\000\000\000\000\000\000\003\018\000\000\007\021\007\t\000\000\000\000\000\000\025\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004Q\003\022\000\000\004Q\007\t\007\t\000\238\007\t\007\t\000\000\000\000\000\000\000\000\000\000\004Q\000\000\000\000\000\000\004Q\000\000\000\000\007\021\000\000\000\000\000\000\000\000\000\000\007\t\000\000\000\000\000\000\004Q\000\000\000\000\000\000\000\000\000\000\004Q\000\000\007\021\000\000\007\021\003\030\000\000\003\"\000\000\0041\000\238\000\000\0041\000\000\004Q\000\000\000\000\000\000\007\021\004Q\005\206\b:\007\021\0041\000\000\007\t\007\021\0041\007\021\000\000\000\000\000\000\007\021\000\000\000\000\004Q\000\000\000\000\000\000\000\000\0041\000\000\000\000\007\t\000\000\007\t\0041\000\000\000\000\000\000\000\000\000\000\004Q\004Q\000\000\000\000\004Q\004Q\000\000\bf\0041\000\000\b:\007\t\t\226\0041\000\000\007\t\000\000\007\t\000\000\000\000\000\000\007\t\000\000\004Q\0022\0026\000\000\000\000\000\000\0041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\025\000\000\002:\004\025\002J\0041\0041\000\000\000\000\0041\0041\000\000\002V\000\000\004\025\0212\000\000\000\000\004\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002Z\022\150\0041\000\000\021\174\004\025\002\230\000\000\001n\002\250\003\006\004\025\000\000\020\150\000\000\022\166\000\000\000\000\000\000\004I\000\000\000\000\004I\000\000\000\000\004\025\000\000\000\000\000\000\000\000\004\025\000\000\003\022\004I\000\000\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\025\000\000\000\000\000\000\004I\000\000\0022\0026\018\174\000\000\004I\000\000\000\000\000\000\000\000\000\000\000\000\004\025\004\025\000\000\000\000\004\025\004\025\000\000\004I\002\242\000\000\002J\000\000\004I\000\000\000\000\000\000\000\000\000\000\002V\000\000\000\000\000\000\000\000\004\025\000\000\000\000\000\000\000\000\004I\000\000\000\000\000\000\002Z\002\218\022\234\000\000\000\000\000\000\002\230\000\000\001n\002\250\003\006\000\000\000\000\004I\004I\003\018\000\000\004I\004I\0022\0026\019\030\000\000\001v\000\000\000\000\002v\000\000\000\000\000\000\000\000\000\000\003\022\000\000\000\000\000\000\004I\020:\002\242\000\000\002J\004Y\000\000\000\000\000\000\000\000\000\000\023f\002V\000\000\000\000\000\000\000\000\000\000\020>\000\000\000\000\0022\0026\000\000\020f\000\000\002Z\002\218\000\000\000\000\000\000\000\000\002\230\000\000\001n\002\250\003\006\000\000\019F\000\000\002:\003\018\000\000\019\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\022\020\222\000\000\000\000\000\000\000\000\002Z\002\234\0022\0026\000\000\000\000\002\230\000\000\001n\002\250\003\006\000\000\019\222\020\242\000\000\003\018\004Y\004Y\000\000\000\000\000\000\002:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\022\000\000\000\000\021\002\004\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002Z\002\234\000\000\000\000\000\000\000\000\002\230\000\000\001n\002\250\003\006\004N\000\000\000\000\000\000\003\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\022\000\000\000\000\000\000\004\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004N"))
+  
+  and lhs =
~~~}}}}||{{zzyyyyyxxxxwvvuuutttttttsssssssrrrqqpppoonnnnnnnnmmlkkkkkkkkkjiihhgggggfeeddccccccccccccccbbaa```````````````````````````````r\r\r\r\r\012\011\011\n\n\n\t\t\t\b\b\b\b\007\007")
+  
+  and goto =
r\tj\000\000\000\183\001\160\tp\000\169\001\182\t\142\000\000\000\000\000\000\004\164\000w\002\236\000\029\000\000\000\000\000\000\000\000\000\000\000\000\003(\000\000\007\158\000\000\000\000\004\164\000\000\001\216\001\156\000]\003\236\001\016\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000\000\001D\000\000\000\000\000\000\001b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\224\000\000\000\000\001\230\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\236\002\002\004\000\000\185\000\000\004\022\001\232\002\134\004.\000.\000\000\000P\000\000\000\134\003\218\000\000\003f\000\000\000\000\000\000\000\000\000\000\001`\000\000\000\190\004\142\000\b\000\000\000\000!\1622\236\000\000\000\000\000!\000\000\001t\000\000\t\186\003\158\000\000\004@\000\000.N\004D\000\000.\1761~\001\006\000\000.\254\004\002\000\000\000\000\000\000\005\136\000\000\004\242\000\000\004`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\022\003<\000\000\000\000\000(\000\000,\214\000\000\003\022\004\248\003\022\000\000\000\000\000\000\000\000\000\0001\194\000\000\004\140\004\146\000\000\012~\004\232\012\012\000\000\000\000\000\000\004h\000\000\000\000\000\000\000\000\004\242\000\000\000\000\000\000\000\000\000\000/\024\000\000\000\000\000\000\000\000\000\000\000\000\002\198\005\200\000\000\000\000\000\000\000\000\005h\000\000 \158\000\000\005N\000\000\005f\001\238\000\000\000\000\003\022\004\160\000\000\000\000\000\000\000\000\000\000\000\0006\224\000\000\000\000\000\000\000\000\004\014\004p\000\000\000\0009\n\004\242\004\242\000\0009H\004\2421~\000\000\000\201\000\000\000\000\000\000\029\160\005\128\000\000\005\156\000\000\000\000\000\000\000\195\000\000\000\000\000\000\000\000\005@\000\000\000\000\000\000\005n\001\002\000\187\000\000\000\000\000\000\005\168\003\022\000\000\003\022\003\140\000\000\005\208\003\022\003\022\006.\000\000\005\232\005@\000\000\000\000\000\000\004\242\000\000\006t\006l\000\000\000\131\000\000\000\000\000\000\000\000\004\242\000U\000\194\000\186\000\000\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\000\000\000p\007R\006L\002$\002v\006\228\006~\000\\\001\232\004\216\004\142\007\214\006\1869X\004\2429\150\004\242\0070\000\000\000\000\000\000\007\208\000\000\000\230\007\020\005n\000d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\150\000\000\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006t\002\242\006\212\000\000\000\000\005,\bP\b.\b\018\000\000\000\000\b2\000\244\001\224\000\000\007>\000\000\000\000\007n\007~\006\236\003(\006\240\005\218\007\180\007\004\007\1621\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000/\028\000\000\007\206\007\182\bT\000\000\000\000\000\000\000\000\000\154\000\000\000\000\b\n\003F\003\234\b@!\200\000\000\000\000\007\246\b\170\t\190\b\006\b\190\nN\000\000\"(\b\014\b\212\b\228\000\000\004\018\006D/\170\000\165\000\000\000\000\000\000\000\000\000\000\000\000\b\1849\152\004\242\b\2022L\b.\b\238\007\254\000\000\006h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005L\000\000\000\000\000\000\000\000\tL2\134\000\000\bj\b\2442\152\000\000\000\000\000\0003*\b`3B\b`\000\0003T\b`\000\0003v\b`\b`\b`\000\0003\136\b`3\188\b`\t\224\000\000/\170\000\000\000\000\000\000\b`/\218\000\000\000\000\000\000\b`\000\000\001\136\tP\000\000\000\000\000\000\000\000\000\000\000\0004\"\000\000\b\236\000\0009\168\004\242\000\000\000\000\000\000\000\000\t\000\tv\n~\004<\"|\t\144\000\000/z\b`:\030\004\242\t\160\000\000\000\000\000\000\000\000/\028\t\172\t\186\000\000\000\000\007\150\019P\000\000\n\200\t:\t\136\t\152\t\018\003\236\t$\002\210\n,\000\000\000\000\004\020\004\204\t(\002\216\t\230\000\000\000\000\005\158\000\000\003\"\000$\003\192\001\192\011\030\000\000\000\000$(\000\000%\252\n\178\000\000\nV\000\000\nj\000\000\000\000\nn\000\000\000\000\000\000\011L\000\000\007\172\003\"\000\000\000\000\n,\000\000\000\000\000\000\000\000\000\000\003\"\000\000\003\"\000\000\000\000\004~\000\000\001\248\003\234\000\000\001\248\000\000\b\172\003\"\000\000\000\000\000\000\000\000\000\000\001\248\0118\011h\012\020\011\b\n\186\"\132\000\162\000\000\006\028\"\184\n*\t.\007\220\n6\t<\011\190\nZ\tL\012^\nf\t\\\"\2400L\b`\012\180\n~\t\1408L/\028\011\030\000\000\bP\012\254\n\172\t\1483\230\b`\rT\n\174\t\1804v\b`\r\158%t\000\000\000\000\000\000\000\000\000\000\011\242\b\176\000\000\000\000\000\000\n\220\t\196\005b\001\248\t\022\003\"\000\000\000\000\000\000\004<\000\000: \004\242\r\244\n\236\t\242*&\000\0002R\000\000\000\000\014>#\018\002d\000\000\000\000\000\000\000\0004\192\000\000\000\000\000\000\004\220\014\148\000\000\000\000\000\000#\1427D\000\000\000\000\000\000\000\000\n\190\014\222\000\000\000\000\n\200\0154\000\000\n\218#\206\n\218#\220\n\218\000\0008\218\000\000$\142\n\218\015~\002J\015\212\000\000\000\000$\178\n\218$\226\n\218%\n\n\218%\156\n\218%\204\n\218%\240\n\218&H\n\218&\134\n\218&\214\n\218'R\n\218'v\n\218'\170\n\218(\004\n\218(8\n\218(\\\n\218(\216\n\218(\234\n\218)(\n\218)f\n\218)\182\n\218\t\244\016\208\000\000:B\004\242\016\030\000\000\011\018\016t\000\0004\174\b`4\222\b`5\022\b`\012\132\000\000\000\000\000\000\000\0005N\b`\b \000\000\000\000\000\000\n\218\016\190\000\000\000\000)\190\n\218\000\000\000\000\000\000\017\020\000\000\000\000\n\218\017^\000\000\017\180\000\000\000\000\017\254\000\000\000\000\000\000:\154\000\000\000\000\018T\000\000\000\000*L\n\218\018\158\000\000\000\000*\128\n\218\018\244\000\000\000\000*\220\n\218\005\202\019>\000\000\000\000+\014\n\218\019\148\000\000\000\000+2\n\218+b\n\218\000\000+\192\n\218\000\000\000\000\019\222\000\000\000\000+\242\n\218\0204\000\000\000\000,<\n\218\020~\000\000\000\000,l\n\218\000\000,\172\n\218\000\000\002\240\000\000\000\000\n\218\000\000\000\000\020\212\000\000\000\000\021\030\000\000\000\000\000\000\011\018\021t\000\000\000\000\021\190\000\000\021\208\000\000\000\000%t\000\000\000\000\022\020\000\000\000\000\000\000\022^\000\000\000\000\000\000\012V\000\000\000\000\004\024\000\000\000|\000\000\006\140:\150\004\242\"^\004\242:\180\004\242\000\000\0124\000\000\002\152\000\000\000\000\000\000\000\000\000\000\011\242\000\000\000\000\011\162\000\000\000\000\022\180\000\000\022\254\000\000\000\000\000\000\023T\000\000\000\000\023\158\011\174\023\244\000\000\024>\000\000\000\000\000\000/\028\012J\000\0005\136\006\"\003\022\024\148\000\000\000\0005\190\000\000\000\000\000\000\b`\000\000:\222\004\242\000\000\000\0006\024\000\000\000\000\024\222\000\000\0254\000\000\000\000\000\000\000\0000f\000\000\000\000\000\000,\202\n\218,\252\n\218\000\000\000\000\000\000\000\000\n\218\000\000\000\000\000\000\000\000\n\218\000\000\012\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\250\005\240\001\248\025~\000\000\011\224\t\254\012`\004\198\006\026\001\248\tb\003\"\006v\001\248\000\000\025\212\000\000\005V\000\000\011\240\n\028\011\248\012\"\n$\000\000\026\030\000\000\nH\012\2460\138\bL\000\000\000\000\000\000\026t\000\000\000\000\030\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"^\012\188\000\000;\004\004\242\026\190\000\000\000\000;\030\004\242\027\020\000\000\000\000\027^\000\000\000\000\bz\000\000\n\218\000\000-d\000\000\000\000-\244\000\000\n\218\000\000\n2\003\"\000\000\n\240\003\"\000\000\011\020\003\"\000\000\001\248\003\"\000\000\b`\000\000;*\004\242\000\000\001\204\0018\nL\012\184\000\000\rd\027\180\000\000\000\000\027\254\000\000\b\204\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000;\\\004\242\000\000\rj\028T\000\000\000\000\028\158\000\000\000\148\nV\r\016\000\0006N\011\022\012\218\000\000;\128\004\242\028\244\000\000\000\000;\232\004\242\000\000\029>\000\000\004\242\000\000\tt\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\0006T\000\000\000\0006r6\160\012\220\000\000;\242\004\242\029\148\000\000\000\000\029\222\000\000\000\000\003\158\003P5~\b`\0304\000\000\012^\012t\nd\012\160\r,\011\244\003\"\t\144\000\000\nt\r\b\rJ\006\130\t\218\r\030\n\138\rN\006\182\t\242\r\"\000\000\000\000\007\212\n&\000\000\006\130\004*\012\230\n\140\006\192\005(\000\000\012\232\n\142\014H\000\000<@\004\242\r\166\r\170\000\000\n4\000\000\r0\n\148\r,\rV\006\212\n\184\nZ\000\000\n\186\n\168\000\000\007\238\002\194\rh\r\148\n\232\014\028\011,\000\000\n\234\014 \011b\000\000\r\180\n\248\014.\000\000\014,\011d\000\000\0148\000\000\0124\003\"\014\014\n\254\014>\000\000\rL\004\220\014\028\000\000\000\000\000\200\014B\011\136\000\000\rt\003\"\011\144\000\000\006\206\000\000\r\220\011>\r\190\006*\000\000\r\222\011D\r\234\rV\r\252\014\b\011Z\015F\000\000\014\022\002\192\000\000\000\000\000\000\000\000\000,\011~\r\240<`\004\242\000\000\002,\011\140\014\150\000\000\000\000\000\000\000\000\000\000\000\000<j\006|\000\000\011\144\014\222\000\000\000\000\000\000\000\000\000\000\000\0006\198\011\228\000\000\011\160\000P\000\000\000\000\011\208\011\216\014\140\000\000\002\2226\232\000\000\006$\000\000\000\000\000\000\000\000<\178\004\242\004\242\000\000\000\000\007\230\000\000\014\142\000\000\003V\007\230\007\230\000\000\012*8\028\004\242<\188\004\242\011\230\000\000\000\000\000\000\011\246\000\000\000\000\007\224\000\000\b6\014h\012,\015^\0140\000\000\000\000\006\030\bT\014p\000\000\000\000\0124\015n\014>\000\000\000\000\012\138\000\000\002\026\000\000\015\n0\178\004\242\000\000\023*\002\202\000\000\025\n\000\000\000\000\000\000\000\000\000\000\007\230\000\000\000\000\012@\014~\0128\015v\014H\000\000\000\000\026\234\012X\014\136\000\000\000\000\000\0005R\000\000\000\000\000\000\000\000\000\000\000\000\012l\000\000\014\150\012P\003\224\000\000\015t\015(\012\222\014\164\000\000\000\000\014\168\012v\004h\000\000\000\000\002$\0152\012\240\014\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\242\014`\012~\015\162\014r\000\0007(\000\225\012\138\014H\005\n\012\196\030~\012\252\000\000\012\208\012\212\000\189\000\238\012\224\b\022\012\248\01581$\r6\000\000\r\022\r\024\014\224\000\000\001\1828|\000\000\bX\000\000\r*7r7\132\002~\014>\003\240\000\000\030\208\002\240\000\000\007\244\000\000\000\000\007\244\000\000\000\000\007\244\014\236\000\000\004\178\007\244\015J1<\r~\000\000\007\244\000\000\031\160\000\000\000\000\007\244\000\000\000\000\r\190\000\000\006\188\b\176\r\214\000\000\r.8\140\r\218\000\000\000\000\000\000\r\230\000\000\000\000\006\028\000\000\007\244'\232\000\000\007\214\007\2447\162\000\000\r\236\014\198\rl\015\192\014\144\000\0007\232\r\246\014\204\000\000\000\000\000\000$L\t:\000\000\000\000\000\000\000\000\000\000\n\190\000\000\n\200\014\030\000\000\014\218\000\000\000\000\000\000\000\000\0148*\164\000\000\000\000\000\000\n\190\000\000\n\200\000\000\000\000\000\000\000\000\000\000\000\000\006\230\000\000\r\154\t\018\007$\000\000\014:-\226\000\000\000\000\000\000\000\000\000\000\000\000\015T\003<\002F\000\000\000\000\000\000\000\000\0076\bP\030\212\015f\014@\000\000\000\000\015\\\003\168\005\192\000\000\000\000\000\000\003\"\000\000\bf\000\000\000\000\000\000\000\000\014\152\r\198\t\156\001\248\000\000\r\236\003\"\000\000\015\190\000\000\000\000\000\000\000\000.\030\000\000\000\000.T\000\000\031Z\000\000\031r\000\000\000\000\031\164\000\000\000\000\000\000\000\000 4\000\000 F\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\0008\174\000\000\004\242\000\000\b\184\000\000\000\000\000\0001\000\b`\000\000\000\000\004\246\014\200\000\011\000\000\000\000\000\000\000\000\000\000\000\000\011\242\000\000\000\000\000\000\000\000&v\000\000\014D\000\000\000\000\000\000\000\000\005\140\006\252 \160!\004\000\000\000\000\014L!(\000\000\000\000\000\000\014j!h\000\000\000\000\000\000\000\000"), (16, "\006P\000P\002\202\002\203\0011\000\203\005\197\0011\001\029\006\212\002\203\0011\004\193\002h\000;\006\146\002\234\006Q\006\186\000P\006S\000?\002\131\001T\002\235\000\203\002|\006\016\000\204\006T\006b\001\232\000\206\005\198\006\190\005\199\001\130\002\248\001\235\0011\000\165\000\203\006\133\001\165\000\222\006\016\0018\001:\001<\001;\001:\001<\000\206\001F\001:\001<\006\018\000\165\006U\000\175\001\165\002\135\001\237\000\165\005\200\001\166\001\165\0007\000\206\001T\006\019\0007\004\197\002}\006\018\006\021\002\136\000\203\000C\006>\000\204\001_\001:\001<\000\165\000F\006V\000\170\006\019\000\221\002\250\005\201\001\154\006\021\006W\002\202\002\203\006*\000\208\000P\005\202\002\206\005\203\001b\000\206\003\204\006g\003\002\006\213\006P\000M\002\202\002\203\006h\001W\001X\006}\003\202\000\208\000\171\005\232\001T\001\155\000_\003\217\002\234\006Q\006a\006i\006S\006\181\001o\001\156\002\235\000\208\001[\005u\006[\006T\006b\006\188\000\221\006]\005\205\006\192\0007\002\248\004 \005\207\005\217\000\203\000\139\000\216\006_\005u\001r\002\252\000\137\003\006\005\228\001W\001X\001T\001\146\003\012\000\241\002\254\006U\006`\004\148\000\208\006\179\000\216\000T\005\229\001\232\001c\001p\000\225\001\153\001H\001[\002h\002\205\004\130\003\014\001\174\000x\000\216\004\186\005|\002\131\000U\000\165\003\220\006V\000\174\0011\000\225\002\250\000\251\005}\004\155\006W\004\188\005\148\003\205\000\203\005|\000\208\002\206\0054\001W\001X\000\225\006g\003\002\000\241\006P\005}\002\202\002\203\006h\005\132\000\216\003\205\001\151\000:\001c\001p\002\135\0009\000P\001[\002\234\006Q\006a\006i\006S\001g\001:\001<\002\235\000\208\000P\002\136\006[\006T\006b\002\252\000\225\006]\000\251\001W\001X\002\248\005\197\002\253\006\016\002\254\0056\000\165\006_\001z\001\165\002\252\000U\003\006\000\203\0007\001j\001\157\001\158\003\012\001[\002\254\006U\006`\001\157\001\158\006\150\001\159\001\160\005\198\006\144\005\199\004\150\006\018\001\159\001\160\000\203\0011\001\161\005\168\003\014\000\203\004\159\000\216\000\204\001\161\000\208\006\019\001\027\001K\006V\000=\006\021\0007\002\250\001\232\006%\001\130\006W\000|\005\200\000@\002/\000\206\000\199\002\206\002\202\002\203\000\206\001L\006g\003\002\0007\006P\000\128\002\202\002\203\006h\000P\001l\001:\001<\002\153\001\232\000D\001T\001\237\005\201\003\164\002\234\006Q\006a\006i\006S\000U\000G\005\202\002\235\005\203\006l\000\216\006[\006T\006b\006\016\000\221\006]\000\208\001\130\001\021\002\248\005\197\003\165\001\175\002m\000\165\005\232\006_\000\170\005\223\002\252\003\216\003\006\000U\000\203\0069\001\022\005\175\003\012\000\208\002\254\006U\006`\006\018\000\208\006z\002\202\002\203\005\198\005\205\005\199\006;\000\146\001\155\005\207\005\217\000U\006\019\005\141\003\014\005H\000\206\006\021\001\156\002\205\005\228\006\028\000U\003\164\006V\001\007\000\216\000\220\002\250\006\129\002\206\006<\006W\002d\005\200\005\229\002d\000\153\005\143\002\206\000]\001W\001X\000P\006g\003\002\000\241\006P\000\216\002\202\002\203\006h\001\022\000\216\005\145\002\154\001\232\001c\001p\006\130\003\167\005\201\001[\002\234\006Q\006a\006i\006S\001\n\006\016\005\202\002\235\005\203\005\146\000\225\006[\006T\006b\001u\000\225\006]\000\251\000\208\001\130\002\248\002\252\000\203\003\205\006\128\002\205\005\230\006_\005u\002\253\002\252\002\254\003\006\003\018\006\018\002\144\002\206\001\146\003\012\000\159\002\254\006U\006`\0007\000\165\006j\002l\001\165\006\019\005\205\002\144\000N\001H\006\021\005\207\005\217\000\208\006\025\000\169\003\014\000\165\006p\005\210\001\165\002\155\005\228\003\166\002\142\002\137\006V\002f\002\137\000\216\002\250\000P\005%\004\129\006W\006\142\002\155\005\229\000V\005|\0023\002\206\002\202\002\203\001&\005u\006g\003\002\002\252\006P\005}\002\202\002\203\006h\005~\000\225\002\253\001\163\002\254\003?\002\n\002A\001\253\001\254\003\202\002\234\006Q\006a\006i\006S\000U\003\217\000\208\002\235\006\131\006\132\002\156\006[\006T\006b\001\251\002\222\006]\001\253\001\254\000\165\002\248\005\220\001\165\002\144\002\144\002\156\000\168\006_\003\218\001[\002\252\002\130\003\006\005|\000U\003D\003P\003Q\003\012\000\219\002\254\006U\006`\001|\005}\006e\002\202\002\203\005\131\002\148\002\157\000\203\002\155\002\155\000\190\000P\003\178\003P\003Q\003\014\000\216\002\018\006\131\006\132\002\205\002h\001N\002\140\006\152\006V\000`\000\208\002\003\002\250\002\131\003\220\000\193\006W\000\196\001\133\000\154\006\016\002\018\001[\002\206\006P\001Q\002\202\002\203\006g\003\002\000\157\000\203\002\003\004\211\000\203\006h\002\144\006\216\006\217\004m\002\234\006\219\000\160\000\202\006S\003\205\002\156\002\156\002\235\006\018\006i\000\210\002\135\006T\006\221\003\181\003\186\000\238\000P\006[\001\171\002\248\002\145\006\019\006]\002\155\002\020\002\136\006\021\002\252\001\130\000U\006\022\002\205\002\021\006_\002\001\002\253\002\252\002\254\003\006\000U\006U\000\208\002\206\001\024\003\012\002\020\002\254\000\248\006`\000P\000U\002\000\000\245\002\021\002h\002\001\002\138\006P\004>\002\202\002\203\006\236\000U\002\131\000\203\003\014\001\130\000\204\006V\000\208\003_\006\228\002\250\002\234\006\229\006\016\006W\006S\002\156\002\153\000\203\002\235\000\208\002\206\005+\000\208\006T\006\237\006g\003\002\001%\000\206\006\224\000\246\002\248\000\216\006P\002\252\002\202\002\203\000\203\003m\002\135\0067\006\018\002\253\004A\002\254\002\144\000U\006i\000\208\002\234\006Q\006n\006U\006S\002\136\006\019\006[\002\235\001\022\004\247\006\021\006]\006T\006b\006 \000\221\0069\004B\002\202\002\203\002\248\002\215\006_\000\216\002\155\002\252\000\216\003\006\000\203\001\130\006V\001\017\006;\003\012\002\250\002\254\002\130\006`\006W\001\250\004\031\006U\000U\001\019\000\208\002\206\002h\000\250\002i\000\217\006g\003\002\000\227\006\241\003\014\002\131\0015\006<\001\251\002\n\000\208\001\253\001\254\001\247\001\t\004A\002\144\001\r\0021\006V\0017\001C\006i\002\250\002\154\001R\003\144\006W\002\001\002\156\000\208\006[\001\130\003\212\002\206\006\143\006]\002\144\0007\006g\003\002\000\228\0041\000U\002\135\002\155\006h\006_\000\216\001\130\002\252\002\011\003\006\002\012\002$\000U\002\205\003\161\003\012\002\136\002\254\006i\006`\0049\000\216\006\130\002\155\002\206\000U\005u\006[\000\208\005u\001\130\000\225\006]\002\018\006=\006P\003\014\002\202\002\203\000U\002\144\000\216\001V\006_\002\003\005<\002\252\001J\003\006\006\228\001S\002\234\006\229\003\213\003\012\006S\002\254\002\156\006`\002\235\0069\001\130\006|\000\208\006T\006\232\004=\001P\006P\002\155\002\202\002\203\002\248\006\139\004\229\003\014\006;\002\144\002\156\002\252\005|\001]\000\216\001\130\002\234\006Q\005]\002\253\006S\002\254\001x\005}\002\235\006U\005x\005\156\002\153\006T\006v\002\020\004\234\006<\001\152\004\246\000P\002\248\002\155\002\021\003\249\002\001\002\130\0057\000U\001\\\001\130\001\250\001\146\001\132\002\202\002\203\001\130\006V\004A\004Q\002\156\002\250\006U\002\153\001s\006W\006\016\004T\002\234\001\164\001\251\003\252\002\206\001\253\001\254\006q\002\235\006g\003\002\000U\006\235\001\182\006\161\001\184\004A\002\202\002\203\000\250\000U\002\248\006V\004\242\005\197\001\187\002\250\006\018\0056\002\156\006W\006i\000U\000\203\000\208\001\250\000\204\002\206\006u\004\028\006[\006\019\006g\003\002\001\131\006]\006\021\005\b\001w\006y\0060\005\198\005\231\005\199\001\251\001\252\006_\001\253\001\254\002\252\000\206\003\006\001}\000U\006i\0007\001\136\003\012\000\137\002\254\002\002\006`\002\154\006[\002\250\000U\001\250\000U\006]\001\130\001\138\002\003\005\200\001\168\002h\002\206\002\129\000U\003\014\006_\002\255\003\002\002\252\002\131\003\006\001\251\003\252\000\221\001\253\001\254\003\012\001\130\002\254\002\154\006`\002\205\001\169\006-\001\130\005\201\004U\004\239\003\003\000P\001\200\001\173\002\206\006r\005\202\001\130\005\203\003\014\002\002\002\202\002\203\001\181\000\208\002\202\002\203\005\147\001\130\004W\002\135\002\003\001\130\005\133\002\020\002\234\005\232\006\016\002\252\002\234\003\006\001\130\002(\002\235\002\001\002\136\003\012\002\235\002\254\003\188\001\186\001\130\005\143\006\198\001\209\001\170\002\248\004A\004\137\005\205\002\248\002\002\003U\001\199\005\207\005\217\006\018\003\014\005\145\002\252\001\203\000\241\002\003\005\149\000U\005\228\000P\002\253\000\216\002\254\006\019\001\212\005\233\001\216\004O\006\021\002\020\005\146\005\157\006B\005\229\001\219\001\130\006\200\002(\001\224\002\001\006\149\005\127\0061\001\227\003\253\001\240\000\137\000\225\006\023\000\251\004n\002*\002\250\002h\001\243\002\151\002\250\002\202\002\203\000U\002\202\002\203\002\131\002\206\004\006\002'\005\254\002\206\002\255\003\002\002\020\002\234\002\255\003\002\002\234\002\202\002\203\001\217\002(\002\235\002\001\005\127\002\235\002\144\002\b\006\175\000U\001\220\006\168\002\234\003\003\004\149\002\248\006\011\003\003\002\248\005\127\002\235\001\225\002\202\002\203\002\135\002\017\006\165\000\203\000\250\002h\000\204\002\217\006t\002\248\001\244\002\155\002\234\002\t\002\131\002\136\002\031\002\252\001\130\003\006\002\235\002\252\002.\003\006\0029\003\012\004s\002\254\002Z\003\012\000\206\002\254\001\130\002\248\002>\004Z\002L\002\\\000U\002c\001\011\006\023\002\170\002h\002\250\004;\003\014\002\250\000U\002\173\003\014\002\144\002\131\002\135\001\016\002\206\002I\002\176\002\206\000U\002\255\003\002\002\250\002\255\003\002\002\179\002\156\000\221\002\136\001\130\002\202\002\203\000U\002\206\004\187\000U\002Q\006\156\002\255\003\002\002\155\001\130\003\003\002P\002\234\003\003\002\250\004K\004\224\002\185\000U\002\135\002\235\002\193\002\202\002\203\000\208\002\206\004p\000U\003\003\000U\002\255\003\002\000U\002\248\002\136\001\130\002\234\002\198\002\252\000U\003\006\002\252\001\130\003\006\002\235\002\214\003\012\000U\002\254\003\012\004Y\002\254\003\003\004\230\004/\000U\002\252\002\248\003\006\002\202\002\203\001\130\002Y\002\156\003\012\004\235\002\254\003\014\002\228\003>\003\014\000\241\0040\002\234\0046\002h\002_\004y\000\216\000U\002\252\002\235\003\006\000U\002\131\003\014\002\250\004P\003\012\004E\002\254\004\240\002e\004H\002\248\002r\002t\002\206\005\002\000U\001\130\002v\002\255\003\002\000\225\000\203\001\025\000U\000\204\003\014\002\250\004L\002x\004\140\002{\002\202\002\203\005\n\004\168\002\127\002\134\002\206\004'\002\135\003\003\004\219\002\255\003\002\004#\002\234\000U\000U\000\206\004\226\000U\002\169\000U\002\235\002\136\002\202\002\203\002\172\004\178\004.\004\232\004\245\004\250\002\250\003\003\005\005\002\248\000U\002\252\002\234\003\006\000U\005\r\004\181\002\206\002\175\003\012\002\235\002\254\002\255\003\002\002\178\001\130\005\t\005\012\000\221\002h\004,\004|\000U\002\248\000U\002\252\002\184\003\006\002\131\000U\003\014\002\202\002\203\003\012\003\003\002\254\000U\002h\002\188\004\127\005\019\005\023\001\130\001\130\000U\002\234\002\131\000\208\005\028\002\192\002\197\005'\002\250\002\235\003\014\000U\000U\000U\003\223\004\026\000U\001\130\002\252\002\206\003\006\001\130\002\248\002\135\002\255\003\002\003\012\005\021\002\254\002\213\002\202\002\203\002\250\000\203\000U\000U\000\204\002\227\002\136\005:\003W\002\135\005?\002\206\002\234\003V\003\003\003\014\002\255\003\002\000\241\003\011\002\235\005D\005\025\005 \002\136\000\216\000U\000U\000\206\004\184\004)\001\130\001\130\002\248\000U\002\202\002\203\000U\003\003\005N\001\130\0051\002\252\002\250\003\006\0055\005T\003O\005_\002\234\003\012\000\225\002\254\000\251\002\206\003N\005j\002\235\000\203\002\255\003\002\000\204\003\199\004\020\000\203\000\221\002\252\005\172\003d\000U\002\248\003\014\000U\002h\003\012\004\222\002\254\001\130\002\202\002\203\005\128\003\003\002\131\000U\005o\000\206\002\250\005h\005\140\001\130\003\214\000\206\002\234\000\239\000\208\003\014\005\144\002\206\003\227\001\130\002\235\000U\002\255\003\002\003\238\002h\004\t\005$\000U\002\252\000U\003\006\003\246\002\248\002\131\002\202\002\203\003\012\000U\002\254\004%\002\135\000\221\002\250\003\003\005\135\005\151\0045\005\174\002\234\005\161\0047\005\188\005\186\002\206\004D\002\136\002\235\003\014\002\255\003\002\000\241\000U\003\243\005\209\005\194\000U\004F\000\216\004G\002\248\000\208\002\252\002\135\003d\005\206\001\130\005\177\002\202\002\203\003\012\003\003\002\254\005\219\004M\001\130\002\250\005\236\002\136\004_\004\141\001\130\002\234\005\242\000\225\004\145\000\242\002\206\004\163\004\169\002\235\003\014\002\255\003\002\004\173\004\201\003\232\000U\000U\002\252\004\225\003\006\000U\002\248\000U\002\202\002\203\003\012\000\241\002\254\001\130\004\218\005\245\002\250\003\003\000\216\000U\004\220\006/\002\234\005\250\005\180\005\214\004\223\002\206\004\238\006!\002\235\003\014\002\255\003\002\005\225\005}\003\224\005\185\000U\005\182\005\247\005\255\000U\002\248\000\225\002\252\000\247\003\006\000U\001\130\000\225\002\202\002\203\003\012\003\003\002\254\006\029\006\005\002h\002\250\005*\004\228\004\237\004\233\004\236\002\234\006\r\002\131\0064\006\002\002\206\004\244\004\249\002\235\003\014\002\255\003\002\000U\002h\003\177\0053\001\130\002\252\000U\003\006\000U\002\248\002\131\002\202\002\203\003\012\000U\002\254\001\130\004\251\001\130\002\250\003\003\005\001\006H\005\000\001\130\002\234\000U\001\130\006$\002\135\002\206\005\004\001\130\002\235\003\014\002\255\003\002\005\006\002h\005\011\005;\000U\000U\003\169\002\136\006s\002\248\002\131\002\252\002\135\003\006\000U\001\130\000U\002\202\002\203\003\012\003\003\002\254\005\022\006.\002h\002\250\006\159\002\136\001\130\001\130\006\155\002\234\001\130\002\131\001\130\0062\002\206\0066\001\130\002\235\003\014\002\255\003\002\006:\005\018\002\246\006F\000U\002\252\002\135\003\006\006M\002\248\001\130\002\202\002\203\003\012\005\020\002\254\005\024\005\027\005.\002\250\003\003\002\136\005\031\005\"\005-\002\234\005(\000U\006\\\002\135\002\206\005,\0050\002\235\003\014\002\255\003\002\0059\005>\003\001\000\203\006c\006w\005\172\002\136\006\138\002\248\006\222\002\252\000U\003\006\006\233\005@\005\160\002\202\002\203\003\012\003\003\002\254\005C\005F\005J\002\250\005R\005Y\005d\006\238\000\206\002\234\005p\005\129\005\159\005\152\002\206\005\153\005\158\002\235\003\014\002\255\003\002\005\162\005\163\003\005\005\196\005\189\002\252\005\190\003d}n\000\000\001\253\001\254\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003D\003P\003Q\002\252\003b\003\006\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\002\018\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\002\003\000\000\000\000\000\000\003f\000\000\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\003T\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\002\252\003h\003\006\000\000\002\248\000\000\002\202\002\203\003\012\002\020\002\254\000\000\000\000\000\000\002\250\003\003\000\000\002\021\000\000\002\001\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\000\000\003k\000\000\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\002\252\003r\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\000\000\003w\000\000\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\002\252\003|\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\001\250\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\130\001\251\002T\000\000\001\253\001\254\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\135\000\000\000\000\002\252\000\000\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\002\002\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\002\003\000\000\000\000\000\000\003\147\000\000\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\002\252\003\152\003\006\000\000\002\248\000\000\002\202\002\203\003\012\002\020\002\254\000\000\000\000\000\000\002\250\003\003\000\000\002(\000\000\002\001\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\000\000\003\157\000\000\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\002\252\003\172\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\000\000\000\000\000\000\000\000\003\175\000\000\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\180\000\000\000\000\002\252\000\000\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\0023\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\183\003?\002\n\000\000\001\253\001\254\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003D\003P\003Q\002\252\003\192\003d\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\002\018\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\002\003\000\000\000\000\000\000\003\196\000\000\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\003\185\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\228\000\000\000\000\002\252\000\000\003\006\000\000\002\248\000\000\002\202\002\203\003\012\002\020\002\254\000\000\000\000\000\000\002\250\003\003\000\000\002\021\000\000\002\001\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\230\000\203\000\000\000\000\005\172\000\000\000\000\002\248\000\000\002\252\000\000\003d\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\206\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\003\234\000\000\000\000\002\252\000\000\003d}}\004J\005\181\000\000\005\182\000\000\000\000\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\225\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\004S\000\000\000\000\002\252\000\000\003\006\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\004c\000\203\000\000\000\000\005\172\000\000\000\000\002\248\000\000\002\252\000\000\003\006\000\000\000\000\000\000\002\202\002\203\003\012\003\003\002\254\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\206\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\004h\000\000\000\000\002\252\000\000\003\006\000\000\002\248\000\000\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\002\250\003\003\000\000\000\000\000\000\005\174\002\234\000\000\000\000\000\000\000\000\002\206\000\000\000\000\002\235\003\014\002\255\003\002\000\000\000\000\004k}c\001p}`\000\000\000\000\000\000\002\235\000\000\006X\003\002\000\000\006\234\006Z\000\000\000\000\000\225\001T\001\015\000\000\002\248\006V\006[\000\000\000\000\000\000\000\000\006]\000\000\006W\000\000\006Z\000\000\002\202\002\203\000\000\000\000\000\221\006_\000\000\006[\006X\003\002\000\000\006\239\006]\000\000\002\234\000\000\000\000\000\000\000\000\000\000\006`\000\000\002\235\006_\000\000\000\000\000\000\000\000\000\000\000\000\006Z\000\000\000\000\000\208\000\203\002\248\000\000\000\204\006`\006[\002\250\000\000\000\000\001\250\006]\000\000\002\202\002\203\000\000\000\000\000\000\002\206\000\000\000\000\000\000\006_\002\255\003\002\000\000\004X\002\234\000\206\001\251\003\252\000\000\001\253\001\254\000\000\002\235\000\000\006`\004d\002\202\002\203\000\000\001W\001X\000\000\003\003\000\000\000\241\002\248\000\000\000\000\000\000\000\000\002\234\000\216\002\250\000\000\000\000\001Y\001Z\000\000\002\235\000\000\001[\000\000\000\221\002\206\000\000\001\250\000\000\000\000\002\255\003\002\002\252\002\248\004v\000\000\000\000\000\000\000\000\000\225\003\012\000\251\002\254\002\202\002\203\000\000\001\251\002\n\000\000\001\253\001\254\000\000\003\003\000\208\000\000\000\000\002\002\002\234\000\000\000\000\002\250\003\014\000\000\000\000\000\000\002\235\000\000\002\003\000\000\004\016\000\000\002\206\000\000\000\000\000\000\000\000\002\255\003\002\002\248\000\000\002\252\000\000\004ob\000\000\002\202\002\203\002\235\002\252\003\012\003\n\002\254\000\000\000\000\006X\003\002\003\012\000\000\002\254\002\234\002\248\006Y\000\000\000\000\000\000\000\000\000\000\002\235\000\000\000\000\003\014\002\250\000\000\000\000\000\000\000\000\006Z\003\014\000\000\000\241\002\248\000\000\002\206\000\000\000\000\006[\000\216\002\255\003\002\002\250\006]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202\002\203\002\206\006_\000\000\000\000\000\000\002\255\003\002\000\000\000\000\003\003\000\000\000\000\000\225\002\250\002q\000\000\006`s\000\000\000\000\002\234\000\000\006Z\000\000\002\202\002\203\000\000\002\252\002\235\003\"\003\003\006[\002\250\000\000\000\000\003\012\006]\002\254\002\234\000\000\000\000\002\248\000\000\002\206\000\000\000\000\002\235\006_\002\255\003\002\002\202\002\203\000\000\000\000\000\000\000\000\003\014\000\000\002\252\002\248\003$\000\000\006`}d\003u\000\000\000\000\000\000\002\250\002\235\003\012\000\000\002\254\000\000\000\000\000\000\000\000\000\000\006Z\002\206\000\000\000\000\002\248\000\000\002\255\003\002\000\000\006[\002\252\000\000\003z\003\014\006]\002\250\002\202\002\203\003\012\000\000\002\254\000\000\000\000\000\000\000\000\006_\002\206\000\000\003\003\000\000\002\234\002\255\003\002\002\250\000\000\000\000\000\000\000\000\002\235\003\014\006`n\002\206\001\253\001\254\000\000\000\000\002\255\003\002\000\208\002\252\000\000\003\160\000\000\003\003\003\014\002\250\000\000\003\012\000\000\002\254\000\000\000\000\004r\000\000\000\000\000\000\002\206\000\000\003\003\000\000\000\000\002\255\003\002\000\000\000\000\000\000\000\000\000\000\003\014\000\000\006P\002\252\002\011\003\163\002\012\002\181\000\000\000\000\000\000\003\012\000\000\002\254\001\250\003\003\000\000\000\224\002\252\006Q\004\022\000\000\006S\000\000\000\216\000\000\003\012\000\000\002\254\002\018\000\000\006T\003\014\001\251\002\n\001\250\001\253\001\254\000\000\000\000\002\003\000\000\000\000\002\252\004\019\004\024\000\000\003\014\000\000\000\000\000\225\003\012\000\000\002\254\001\251\002\n\004u\001\253\001\254\000\000\006U\000\000\001\250\000\000\000\000\000\203\000\000\000\000\000\204\000\000\000\000\000\229\003\014\000\000\000\000\000\000\002\011\006\167\002\012\002\181\000\000\001\251\002\n\000\000\001\253\001\254\000\000\000\000\006V\000\000\000\000\000\230\000\206\000\000\000\000\002\020\006W\002\011\001\004\002\012\002\181\002\018\000\000\002\021\006\170\002\001\000\000\000\000\006X\003\002\000\000\000\000\002\003\000\000\000\203\006x\004\019\000\204\000\000\000\000\000\229\000\000\002\018\000\000\002\011\000\000\002\012\002\181\000\000\000\221\006Z\000\000\000\000\002\003\000\000\000\000\000\000\004\019\000\000\006[\000\230\000\206\000\000\000\000\006]\000\000\000\235\001\002\000\000\002\018\000\000\000\000\000\000\000\203\000\000\006_\000\204\000\000\000\208\000\229\002\003\000\000\001\250\000\000\004\019\000\000\000\203\002\020\000\000\000\204\006`\000\000\000\229\000\000\000\000\002\021\000\000\002\001\000\221\000\230\000\206\001\251\002\n\000\000\001\253\001\254\000\231\000\000\002\020\000\000\000\000\000\000\000\230\000\206\000\000\000\235\002\021\000\000\002\001\001\000\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\208\000\000\001\250\000\000\000\000\000\216\000\000\000\000\002\020\000\249\000\221\000\000\000\000\000\000\000\000\000\000\002\021\002\011\002\001\002\012\004\001\001\251\002\n\000\221\001\253\001\254\001\250\000\235\000\000\000\000\000\000\000\225\000\000\000\251\000\000\000\000\000\137\000\000\000\000\000\208\000\235\000\000\002\018\000\000\000\000\001\251\002\n\000\241\001\253\001\254\001\250\000\000\000\208\002\003\000\216\002\"\000\000\000\000\000\249\000\000\000\000\000\000\000\000\000\000\002\011\000\000\002\012\002E\000\000\001\251\002\n\000\000\001\253\001\254\000\000\000\000\000\000\000\000\000\000\002&\000\225\000\000\000\251\000\000\000\000\000\000\000\241\000\000\002\011\002\018\002\012\002$\000\000\000\216\000\000\000\000\000\000\000\249\000\000\000\241\002\003\000\000\000\000\000\000\000\000\000\000\000\216\001\250\002\020\000\000\000\249\000\000\002\011\002\018\002\012\002$\002\021\000\000\002\001\000\225\001\250\000\251\000\000\000\000\002\003\002H\001\251\002\n\000\000\001\253\001\254\000\000\000\225\000\000\000\251\000\000\000\000\002\018\0023\001\251\002\n\000\000\001\253\001\254\000\000\000\000\000\000\000\000\002\003\000\000\000\000\000\000\000\000\000\000\000\000\002\020\000\000\003?\002\n\000\000\001\253\001\254\000\000\002\021\000\203\002\001\000\000\000\204\000\000\002\011\000\252\002\012\002\181\000\000\000\000\000\000\000\000\000\000\000\000\002\020\000\000\000\000\002\011\000\000\002\012\002\181\000\000\002\021\000\000\002\001\000\254\000\206\000\000\000\000\002\018\000\000\005s\001\250\000\000\003D\003P\003Q\000\000\002\020\000\000\002\003\000\000\002\018\000\000\004\015\000\000\002\021\000\000\002\001\000\000\0023\001\251\002\n\002\003\001\253\001\254\000\000\004\018\000\000\000\000\002\018\000\000\0023\000\221\000\000\000\000\000\000\000\000\000\000\003?\002\n\002\003\001\253\001\254\000\000\000\000\000\000\000\000\000\000\000\000\000\235\003?\002\nn\000\221\001\253\001\254\000\000\000\000\000\000\000\000\000\225\000\000\000\251\000\000\006\001\000\000\000\000\000\000\000\000\000\000\000\235\000\000\000\000\002\020\000\000\000\000\006#\000\000\000\000\000\000\000\000\002\021\000\208\002\001\000\000\000\000\001\250\000\221\002\202\002\203\000\000\002\020\000\000\000\000\002\011\000\000\002\012\004\132\000\000\002\021\000\000\002\001\000\000\002\020\000\235\001\251\002\n\000\000\001\253\001\254\002\231\002\021\000\000\002\001\000\000\001\250\000\208\000\000\000\000\002\018\000\000\000\000\000\000\000\000\001\250\000\000\000\000\000\000\000\000\000\241\002\003\000\000\000\000\000\000\001\251\002\n\000\216\001\253\001\254\000\000\000\249\000\000\000\000\001\251\002\n\000\000\001\253\001\254\002\011\000\000\002\012\002)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\241\000\251\000\000\000\000\000\000\000\000\000\000\000\216\000\000\000\203\002\018\000\249\000\204\002\205\002\011\000\000\002\012\002\024\000\000\000\000\000\000\002\003\002\020\002\011\002\206\002\012\002\023\000\000\000\000\000\000\002\021\000\000\002\001\000\225\001\250\000\251\000\206\000\000\001\"\002\018\000\000\000\000\000\000\000\000\000\000\000\000\001\250\000\000\002\018\000\000\002\003\000\000\000\000\001\251\002\n\001\250\001\253\001\254\000\000\002\003\000\000\000\000\000\000\000\000\000\000\001\251\002\n\000\000\001\253\001\254\000\000\000\000\001\250\000\221\001\251\002\n\002\020\001\253\001\254\002\252\000\000\001\250\000\000\000\000\002\021\000\000\002\001\002\253\000\000\002\254\000\000\001\251\002\n\000\000\001\253\001\254\002\011\000\000\002\012\002\014\001\251\002\n\000\208\001\253\001\254\002\020\000\000\001\250\002\011\000\000\002\012\002\016\000\000\002\021\002\020\002\001\000\000\002\011\000\000\002\012\002\019\002\018\002\021\000\000\002\001\000\000\001\251\002\n\001\250\001\253\001\254\000\000\002\003\002\018\002\011\000\000\002\012\002\022\000\000\000\000\000\000\000\000\002\018\002\011\002\003\002\012\002\027\001\251\002\n\000\241\001\253\001\254\000\000\002\003\000\000\000\000\000\216\000\000\001\250\002\018\001)\000\000\000\000\000\000\000\000\000\000\004i\000\000\002\018\002\011\002\003\002\012\002\029\000\000\004l\000\000\000\000\001\251\003\252\002\003\001\253\001\254\000\225\000\000\000\251\000\000\000\000\002\020\000\000\000\000\002\011\000\000\002\012\002\194\002\018\002\021\000\000\002\001\000\000\002\020\001\250\000\000\000\000\000\000\000\000\002\003\000\000\002\021\002\020\002\001\000\000\000\000\000\000\000\000\000\000\002\018\002\021\000\000\002\001\001\251\002\n\000\000\001\253\001\254\000\000\002\020\002\003\000\000\001\250\000\000\000\000\000\000\000\000\002\021\002\020\002\001\002\202\002\203\000\000\000\000\000\000\000\000\002\021\000\000\002\001\002\002\000\000\001\251\002\n\000\000\001\253\001\254\001\250\000\000\000\000\000\000\002\003\000\000\002\241\000\000\002\020\000\000\002\011\000\000\002\012\002\199\000\000\000\000\002\021\000\000\002\001\001\251\002\n\000\000\001\253\001\254\000\000\000\000\000\000\000\000\001\250\002\020\000\000\000\000\000\000\004U\000\000\002\018\000\000\002\021\002\011\002\001\002\012\003H\000\000\000\000\000\000\000\000\002\003\001\251\002\n\000\000\001\253\001\254\000\000\000\000\000\000\005\197\001\250\000\000\000\000\002\020\000\000\000\000\002\011\002\018\002\012\003J\000\000\002(\000\000\002\001\000\000\000\000\002\205\000\000\002\003\001\251\002\n\000\000\001\253\001\254\001\250\000\000\005\198\002\206\005\199\001\250\000\000\002\018\000\000\000\000\002\011\000\000\002\012\003L\000\000\000\000\000\000\000\000\002\003\001\251\002\ns\002\003\000\000\005g\000\000\004\b{t\002\001\006\027\000\206\000\000\000\000\002\020\000\000\002\202\002\203\000\000\006\026\000\000\000\208\002(\006C\002\001\000\000\000\203\000\000\000\206\000\204\000\000\000\000\000\000\002\002\000\000\006D\000\000\000\000\003\r{oa\000\000\000\241\000\225\000\208\000\251\000\000\000\203\000\241\000\216\000\204\000\000\000\000\004fz\000\216\000\000\000\000\000\000\005\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\251\000\000\000\000\000\225\000\000\000\251"))
+  
+  and semantic_action =
+    [|
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3756 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "+" )
+# 1411 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3757 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "+." )
+# 1436 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = 
+# 3321 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 1461 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = tyvar;
+          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
+          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = ty;
+                MenhirLib.EngineTypes.startp = _startpos_ty_;
+                MenhirLib.EngineTypes.endp = _endpos_ty_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let tyvar : (string) = Obj.magic tyvar in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_tyvar_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3324 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_alias(ty, tyvar) )
+# 1508 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_tyvar_, _startpos_ty_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1517 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3326 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 1523 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Ast_helper.let_binding) = let attrs2 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 1571 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined2_ in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 1580 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2596 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      mklb ~loc:_sloc false body attrs
+    )
+# 1592 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type) = 
+# 3382 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 1631 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.core_type) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _1 =
+            let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 1694 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1702 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 1708 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _3 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 1718 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 1724 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3384 "src/ocaml/preprocess/parser_raw.mly"
+      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
+# 1733 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (string) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3387 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_var _2 )
+# 1766 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1775 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 1781 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3389 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_any )
+# 1807 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1815 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 1821 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let tid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 1852 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys = 
+# 3434 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 1858 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3392 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_constr(tid, tys) )
+# 1863 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1872 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 1878 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = ty;
+            MenhirLib.EngineTypes.startp = _startpos_ty_;
+            MenhirLib.EngineTypes.endp = _endpos_ty_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let tid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 1916 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys = 
+# 3436 "src/ocaml/preprocess/parser_raw.mly"
+      ( [ty] )
+# 1922 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3392 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_constr(tid, tys) )
+# 1927 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos__1_ = _startpos_ty_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 1937 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 1943 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _3 : unit = Obj.magic _3 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let tid =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 1996 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2004 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1046 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2009 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3438 "src/ocaml/preprocess/parser_raw.mly"
+      ( tys )
+# 2015 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3392 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_constr(tid, tys) )
+# 2021 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2031 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2037 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3394 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (f, c) = _2 in Ptyp_object (f, c) )
+# 2077 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2086 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2092 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3396 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_object ([], Closed) )
+# 2125 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2134 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2140 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__2_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let cid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 2178 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys = 
+# 3434 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 2184 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3400 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_class(cid, tys) )
+# 2189 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos__1_ = _startpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2199 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2205 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = ty;
+              MenhirLib.EngineTypes.startp = _startpos_ty_;
+              MenhirLib.EngineTypes.endp = _endpos_ty_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let cid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 2250 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys = 
+# 3436 "src/ocaml/preprocess/parser_raw.mly"
+      ( [ty] )
+# 2256 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3400 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_class(cid, tys) )
+# 2261 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos__1_ = _startpos_ty_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2271 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2277 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = xs;
+                MenhirLib.EngineTypes.startp = _startpos_xs_;
+                MenhirLib.EngineTypes.endp = _endpos_xs_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _3 : unit = Obj.magic _3 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let cid =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 2337 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2345 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1046 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2350 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3438 "src/ocaml/preprocess/parser_raw.mly"
+      ( tys )
+# 2356 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3400 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_class(cid, tys) )
+# 2362 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2372 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2378 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.row_field) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3403 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant([_2], Closed, None) )
+# 2418 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2427 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2433 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _3 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2483 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2488 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3448 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2494 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3405 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant(_3, Closed, None) )
+# 2500 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2510 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2516 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.row_field) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _4 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2573 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2578 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3448 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2584 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3407 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant(_2 :: _4, Closed, None) )
+# 2590 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2600 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2606 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _2 : (unit option) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _3 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2656 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2661 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3448 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2667 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3409 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant(_3, Open, None) )
+# 2673 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2683 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2689 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3411 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant([], Open, None) )
+# 2722 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2731 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2737 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _2 : (unit option) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _3 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2787 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2792 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3448 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2798 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3413 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant(_3, Closed, Some []) )
+# 2804 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2814 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2820 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = xs;
+                MenhirLib.EngineTypes.startp = _startpos_xs_;
+                MenhirLib.EngineTypes.endp = _endpos_xs_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : unit = Obj.magic _6 in
+        let xs_inlined1 : (string list) = Obj.magic xs_inlined1 in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _2 : (unit option) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _5 =
+              let xs = xs_inlined1 in
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2885 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2890 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3476 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2896 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _3 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 2904 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 2909 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3448 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 2915 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3415 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_variant(_3, Closed, Some _5) )
+# 2921 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__6_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2931 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2937 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3417 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_extension _1 )
+# 2963 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 2971 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3419 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 2977 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string Location.loc) = let _1 =
+          let _1 = 
+# 3823 "src/ocaml/preprocess/parser_raw.mly"
+                     ( _1 )
+# 3003 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 914 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkloc _1 (make_loc _sloc) )
+# 3011 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3825 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3017 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (string Location.loc) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (string Location.loc) = let _1 =
+          let _1 = 
+# 3824 "src/ocaml/preprocess/parser_raw.mly"
+                                 ( _1 ^ "." ^ _3.txt )
+# 3057 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 914 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkloc _1 (make_loc _sloc) )
+# 3066 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3825 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3072 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.payload) = Obj.magic _3 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3829 "src/ocaml/preprocess/parser_raw.mly"
+    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
+# 3121 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_expr) = 
+# 1819 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 3146 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.class_expr) = let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3187 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1821 "src/ocaml/preprocess/parser_raw.mly"
+      ( wrap_class_attrs ~loc:_sloc _3 _2 )
+# 3196 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1823 "src/ocaml/preprocess/parser_raw.mly"
+      ( class_of_let_bindings ~loc:_sloc _1 _3 )
+# 3238 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.class_expr) = let _5 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 3303 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3311 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined1_ in
+        let _3 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 3318 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1825 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos__2_, _endpos__4_) in
+        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
+        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
+# 3328 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.class_expr) = let _5 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 3400 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3408 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _3 =
+          let _1 = _1_inlined1 in
+          
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 3417 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1825 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos__2_, _endpos__4_) in
+        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
+        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
+# 3428 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.class_expr) = 
+# 1829 "src/ocaml/preprocess/parser_raw.mly"
+      ( Cl.attr _1 _2 )
+# 3460 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
+        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 =
+            let _2 =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 3495 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 3500 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1832 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_apply(_1, _2) )
+# 3506 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_xs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 3516 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1835 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 3522 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1834 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_extension _1 )
+# 3548 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 3556 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1835 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 3562 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = self;
+            MenhirLib.EngineTypes.startp = _startpos_self_;
+            MenhirLib.EngineTypes.endp = _endpos_self_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let self : (string Location.loc option) = Obj.magic self in
+        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.class_field) = let _6 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3617 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__6_ = _endpos__1_inlined2_ in
+        let _3 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3626 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 3632 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__6_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1890 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
+# 3641 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = self;
+            MenhirLib.EngineTypes.startp = _startpos_self_;
+            MenhirLib.EngineTypes.endp = _endpos_self_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let self : (string Location.loc option) = Obj.magic self in
+        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.class_field) = let _6 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3703 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__6_ = _endpos__1_inlined3_ in
+        let _3 =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3712 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 3720 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__6_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1890 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
+# 3730 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_field) = let _3 =
+          let _1 = _1_inlined1 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3772 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__3_ = _endpos__1_inlined1_ in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1893 "src/ocaml/preprocess/parser_raw.mly"
+      ( let v, attrs = _2 in
+        let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
+# 3784 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_field) = let _3 =
+          let _1 = _1_inlined1 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3826 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__3_ = _endpos__1_inlined1_ in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1897 "src/ocaml/preprocess/parser_raw.mly"
+      ( let meth, attrs = _2 in
+        let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
+# 3838 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.class_field) = let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3886 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3895 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1901 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
+# 3905 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.class_field) = let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3953 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 3962 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1904 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
+# 3972 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_field) = let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4006 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__2_ = _endpos__1_inlined1_ in
+        let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1907 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
+# 4017 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.attribute) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_field) = let _1 =
+          let _1 = 
+# 1910 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pcf_attribute _1 )
+# 4043 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 935 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcf ~loc:_sloc _1 )
+# 4051 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1911 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 4057 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.class_expr) = 
+# 1799 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 4089 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.class_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1802 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_constraint(_4, _2) )
+# 4136 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 4145 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1805 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 4151 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
+        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1804 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
+# 4184 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 4193 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1805 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 4199 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e;
+          MenhirLib.EngineTypes.startp = _startpos_e_;
+          MenhirLib.EngineTypes.endp = _endpos_e_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e : (Parsetree.class_expr) = Obj.magic e in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_e_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1866 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
+# 4239 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos_e_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 4248 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1867 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4254 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e;
+          MenhirLib.EngineTypes.startp = _startpos_e_;
+          MenhirLib.EngineTypes.endp = _endpos_e_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let e : (Parsetree.class_expr) = Obj.magic e in
+        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_e_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1866 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
+# 4287 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos_e_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 4296 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1867 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4302 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 4323 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3643 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 4331 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 4364 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3644 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 4374 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1875 "src/ocaml/preprocess/parser_raw.mly"
+      ( reloc_pat ~loc:_sloc _2 )
+# 4416 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.core_type) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 1877 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_constraint(_2, _4) )
+# 4470 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 4479 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1878 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 4485 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
+        let _symbolstartpos = _endpos in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1880 "src/ocaml/preprocess/parser_raw.mly"
+      ( ghpat ~loc:_sloc Ppat_any )
+# 4506 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type) = 
+# 2007 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 4545 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 2008 "src/ocaml/preprocess/parser_raw.mly"
+                      ( Ptyp_any )
+# 4564 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__0_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _endpos in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 4573 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2009 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 4579 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _3 : (Parsetree.class_type) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.class_type_field) = let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4627 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4636 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2017 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
+# 4646 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ty;
+            MenhirLib.EngineTypes.startp = _startpos_ty_;
+            MenhirLib.EngineTypes.endp = _endpos_ty_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = flags;
+                  MenhirLib.EngineTypes.startp = _startpos_flags_;
+                  MenhirLib.EngineTypes.endp = _endpos_flags_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 4706 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.class_type_field) = let _4 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4719 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined3_ in
+        let _3 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let label =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 4729 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 4737 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2042 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let mut, virt = flags in
+    label, mut, virt, ty
+  )
+# 4746 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4754 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2020 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
+# 4764 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 4824 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.class_type_field) = let _7 =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4837 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__7_ = _endpos__1_inlined4_ in
+        let _6 =
+          let _1 = _1_inlined3 in
+          
+# 3287 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4846 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 4854 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 4862 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4870 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2024 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (p, v) = _3 in
+        let docs = symbol_docs _sloc in
+        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
+# 4881 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.class_type_field) = let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4929 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4938 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2028 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
+# 4948 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_type_field) = let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 4982 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__2_ = _endpos__1_inlined1_ in
+        let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2031 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
+# 4993 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.attribute) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_type_field) = let _1 =
+          let _1 = 
+# 2034 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pctf_attribute _1 )
+# 5019 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 933 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkctf ~loc:_sloc _1 )
+# 5027 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2035 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5033 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 =
+            let cid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5064 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys = 
+# 1993 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 5071 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1999 "src/ocaml/preprocess/parser_raw.mly"
+    ( tys )
+# 5076 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1974 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_constr (cid, tys) )
+# 5082 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 5091 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1977 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5097 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _3 : unit = Obj.magic _3 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 =
+            let cid =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5150 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys =
+                let params =
+                  let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 5159 "src/ocaml/preprocess/parser_raw.ml"
+                   in
+                  
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 5164 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1995 "src/ocaml/preprocess/parser_raw.mly"
+      ( params )
+# 5170 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1999 "src/ocaml/preprocess/parser_raw.mly"
+    ( tys )
+# 5176 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1974 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_constr (cid, tys) )
+# 5182 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 5192 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1977 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 = 
+# 1976 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_extension _1 )
+# 5224 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 5232 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1977 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5238 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.class_type) = let _3 =
+          let _1 = _1_inlined2 in
+          let _2 =
+            let _1 =
+              let _1 = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 5295 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 2013 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5300 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+            let _endpos = _endpos__1_ in
+            let _startpos = _startpos__1_ in
+            
+# 879 "src/ocaml/preprocess/parser_raw.mly"
+                               ( extra_csig _startpos _endpos _1 )
+# 5309 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2003 "src/ocaml/preprocess/parser_raw.mly"
+      ( Csig.mk _1 _2 )
+# 5315 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5323 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1979 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
+# 5332 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.class_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.class_type) = 
+# 1985 "src/ocaml/preprocess/parser_raw.mly"
+      ( Cty.attr _1 _2 )
+# 5364 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.class_type) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.class_type) = let _5 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5429 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5437 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined1_ in
+        let _3 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 5444 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1987 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos__2_, _endpos__4_) in
+        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
+        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
+# 5454 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.class_type) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.class_type) = let _5 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5526 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5534 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__4_ = _endpos__1_inlined2_ in
+        let _3 =
+          let _1 = _1_inlined1 in
+          
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 5543 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1987 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos__2_, _endpos__4_) in
+        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
+        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
+# 5554 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.class_expr) = 
+# 1839 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 5593 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 =
+            let cid =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5624 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys = 
+# 1993 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 5631 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1999 "src/ocaml/preprocess/parser_raw.mly"
+    ( tys )
+# 5636 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1846 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_constr(cid, tys) )
+# 5642 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 5651 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1857 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5657 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _3 : unit = Obj.magic _3 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 =
+            let cid =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 5710 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let tys =
+              let tys =
+                let params =
+                  let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 5719 "src/ocaml/preprocess/parser_raw.ml"
+                   in
+                  
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 5724 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1995 "src/ocaml/preprocess/parser_raw.mly"
+      ( params )
+# 5730 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1999 "src/ocaml/preprocess/parser_raw.mly"
+    ( tys )
+# 5736 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1846 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_constr(cid, tys) )
+# 5742 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 5752 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1857 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5758 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.class_type) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.class_expr) = let _1 =
+          let _1 = 
+# 1852 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcl_constraint(_2, _4) )
+# 5812 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 937 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc _1 )
+# 5821 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1857 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5827 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xss : (Parsetree.class_field list list) = Obj.magic xss in
+        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.class_expr) = let _3 =
+          let _1 = _1_inlined2 in
+          let _2 =
+            let _1 =
+              let _1 = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 5884 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1884 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5889 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+            let _endpos = _endpos__1_ in
+            let _startpos = _startpos__1_ in
+            
+# 878 "src/ocaml/preprocess/parser_raw.mly"
+                               ( extra_cstr _startpos _endpos _1 )
+# 5898 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1871 "src/ocaml/preprocess/parser_raw.mly"
+       ( Cstr.mk _1 _2 )
+# 5904 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 5912 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1859 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
+# 5921 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.class_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.class_type) = 
+# 1962 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 5946 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = domain;
+              MenhirLib.EngineTypes.startp = _startpos_domain_;
+              MenhirLib.EngineTypes.endp = _endpos_domain_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = label;
+                MenhirLib.EngineTypes.startp = _startpos_label_;
+                MenhirLib.EngineTypes.endp = _endpos_label_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.class_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let domain : (Parsetree.core_type) = Obj.magic domain in
+        let label : (string) = Obj.magic label in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_label_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 =
+            let label = 
+# 3350 "src/ocaml/preprocess/parser_raw.mly"
+      ( Optional label )
+# 5994 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1968 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_arrow(label, domain, codomain) )
+# 5999 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 6009 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1969 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 6015 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = domain;
+              MenhirLib.EngineTypes.startp = _startpos_domain_;
+              MenhirLib.EngineTypes.endp = _endpos_domain_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = label;
+                  MenhirLib.EngineTypes.startp = _startpos_label_;
+                  MenhirLib.EngineTypes.endp = _endpos_label_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.class_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let domain : (Parsetree.core_type) = Obj.magic domain in
+        let _2 : unit = Obj.magic _2 in
+        let label : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 6064 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic label in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_label_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 =
+            let label = 
+# 3352 "src/ocaml/preprocess/parser_raw.mly"
+      ( Labelled label )
+# 6074 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1968 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_arrow(label, domain, codomain) )
+# 6079 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 6089 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1969 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 6095 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = domain;
+              MenhirLib.EngineTypes.startp = _startpos_domain_;
+              MenhirLib.EngineTypes.endp = _endpos_domain_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.class_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let domain : (Parsetree.core_type) = Obj.magic domain in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_domain_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.class_type) = let _1 =
+          let _1 =
+            let label = 
+# 3354 "src/ocaml/preprocess/parser_raw.mly"
+      ( Nolabel )
+# 6136 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1968 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pcty_arrow(label, domain, codomain) )
+# 6141 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_domain_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 931 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkcty ~loc:_sloc _1 )
+# 6151 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1969 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 6157 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = csig;
+              MenhirLib.EngineTypes.startp = _startpos_csig_;
+              MenhirLib.EngineTypes.endp = _endpos_csig_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _8;
+                MenhirLib.EngineTypes.startp = _startpos__8_;
+                MenhirLib.EngineTypes.endp = _endpos__8_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = virt;
+                      MenhirLib.EngineTypes.startp = _startpos_virt_;
+                      MenhirLib.EngineTypes.endp = _endpos_virt_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = ext;
+                          MenhirLib.EngineTypes.startp = _startpos_ext_;
+                          MenhirLib.EngineTypes.endp = _endpos_ext_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _;
+                            MenhirLib.EngineTypes.semv = _2;
+                            MenhirLib.EngineTypes.startp = _startpos__2_;
+                            MenhirLib.EngineTypes.endp = _endpos__2_;
+                            MenhirLib.EngineTypes.next = {
+                              MenhirLib.EngineTypes.state = _menhir_s;
+                              MenhirLib.EngineTypes.semv = _1;
+                              MenhirLib.EngineTypes.startp = _startpos__1_;
+                              MenhirLib.EngineTypes.endp = _endpos__1_;
+                              MenhirLib.EngineTypes.next = _menhir_stack;
+                            };
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.class_type_declaration list) = Obj.magic bs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let csig : (Parsetree.class_type) = Obj.magic csig in
+        let _8 : unit = Obj.magic _8 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 6242 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (string Location.loc option * Parsetree.class_type_declaration list) = let _1 =
+          let a =
+            let attrs2 =
+              let _1 = _1_inlined3 in
+              
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 6260 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos_attrs2_ = _endpos__1_inlined3_ in
+            let id =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 6272 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let attrs1 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 6280 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos = _endpos_attrs2_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2109 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      ext,
+      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
+    )
+# 6295 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 6301 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2097 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 6307 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 6328 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3639 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 6336 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 6369 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3640 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 6379 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 6400 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constant) = 
+# 3522 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (n, m) = _1 in Pconst_integer (n, m) )
+# 6408 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 663 "src/ocaml/preprocess/parser_raw.mly"
+       (char)
+# 6429 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constant) = 
+# 3523 "src/ocaml/preprocess/parser_raw.mly"
+                 ( Pconst_char _1 )
+# 6437 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 6458 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constant) = 
+# 3524 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (s, d) = _1 in Pconst_string (s, d) )
+# 6466 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 683 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 6487 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constant) = 
+# 3525 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (f, m) = _1 in Pconst_float (f, m) )
+# 6495 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 6516 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3591 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 6524 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (string) = 
+# 3592 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "[]" )
+# 6556 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (string) = 
+# 3593 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "()" )
+# 6588 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (string) = 
+# 3594 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "::" )
+# 6627 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3595 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "false" )
+# 6652 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3596 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "true" )
+# 6677 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3604 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 6702 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Longident.t) = 
+# 3605 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1,"::") )
+# 6755 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Longident.t) = 
+# 3606 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident "[]" )
+# 6787 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Longident.t) = 
+# 3607 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident "()" )
+# 6819 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3608 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident "::" )
+# 6858 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3609 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident "false" )
+# 6883 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3610 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident "true" )
+# 6908 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.core_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type * Parsetree.core_type) = 
+# 2053 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1, _3 )
+# 6947 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.constructor_arguments) = let tys =
+          let xs =
+            let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 6974 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 6979 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1022 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 6985 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3157 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pcstr_tuple tys )
+# 6991 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.constructor_arguments) = let tys =
+          let xs =
+            let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 7032 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 7037 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1022 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7043 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3157 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pcstr_tuple tys )
+# 7049 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.constructor_arguments) = 
+# 3159 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pcstr_record _2 )
+# 7088 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constructor_declaration list) = 
+# 3078 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 7113 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.constructor_declaration list) = let cs = 
+# 1107 "src/ocaml/preprocess/parser_raw.mly"
+    ( List.rev xs )
+# 7138 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3080 "src/ocaml/preprocess/parser_raw.mly"
+      ( cs )
+# 7143 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 = 
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7168 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3302 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 7173 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type) = 
+# 3304 "src/ocaml/preprocess/parser_raw.mly"
+      ( Typ.attr _1 _2 )
+# 7205 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.direction_flag) = 
+# 3693 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Upto )
+# 7230 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.direction_flag) = 
+# 3694 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Downto )
+# 7255 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3897 "src/ocaml/preprocess/parser_raw.mly"
+    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
+# 7297 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _5 =
+          let xs =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 7359 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7364 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7370 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos_xs_ in
+        let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7381 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7387 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3899 "src/ocaml/preprocess/parser_raw.mly"
+    ( let expr = mkexp_attrs ~loc:_loc
+          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
+      Fake.app Fake.Lwt.in_lwt expr )
+# 7398 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7448 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7454 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__3_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3903 "src/ocaml/preprocess/parser_raw.mly"
+    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
+# 7463 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _5 =
+          let xs =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 7525 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7530 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7536 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos_xs_ in
+        let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7547 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7553 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3905 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp_attrs ~loc:_loc
+        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
+# 7563 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7627 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7633 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3908 "src/ocaml/preprocess/parser_raw.mly"
+    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
+# 7639 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _5 =
+          let xs =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 7715 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7720 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 7726 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7736 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7742 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__7_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3910 "src/ocaml/preprocess/parser_raw.mly"
+    ( let expr = mkexp_attrs ~loc:_loc
+        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
+      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
+# 7753 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _3;
+                MenhirLib.EngineTypes.startp = _startpos__3_;
+                MenhirLib.EngineTypes.endp = _endpos__3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : (Parsetree.expression) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7824 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7830 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__6_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3914 "src/ocaml/preprocess/parser_raw.mly"
+  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
+    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
+# 7840 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _10;
+          MenhirLib.EngineTypes.startp = _startpos__10_;
+          MenhirLib.EngineTypes.endp = _endpos__10_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _9;
+            MenhirLib.EngineTypes.startp = _startpos__9_;
+            MenhirLib.EngineTypes.endp = _endpos__9_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _8;
+              MenhirLib.EngineTypes.startp = _startpos__8_;
+              MenhirLib.EngineTypes.endp = _endpos__8_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _6;
+                  MenhirLib.EngineTypes.startp = _startpos__6_;
+                  MenhirLib.EngineTypes.endp = _endpos__6_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _5;
+                    MenhirLib.EngineTypes.startp = _startpos__5_;
+                    MenhirLib.EngineTypes.endp = _endpos__5_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _4;
+                      MenhirLib.EngineTypes.startp = _startpos__4_;
+                      MenhirLib.EngineTypes.endp = _endpos__4_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _3;
+                        MenhirLib.EngineTypes.startp = _startpos__3_;
+                        MenhirLib.EngineTypes.endp = _endpos__3_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = _1_inlined2;
+                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _;
+                            MenhirLib.EngineTypes.semv = _1_inlined1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                            MenhirLib.EngineTypes.next = {
+                              MenhirLib.EngineTypes.state = _menhir_s;
+                              MenhirLib.EngineTypes.semv = _1;
+                              MenhirLib.EngineTypes.startp = _startpos__1_;
+                              MenhirLib.EngineTypes.endp = _endpos__1_;
+                              MenhirLib.EngineTypes.next = _menhir_stack;
+                            };
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _10 : unit = Obj.magic _10 in
+        let _9 : (Parsetree.expression) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__10_ in
+        let _v : (Parsetree.expression) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 7939 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 7945 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__10_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3917 "src/ocaml/preprocess/parser_raw.mly"
+    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
+      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
+# 7955 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _8;
+          MenhirLib.EngineTypes.startp = _startpos__8_;
+          MenhirLib.EngineTypes.endp = _endpos__8_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _7;
+            MenhirLib.EngineTypes.startp = _startpos__7_;
+            MenhirLib.EngineTypes.endp = _endpos__7_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _6;
+              MenhirLib.EngineTypes.startp = _startpos__6_;
+              MenhirLib.EngineTypes.endp = _endpos__6_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _5;
+                MenhirLib.EngineTypes.startp = _startpos__5_;
+                MenhirLib.EngineTypes.endp = _endpos__5_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _4;
+                  MenhirLib.EngineTypes.startp = _startpos__4_;
+                  MenhirLib.EngineTypes.endp = _endpos__4_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _3;
+                    MenhirLib.EngineTypes.startp = _startpos__3_;
+                    MenhirLib.EngineTypes.endp = _endpos__3_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined2;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__8_ in
+        let _v : (Parsetree.expression) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8040 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8046 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__8_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3920 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp_attrs ~loc:_loc
+          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
+             Fake.(app Lwt.unit_lwt _7)))
+          _2
+    )
+# 8059 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = 
+# 2200 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 8084 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined3;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _2;
+                      MenhirLib.EngineTypes.startp = _startpos__2_;
+                      MenhirLib.EngineTypes.endp = _endpos__2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
+        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _4 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 8164 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _3 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8174 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8180 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2250 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
+# 8186 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8197 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined4;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined3;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _2;
+                        MenhirLib.EngineTypes.startp = _startpos__2_;
+                        MenhirLib.EngineTypes.endp = _endpos__2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : (Parsetree.expression) = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _2_inlined1 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2_inlined1 in
+        let _1_inlined3 : (string) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _4 =
+            let (_endpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _2, _1) = (_endpos__1_inlined4_, _endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined4, _2_inlined1, _1_inlined3) in
+            let _3 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8283 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__3_ = _endpos__1_inlined1_ in
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 8294 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 3142 "src/ocaml/preprocess/parser_raw.mly"
+      ( let args, res = _2 in
+        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
+# 8304 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _3 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8314 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8320 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2252 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_letexception(_4, _6), _3 )
+# 8326 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__6_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8337 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _4 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8409 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8415 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _3 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 8421 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 2254 "src/ocaml/preprocess/parser_raw.mly"
+      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
+        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
+        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
+# 8428 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8439 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined3;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _2;
+                      MenhirLib.EngineTypes.startp = _startpos__2_;
+                      MenhirLib.EngineTypes.endp = _endpos__2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (string Location.loc option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _4 =
+            let (_1_inlined1, _1) = (_1_inlined3, _1_inlined2) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8518 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8524 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _3 =
+            let _1 = _1_inlined1 in
+            
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 8532 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2254 "src/ocaml/preprocess/parser_raw.mly"
+      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
+        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
+        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
+# 8540 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8551 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _3 =
+            let xs =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 8600 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 8605 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 8611 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8621 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8627 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2258 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_function _3, _2 )
+# 8633 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8644 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8702 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8708 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2260 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (l,o,p) = _3 in
+        Pexp_fun(l, o, p, _4), _2 )
+# 8715 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__4_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8726 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _5 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 8801 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8810 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8816 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__7_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2263 "src/ocaml/preprocess/parser_raw.mly"
+      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
+# 8825 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8836 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _5 =
+            let xs =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 8899 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 8904 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 8910 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 8920 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 8926 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2265 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_match(_3, _5), _2 )
+# 8932 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 8943 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _5 =
+            let xs =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 9006 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1079 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 9011 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2637 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 9017 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9027 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9033 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2267 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_try(_3, _5), _2 )
+# 9039 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9050 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9129 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9135 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2273 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
+# 9141 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9152 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9217 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9223 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2275 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
+# 9229 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__5_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9240 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _3;
+                MenhirLib.EngineTypes.startp = _startpos__3_;
+                MenhirLib.EngineTypes.endp = _endpos__3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9312 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9318 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2277 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
+# 9324 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__6_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9335 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _10;
+          MenhirLib.EngineTypes.startp = _startpos__10_;
+          MenhirLib.EngineTypes.endp = _endpos__10_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _9;
+            MenhirLib.EngineTypes.startp = _startpos__9_;
+            MenhirLib.EngineTypes.endp = _endpos__9_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _8;
+              MenhirLib.EngineTypes.startp = _startpos__8_;
+              MenhirLib.EngineTypes.endp = _endpos__8_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _6;
+                  MenhirLib.EngineTypes.startp = _startpos__6_;
+                  MenhirLib.EngineTypes.endp = _endpos__6_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _5;
+                    MenhirLib.EngineTypes.startp = _startpos__5_;
+                    MenhirLib.EngineTypes.endp = _endpos__5_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _4;
+                      MenhirLib.EngineTypes.startp = _startpos__4_;
+                      MenhirLib.EngineTypes.endp = _endpos__4_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _3;
+                        MenhirLib.EngineTypes.startp = _startpos__3_;
+                        MenhirLib.EngineTypes.endp = _endpos__3_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = _1_inlined2;
+                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _;
+                            MenhirLib.EngineTypes.semv = _1_inlined1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                            MenhirLib.EngineTypes.next = {
+                              MenhirLib.EngineTypes.state = _menhir_s;
+                              MenhirLib.EngineTypes.semv = _1;
+                              MenhirLib.EngineTypes.startp = _startpos__1_;
+                              MenhirLib.EngineTypes.endp = _endpos__1_;
+                              MenhirLib.EngineTypes.next = _menhir_stack;
+                            };
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _10 : unit = Obj.magic _10 in
+        let _9 : (Parsetree.expression) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__10_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9435 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9441 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2280 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
+# 9447 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__10_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9458 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9509 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9515 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2282 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_assert _3, _2 )
+# 9521 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__3_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9532 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9583 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9589 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2284 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_lazy _3, _2 )
+# 9595 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__3_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9606 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let xss : (Parsetree.class_field list list) = Obj.magic xss in
+        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _3 =
+            let _1 = _1_inlined3 in
+            let _2 =
+              let _1 =
+                let _1 = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 9671 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1884 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9676 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+              let _endpos = _endpos__1_ in
+              let _startpos = _startpos__1_ in
+              
+# 878 "src/ocaml/preprocess/parser_raw.mly"
+                               ( extra_cstr _startpos _endpos _1 )
+# 9685 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1871 "src/ocaml/preprocess/parser_raw.mly"
+       ( Cstr.mk _1 _2 )
+# 9691 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 9701 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 9707 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2286 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_object _3, _2 )
+# 9713 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__4_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2202 "src/ocaml/preprocess/parser_raw.mly"
+      ( let desc, attrs = _1 in
+        mkexp_attrs ~loc:_sloc desc attrs )
+# 9724 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _2 =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 9759 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 9764 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2294 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_apply(_1, _2) )
+# 9770 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_xs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 9780 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 9786 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let xs : (Parsetree.expression list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let es =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 9815 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 1046 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 9820 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2665 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 9826 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2296 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_tuple(_1) )
+# 9832 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 9842 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 9848 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 9886 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2298 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_construct(_1, Some _2) )
+# 9892 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 9902 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 9908 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2300 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_variant(_1, Some _2) )
+# 9941 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 9950 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 9956 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = op;
+            MenhirLib.EngineTypes.startp = _startpos_op_;
+            MenhirLib.EngineTypes.endp = _endpos_op_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let op : (
+# 694 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 9990 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3565 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 10002 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10011 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10017 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10027 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10033 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = op;
+            MenhirLib.EngineTypes.startp = _startpos_op_;
+            MenhirLib.EngineTypes.endp = _endpos_op_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let op : (
+# 695 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 10067 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3566 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 10079 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10088 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10094 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10104 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10110 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = op;
+            MenhirLib.EngineTypes.startp = _startpos_op_;
+            MenhirLib.EngineTypes.endp = _endpos_op_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let op : (
+# 696 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 10144 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3567 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 10156 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10165 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10171 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10181 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10187 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = op;
+            MenhirLib.EngineTypes.startp = _startpos_op_;
+            MenhirLib.EngineTypes.endp = _endpos_op_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let op : (
+# 697 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 10221 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3568 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 10233 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10242 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10248 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10258 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10264 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = op;
+            MenhirLib.EngineTypes.startp = _startpos_op_;
+            MenhirLib.EngineTypes.endp = _endpos_op_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let op : (
+# 698 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 10298 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3569 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 10310 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10319 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10325 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10335 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10341 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3570 "src/ocaml/preprocess/parser_raw.mly"
+                   ("+")
+# 10383 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10391 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10397 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10407 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10413 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3571 "src/ocaml/preprocess/parser_raw.mly"
+                  ("+.")
+# 10455 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10463 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10469 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10479 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10485 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3572 "src/ocaml/preprocess/parser_raw.mly"
+                  ("+=")
+# 10527 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10535 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10541 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10551 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10557 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3573 "src/ocaml/preprocess/parser_raw.mly"
+                   ("-")
+# 10599 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10607 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10613 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10623 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10629 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3574 "src/ocaml/preprocess/parser_raw.mly"
+                  ("-.")
+# 10671 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10679 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10685 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10695 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10701 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3575 "src/ocaml/preprocess/parser_raw.mly"
+                   ("*")
+# 10743 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10751 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10757 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10767 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10773 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3576 "src/ocaml/preprocess/parser_raw.mly"
+                   ("%")
+# 10815 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10823 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10829 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10839 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10845 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3577 "src/ocaml/preprocess/parser_raw.mly"
+                   ("=")
+# 10887 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10895 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10901 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10911 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10917 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3578 "src/ocaml/preprocess/parser_raw.mly"
+                   ("<")
+# 10959 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 10967 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 10973 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 10983 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 10989 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3579 "src/ocaml/preprocess/parser_raw.mly"
+                   (">")
+# 11031 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11039 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11045 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11055 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11061 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3580 "src/ocaml/preprocess/parser_raw.mly"
+                  ("or")
+# 11103 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11111 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11117 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11127 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11133 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3581 "src/ocaml/preprocess/parser_raw.mly"
+                  ("||")
+# 11175 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11183 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11189 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11199 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11205 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3582 "src/ocaml/preprocess/parser_raw.mly"
+                   ("&")
+# 11247 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11255 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11261 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11271 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11277 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3583 "src/ocaml/preprocess/parser_raw.mly"
+                  ("&&")
+# 11319 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11327 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11333 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11343 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11349 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = e2;
+          MenhirLib.EngineTypes.startp = _startpos_e2_;
+          MenhirLib.EngineTypes.endp = _endpos_e2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e1;
+              MenhirLib.EngineTypes.startp = _startpos_e1_;
+              MenhirLib.EngineTypes.endp = _endpos_e1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let e2 : (Parsetree.expression) = Obj.magic e2 in
+        let _1 : unit = Obj.magic _1 in
+        let e1 : (Parsetree.expression) = Obj.magic e1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e1_ in
+        let _endpos = _endpos_e2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let op =
+              let _1 = 
+# 3584 "src/ocaml/preprocess/parser_raw.mly"
+                  (":=")
+# 11391 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 11399 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2302 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix e1 op e2 )
+# 11405 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11415 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11421 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _loc__1_ = (_startpos__1_, _endpos__1_) in
+            
+# 2304 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkuminus ~oploc:_loc__1_ _1 _2 )
+# 11456 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11466 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11472 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _loc__1_ = (_startpos__1_, _endpos__1_) in
+            
+# 2306 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkuplus ~oploc:_loc__1_ _1 _2 )
+# 11507 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 11517 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2205 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 11523 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2207 "src/ocaml/preprocess/parser_raw.mly"
+      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
+# 11565 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = body;
+          MenhirLib.EngineTypes.startp = _startpos_body_;
+          MenhirLib.EngineTypes.endp = _endpos_body_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = bindings;
+              MenhirLib.EngineTypes.startp = _startpos_bindings_;
+              MenhirLib.EngineTypes.endp = _endpos_bindings_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let body : (Parsetree.expression) = Obj.magic body in
+        let _3 : unit = Obj.magic _3 in
+        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
+        let _1 : (
+# 700 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 11607 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_body_ in
+        let _v : (Parsetree.expression) = let pbop_op =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 11619 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos_pbop_op_ = _startpos__1_ in
+        let _endpos = _endpos_body_ in
+        let _symbolstartpos = _startpos_pbop_op_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2209 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
+        let ands = List.rev rev_ands in
+        let pbop_loc = make_loc _sloc in
+        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
+        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
+# 11633 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _loc__2_ = (_startpos__2_, _endpos__2_) in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2215 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
+# 11676 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 11711 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 11720 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 11728 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2217 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
+# 11737 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _3 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 11795 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2219 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
+# 11804 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2221 "src/ocaml/preprocess/parser_raw.mly"
+      ( array_set ~loc:_sloc _1 _4 _7 )
+# 11874 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2223 "src/ocaml/preprocess/parser_raw.mly"
+      ( string_set ~loc:_sloc _1 _4 _7 )
+# 11944 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2225 "src/ocaml/preprocess/parser_raw.mly"
+      ( bigarray_set ~loc:_sloc _1 _4 _7 )
+# 12014 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12076 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12085 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2227 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc lident bracket _2 _1 _4 _7 )
+# 12093 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12155 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12164 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2229 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc lident paren _2 _1 _4 _7 )
+# 12172 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12234 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12243 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2231 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc lident brace _2 _1 _4 _7 )
+# 12251 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _9;
+          MenhirLib.EngineTypes.startp = _startpos__9_;
+          MenhirLib.EngineTypes.endp = _endpos__9_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _8;
+            MenhirLib.EngineTypes.startp = _startpos__8_;
+            MenhirLib.EngineTypes.endp = _endpos__8_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _7;
+              MenhirLib.EngineTypes.startp = _startpos__7_;
+              MenhirLib.EngineTypes.endp = _endpos__7_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _5;
+                  MenhirLib.EngineTypes.startp = _startpos__5_;
+                  MenhirLib.EngineTypes.endp = _endpos__5_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _4;
+                    MenhirLib.EngineTypes.startp = _startpos__4_;
+                    MenhirLib.EngineTypes.endp = _endpos__4_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _3;
+                      MenhirLib.EngineTypes.startp = _startpos__3_;
+                      MenhirLib.EngineTypes.endp = _endpos__3_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _2;
+                        MenhirLib.EngineTypes.startp = _startpos__2_;
+                        MenhirLib.EngineTypes.endp = _endpos__2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _9 : (Parsetree.expression) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12325 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__9_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12336 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__9_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2234 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc (ldot _3) bracket _4 _1 _6 _9 )
+# 12344 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _9;
+          MenhirLib.EngineTypes.startp = _startpos__9_;
+          MenhirLib.EngineTypes.endp = _endpos__9_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _8;
+            MenhirLib.EngineTypes.startp = _startpos__8_;
+            MenhirLib.EngineTypes.endp = _endpos__8_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _7;
+              MenhirLib.EngineTypes.startp = _startpos__7_;
+              MenhirLib.EngineTypes.endp = _endpos__7_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _5;
+                  MenhirLib.EngineTypes.startp = _startpos__5_;
+                  MenhirLib.EngineTypes.endp = _endpos__5_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _4;
+                    MenhirLib.EngineTypes.startp = _startpos__4_;
+                    MenhirLib.EngineTypes.endp = _endpos__4_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _3;
+                      MenhirLib.EngineTypes.startp = _startpos__3_;
+                      MenhirLib.EngineTypes.endp = _endpos__3_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _2;
+                        MenhirLib.EngineTypes.startp = _startpos__2_;
+                        MenhirLib.EngineTypes.endp = _endpos__2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _9 : (Parsetree.expression) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12418 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__9_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12429 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__9_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2237 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc (ldot _3) paren _4 _1 _6 _9  )
+# 12437 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _9;
+          MenhirLib.EngineTypes.startp = _startpos__9_;
+          MenhirLib.EngineTypes.endp = _endpos__9_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _8;
+            MenhirLib.EngineTypes.startp = _startpos__8_;
+            MenhirLib.EngineTypes.endp = _endpos__8_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _7;
+              MenhirLib.EngineTypes.startp = _startpos__7_;
+              MenhirLib.EngineTypes.endp = _endpos__7_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = es;
+                MenhirLib.EngineTypes.startp = _startpos_es_;
+                MenhirLib.EngineTypes.endp = _endpos_es_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _5;
+                  MenhirLib.EngineTypes.startp = _startpos__5_;
+                  MenhirLib.EngineTypes.endp = _endpos__5_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _4;
+                    MenhirLib.EngineTypes.startp = _startpos__4_;
+                    MenhirLib.EngineTypes.endp = _endpos__4_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _3;
+                      MenhirLib.EngineTypes.startp = _startpos__3_;
+                      MenhirLib.EngineTypes.endp = _endpos__3_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _2;
+                        MenhirLib.EngineTypes.startp = _startpos__2_;
+                        MenhirLib.EngineTypes.endp = _endpos__2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _9 : (Parsetree.expression) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 12511 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__9_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 12522 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__9_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2240 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_set ~loc:_sloc (ldot _3) brace _4 _1 _6 _9 )
+# 12530 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = 
+# 2242 "src/ocaml/preprocess/parser_raw.mly"
+      ( Exp.attr _1 _2 )
+# 12562 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (string Location.loc option) = 
+# 3849 "src/ocaml/preprocess/parser_raw.mly"
+                    ( None )
+# 12580 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (string Location.loc option) = 
+# 3850 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Some _2 )
+# 12612 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.payload) = Obj.magic _3 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.extension) = 
+# 3860 "src/ocaml/preprocess/parser_raw.mly"
+                                           ( (_2, _3) )
+# 12658 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.extension_constructor) = let attrs =
+          let _1 = _1_inlined3 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 12713 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined3_ in
+        let lid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 12725 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let cid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 12736 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3226 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info = symbol_info _endpos in
+        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
+# 12746 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.extension_constructor) = let attrs =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 12794 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined2_ in
+        let lid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 12806 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let cid =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 12816 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos_cid_ = _startpos__1_ in
+        let _1 = 
+# 3669 "src/ocaml/preprocess/parser_raw.mly"
+    ( () )
+# 12823 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos_cid_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3226 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info = symbol_info _endpos in
+        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
+# 12832 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.payload) = Obj.magic _3 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3837 "src/ocaml/preprocess/parser_raw.mly"
+    ( mark_symbol_docs _sloc;
+      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
+# 12882 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params = 
+# 1993 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 12900 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1810 "src/ocaml/preprocess/parser_raw.mly"
+    ( params )
+# 12905 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
+          let params =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 12946 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 12951 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1995 "src/ocaml/preprocess/parser_raw.mly"
+      ( params )
+# 12957 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1810 "src/ocaml/preprocess/parser_raw.mly"
+    ( params )
+# 12963 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = 
+# 2623 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 12988 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2625 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkexp_constraint ~loc:_sloc _3 _1 )
+# 13030 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = 
+# 2650 "src/ocaml/preprocess/parser_raw.mly"
+      ( (merloc _endpos__1_ _2) )
+# 13062 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2652 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
+# 13109 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 13118 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2653 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 13124 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2656 "src/ocaml/preprocess/parser_raw.mly"
+      (
+       let (l,o,p) = _1 in
+       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
+      )
+# 13162 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _3 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 13215 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2661 "src/ocaml/preprocess/parser_raw.mly"
+      ( mk_newtypes ~loc:_sloc _3 _5 )
+# 13223 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_ty_ in
+        let _v : (Parsetree.core_type) = 
+# 3338 "src/ocaml/preprocess/parser_raw.mly"
+      ( ty )
+# 13248 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = label;
+                MenhirLib.EngineTypes.startp = _startpos_label_;
+                MenhirLib.EngineTypes.endp = _endpos_label_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.core_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let label : (string) = Obj.magic label in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_label_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let domain = 
+# 882 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
+# 13296 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let label = 
+# 3350 "src/ocaml/preprocess/parser_raw.mly"
+      ( Optional label )
+# 13301 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3344 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_arrow(label, domain, codomain) )
+# 13306 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 13316 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3346 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13322 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = label;
+                  MenhirLib.EngineTypes.startp = _startpos_label_;
+                  MenhirLib.EngineTypes.endp = _endpos_label_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.core_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let label : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 13371 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic label in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_label_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let domain = 
+# 882 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
+# 13381 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let label = 
+# 3352 "src/ocaml/preprocess/parser_raw.mly"
+      ( Labelled label )
+# 13386 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3344 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_arrow(label, domain, codomain) )
+# 13391 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 13401 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3346 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13407 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = codomain;
+          MenhirLib.EngineTypes.startp = _startpos_codomain_;
+          MenhirLib.EngineTypes.endp = _endpos_codomain_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let codomain : (Parsetree.core_type) = Obj.magic codomain in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_codomain_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let domain = 
+# 882 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
+# 13448 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let label = 
+# 3354 "src/ocaml/preprocess/parser_raw.mly"
+      ( Nolabel )
+# 13453 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 3344 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_arrow(label, domain, codomain) )
+# 13458 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_codomain_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 13468 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3346 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13474 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.functor_parameter) = 
+# 1229 "src/ocaml/preprocess/parser_raw.mly"
+      ( Unit )
+# 13506 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = mty;
+            MenhirLib.EngineTypes.startp = _startpos_mty_;
+            MenhirLib.EngineTypes.endp = _endpos_mty_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (string option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.functor_parameter) = let x =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 13564 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1232 "src/ocaml/preprocess/parser_raw.mly"
+      ( Named (x, mty) )
+# 13570 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.functor_parameter list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.functor_parameter list) = 
+# 1221 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13595 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
+# 3146 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( (Pcstr_tuple [],None) )
+# 13613 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
+# 3147 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( (_2,None) )
+# 13645 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.core_type) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
+# 3149 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( (_2,Some _4) )
+# 13691 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
+# 3151 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( (Pcstr_tuple [],Some _2) )
+# 13723 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = args_res;
+            MenhirLib.EngineTypes.startp = _startpos_args_res_;
+            MenhirLib.EngineTypes.endp = _endpos_args_res_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = let attrs =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13773 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined2_ in
+        let cid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 13785 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3094 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let args, res = args_res in
+      let info = symbol_info _endpos in
+      let loc = make_loc _sloc in
+      cid, args, res, attrs, loc, info
+    )
+# 13799 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = args_res;
+            MenhirLib.EngineTypes.startp = _startpos_args_res_;
+            MenhirLib.EngineTypes.endp = _endpos_args_res_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13842 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined1_ in
+        let cid =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 13853 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos_cid_ = _startpos__1_ in
+        let _1 = 
+# 3669 "src/ocaml/preprocess/parser_raw.mly"
+    ( () )
+# 13860 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos_cid_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3094 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let args, res = args_res in
+      let info = symbol_info _endpos in
+      let loc = make_loc _sloc in
+      cid, args, res, attrs, loc, info
+    )
+# 13873 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined3;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
+        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 13946 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = let attrs2 =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13961 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined4_ in
+        let cstrs =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 13970 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 13975 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 13981 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let kind_priv_manifest =
+          let _1 = _1_inlined3 in
+          
+# 3045 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 13989 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14000 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let flag = 
+# 3689 "src/ocaml/preprocess/parser_raw.mly"
+                ( Recursive )
+# 14006 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14013 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2982 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      (flag, ext),
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
+    )
+# 14029 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined5;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined4;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined3;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined2;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = ext;
+                          MenhirLib.EngineTypes.startp = _startpos_ext_;
+                          MenhirLib.EngineTypes.endp = _endpos_ext_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
+        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14108 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined3 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined5_ in
+        let _v : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = let attrs2 =
+          let _1 = _1_inlined5 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14124 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined5_ in
+        let cstrs =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 14133 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 14138 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14144 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let kind_priv_manifest =
+          let _1 = _1_inlined4 in
+          
+# 3045 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 14152 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14163 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let flag =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          let _loc = (_startpos, _endpos) in
+          
+# 3690 "src/ocaml/preprocess/parser_raw.mly"
+                ( not_expecting _loc "nonrec flag"; Recursive )
+# 14174 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14182 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2982 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      (flag, ext),
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
+    )
+# 14198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = kind_priv_manifest;
+              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
+              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = params;
+                  MenhirLib.EngineTypes.startp = _startpos_params_;
+                  MenhirLib.EngineTypes.endp = _endpos_params_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = ext;
+                      MenhirLib.EngineTypes.startp = _startpos_ext_;
+                      MenhirLib.EngineTypes.endp = _endpos_ext_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14264 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14279 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let cstrs =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 14288 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 14293 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14299 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14310 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let flag = 
+# 3685 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Recursive )
+# 14316 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14323 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2982 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      (flag, ext),
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
+    )
+# 14339 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = kind_priv_manifest;
+              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
+              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined3;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = params;
+                  MenhirLib.EngineTypes.startp = _startpos_params_;
+                  MenhirLib.EngineTypes.endp = _endpos_params_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
+        let _1_inlined3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14411 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined3 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = let attrs2 =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14427 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined4_ in
+        let cstrs =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 14436 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 14441 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14447 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14458 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let flag =
+          let _1 = _1_inlined2 in
+          
+# 3686 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Nonrecursive )
+# 14466 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14474 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2982 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      (flag, ext),
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
+    )
+# 14490 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14511 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3538 "src/ocaml/preprocess/parser_raw.mly"
+                              ( _1 )
+# 14519 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14540 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3539 "src/ocaml/preprocess/parser_raw.mly"
+                              ( _1 )
+# 14548 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.structure) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 860 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.structure)
+# 14580 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1139 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14584 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (string) = 
+# 3587 "src/ocaml/preprocess/parser_raw.mly"
+  ( "" )
+# 14602 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (string) = 
+# 3588 "src/ocaml/preprocess/parser_raw.mly"
+              ( ";.." )
+# 14634 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.signature) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 862 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.signature)
+# 14666 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1145 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14670 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.payload) = Obj.magic _3 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.extension) = 
+# 3863 "src/ocaml/preprocess/parser_raw.mly"
+                                                  ( (_2, _3) )
+# 14716 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14764 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.label_declaration) = let _5 =
+          let _1 = _1_inlined3 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14775 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos__1_inlined3_ in
+        let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3291 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14784 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 14792 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14800 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__2_ = _startpos__1_inlined1_ in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          _startpos__2_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3168 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info = symbol_info _endpos in
+        Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
+# 14814 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 14876 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.label_declaration) = let _7 =
+          let _1 = _1_inlined4 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14887 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__7_ = _endpos__1_inlined4_ in
+        let _5 =
+          let _1 = _1_inlined3 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14896 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos__1_inlined3_ in
+        let _4 =
+          let _1 = _1_inlined2 in
+          
+# 3291 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 14905 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 14913 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 14921 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__2_ = _startpos__1_inlined1_ in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          _startpos__2_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3173 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info =
+          match rhs_info _endpos__5_ with
+          | Some _ as info_before_semi -> info_before_semi
+          | None -> symbol_info _endpos
+       in
+       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info )
+# 14939 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.label_declaration list) = 
+# 3162 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( [_1] )
+# 14964 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.label_declaration list) = 
+# 3163 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( [_1] )
+# 14989 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
+        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.label_declaration list) = 
+# 3164 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 :: _2 )
+# 15021 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15042 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string * Parsetree.pattern) = let x =
+          let _1 =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 15055 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2188 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
+# 15064 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2180 "src/ocaml/preprocess/parser_raw.mly"
+      ( x )
+# 15070 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = cty;
+          MenhirLib.EngineTypes.startp = _startpos_cty_;
+          MenhirLib.EngineTypes.endp = _endpos_cty_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let cty : (Parsetree.core_type) = Obj.magic cty in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15105 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_cty_ in
+        let _v : (string * Parsetree.pattern) = let x =
+          let _1 =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 15118 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2188 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
+# 15127 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos_x_ = _startpos__1_ in
+        let _endpos = _endpos_cty_ in
+        let _symbolstartpos = _startpos_x_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2182 "src/ocaml/preprocess/parser_raw.mly"
+      ( let lab, pat = x in
+        lab,
+        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
+# 15139 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15160 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3613 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 15168 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15201 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3614 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 15211 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression) = 
+# 2518 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Nolabel, _1) )
+# 15236 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (
+# 705 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15264 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression) = 
+# 2520 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Labelled _1, _2) )
+# 15272 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = label;
+          MenhirLib.EngineTypes.startp = _startpos_label_;
+          MenhirLib.EngineTypes.endp = _endpos_label_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let label : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15299 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic label in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_label_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
+        
+# 2522 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = _loc_label_ in
+        (Labelled label, mkexpvar ~loc label) )
+# 15310 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = label;
+          MenhirLib.EngineTypes.startp = _startpos_label_;
+          MenhirLib.EngineTypes.endp = _endpos_label_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let label : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15337 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic label in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_label_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
+        
+# 2525 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = _loc_label_ in
+        (Optional label, mkexpvar ~loc label) )
+# 15348 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15376 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression) = 
+# 2528 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Optional _1, _2) )
+# 15384 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
+        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
+          let _1 = _1_inlined1 in
+          
+# 2176 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 15439 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2150 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Optional (fst _3), _4, snd _3) )
+# 15445 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15472 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 15487 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2188 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
+# 15496 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2152 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Optional (fst _2), None, snd _2) )
+# 15502 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15551 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
+          let _1 = _1_inlined1 in
+          
+# 2176 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 15561 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2154 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Optional _1, _4, _3) )
+# 15567 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15595 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
+# 2156 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Optional _1, None, _2) )
+# 15603 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
+# 2158 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Labelled (fst _3), None, snd _3) )
+# 15649 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15676 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 15691 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2188 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
+# 15700 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2160 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Labelled (fst _2), None, snd _2) )
+# 15706 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : (
+# 705 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 15734 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
+# 2162 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Labelled _1, None, _2) )
+# 15742 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
+# 2164 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Nolabel, None, _1) )
+# 15767 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2535 "src/ocaml/preprocess/parser_raw.mly"
+              ( mkpatvar ~loc:_sloc _1 )
+# 15803 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2539 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1, _2) )
+# 15809 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2535 "src/ocaml/preprocess/parser_raw.mly"
+              ( mkpatvar ~loc:_sloc _1 )
+# 15859 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2541 "src/ocaml/preprocess/parser_raw.mly"
+      ( let v = _1 in (* PR#7344 *)
+        let t =
+          match _2 with
+            Some t, None -> t
+          | _, Some t -> t
+          | _ -> assert false
+        in
+        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
+        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
+        let patloc = (_startpos__1_, _endpos__2_) in
+        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
+         mkexp_constraint ~loc:_sloc _4 _2) )
+# 15879 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = xs;
+                  MenhirLib.EngineTypes.startp = _startpos_xs_;
+                  MenhirLib.EngineTypes.endp = _endpos_xs_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.core_type) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = let _3 =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 15948 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 15953 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3273 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 15959 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__3_ = _startpos_xs_ in
+        let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2535 "src/ocaml/preprocess/parser_raw.mly"
+              ( mkpatvar ~loc:_sloc _1 )
+# 15970 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2557 "src/ocaml/preprocess/parser_raw.mly"
+      ( let typloc = (_startpos__3_, _endpos__5_) in
+        let patloc = (_startpos__1_, _endpos__5_) in
+        (ghpat ~loc:patloc
+           (Ppat_constraint(_1, ghtyp ~loc:typloc (Ptyp_poly(_3,_5)))),
+         _7) )
+# 15980 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _8;
+          MenhirLib.EngineTypes.startp = _startpos__8_;
+          MenhirLib.EngineTypes.endp = _endpos__8_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _7;
+            MenhirLib.EngineTypes.startp = _startpos__7_;
+            MenhirLib.EngineTypes.endp = _endpos__7_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _6;
+              MenhirLib.EngineTypes.startp = _startpos__6_;
+              MenhirLib.EngineTypes.endp = _endpos__6_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _5;
+                MenhirLib.EngineTypes.startp = _startpos__5_;
+                MenhirLib.EngineTypes.endp = _endpos__5_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = xs;
+                  MenhirLib.EngineTypes.startp = _startpos_xs_;
+                  MenhirLib.EngineTypes.endp = _endpos_xs_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _3;
+                    MenhirLib.EngineTypes.startp = _startpos__3_;
+                    MenhirLib.EngineTypes.endp = _endpos__3_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _2;
+                      MenhirLib.EngineTypes.startp = _startpos__2_;
+                      MenhirLib.EngineTypes.endp = _endpos__2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _8 : (Parsetree.expression) = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let _6 : (Parsetree.core_type) = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__8_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 16054 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2535 "src/ocaml/preprocess/parser_raw.mly"
+              ( mkpatvar ~loc:_sloc _1 )
+# 16063 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__8_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2563 "src/ocaml/preprocess/parser_raw.mly"
+      ( let exp, poly =
+          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
+        let loc = (_startpos__1_, _endpos__6_) in
+        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
+# 16075 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = 
+# 2568 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_1, _3) )
+# 16114 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.core_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = 
+# 2570 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos__1_, _endpos__3_) in
+        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
+# 16168 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = rec_flag;
+              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
+              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = ext;
+                  MenhirLib.EngineTypes.startp = _startpos_ext_;
+                  MenhirLib.EngineTypes.endp = _endpos_ext_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Ast_helper.let_bindings) = let _1 =
+          let attrs2 =
+            let _1 = _1_inlined2 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16231 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined2_ in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16240 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2586 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
+    )
+# 16252 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2576 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 16258 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Ast_helper.let_bindings) = 
+# 2577 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( addlb _1 _2 )
+# 16290 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = rec_flag;
+              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
+              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Ast_helper.let_bindings) = let _1 =
+          let attrs2 =
+            let _1 = _1_inlined2 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16346 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined2_ in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16355 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let ext = 
+# 3853 "src/ocaml/preprocess/parser_raw.mly"
+                    ( None )
+# 16361 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2586 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
+    )
+# 16372 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2576 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 16378 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = rec_flag;
+              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
+              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Ast_helper.let_bindings) = let _1 =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16448 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let attrs1 =
+            let _1 = _1_inlined2 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16457 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let ext =
+            let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
+            let _endpos = _endpos__2_ in
+            let _startpos = _startpos__1_ in
+            let _loc = (_startpos, _endpos) in
+            
+# 3854 "src/ocaml/preprocess/parser_raw.mly"
+                    ( not_expecting _loc "extension"; None )
+# 16468 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2586 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
+    )
+# 16480 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2576 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 16486 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Ast_helper.let_bindings) = 
+# 2577 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( addlb _1 _2 )
+# 16518 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = 
+# 2192 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 16543 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.core_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2194 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_constraint(_1, _3) )
+# 16583 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 16592 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2195 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 16598 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = exp;
+          MenhirLib.EngineTypes.startp = _startpos_exp_;
+          MenhirLib.EngineTypes.endp = _endpos_exp_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let exp : (Parsetree.expression) = Obj.magic exp in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_exp_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = let pat =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2535 "src/ocaml/preprocess/parser_raw.mly"
+              ( mkpatvar ~loc:_sloc _1 )
+# 16634 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2603 "src/ocaml/preprocess/parser_raw.mly"
+      ( (pat, exp) )
+# 16640 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = exp;
+          MenhirLib.EngineTypes.startp = _startpos_exp_;
+          MenhirLib.EngineTypes.endp = _endpos_exp_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = typ;
+              MenhirLib.EngineTypes.startp = _startpos_typ_;
+              MenhirLib.EngineTypes.endp = _endpos_typ_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = pat;
+                  MenhirLib.EngineTypes.startp = _startpos_pat_;
+                  MenhirLib.EngineTypes.endp = _endpos_pat_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let exp : (Parsetree.expression) = Obj.magic exp in
+        let _4 : unit = Obj.magic _4 in
+        let typ : (Parsetree.core_type) = Obj.magic typ in
+        let _2 : unit = Obj.magic _2 in
+        let pat : (Parsetree.pattern) = Obj.magic pat in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_pat_ in
+        let _endpos = _endpos_exp_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = 
+# 2605 "src/ocaml/preprocess/parser_raw.mly"
+      ( let loc = (_startpos_pat_, _endpos_typ_) in
+        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
+# 16694 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = exp;
+          MenhirLib.EngineTypes.startp = _startpos_exp_;
+          MenhirLib.EngineTypes.endp = _endpos_exp_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = pat;
+              MenhirLib.EngineTypes.startp = _startpos_pat_;
+              MenhirLib.EngineTypes.endp = _endpos_pat_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let exp : (Parsetree.expression) = Obj.magic exp in
+        let _2 : unit = Obj.magic _2 in
+        let pat : (Parsetree.pattern) = Obj.magic pat in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_pat_ in
+        let _endpos = _endpos_exp_ in
+        let _v : (Parsetree.pattern * Parsetree.expression) = 
+# 2608 "src/ocaml/preprocess/parser_raw.mly"
+      ( (pat, exp) )
+# 16733 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = body;
+          MenhirLib.EngineTypes.startp = _startpos_body_;
+          MenhirLib.EngineTypes.endp = _endpos_body_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_body_ in
+        let _endpos = _endpos_body_ in
+        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
+# 2612 "src/ocaml/preprocess/parser_raw.mly"
+      ( let let_pat, let_exp = body in
+        let_pat, let_exp, [] )
+# 16759 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = body;
+          MenhirLib.EngineTypes.startp = _startpos_body_;
+          MenhirLib.EngineTypes.endp = _endpos_body_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = bindings;
+              MenhirLib.EngineTypes.startp = _startpos_bindings_;
+              MenhirLib.EngineTypes.endp = _endpos_bindings_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
+        let _1 : (
+# 701 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 16793 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_bindings_ in
+        let _endpos = _endpos_body_ in
+        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = let pbop_op =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 16806 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_body_ in
+        let _symbolstartpos = _startpos_bindings_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2615 "src/ocaml/preprocess/parser_raw.mly"
+      ( let let_pat, let_exp, rev_ands = bindings in
+        let pbop_pat, pbop_exp = body in
+        let pbop_loc = make_loc _sloc in
+        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
+        let_pat, let_exp, and_ :: rev_ands )
+# 16819 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.class_declaration list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 16837 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = body;
+              MenhirLib.EngineTypes.startp = _startpos_body_;
+              MenhirLib.EngineTypes.endp = _endpos_body_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = params;
+                  MenhirLib.EngineTypes.startp = _startpos_params_;
+                  MenhirLib.EngineTypes.endp = _endpos_params_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = virt;
+                    MenhirLib.EngineTypes.startp = _startpos_virt_;
+                    MenhirLib.EngineTypes.endp = _endpos_virt_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.class_expr) = Obj.magic body in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 16903 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_declaration list) = let x =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16918 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let id =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 16930 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 16938 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 1788 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    let text = symbol_text _symbolstartpos in
+    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
+  )
+# 16953 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 16959 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.class_description list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 16977 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = cty;
+              MenhirLib.EngineTypes.startp = _startpos_cty_;
+              MenhirLib.EngineTypes.endp = _endpos_cty_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _6;
+                MenhirLib.EngineTypes.startp = _startpos__6_;
+                MenhirLib.EngineTypes.endp = _endpos__6_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = virt;
+                      MenhirLib.EngineTypes.startp = _startpos_virt_;
+                      MenhirLib.EngineTypes.endp = _endpos_virt_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.class_description list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let cty : (Parsetree.class_type) = Obj.magic cty in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 17050 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_description list) = let x =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17065 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let id =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17077 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17085 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2087 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      let text = symbol_text _symbolstartpos in
+      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
+    )
+# 17100 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17106 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.class_type_declaration list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17124 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = csig;
+              MenhirLib.EngineTypes.startp = _startpos_csig_;
+              MenhirLib.EngineTypes.endp = _endpos_csig_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _6;
+                MenhirLib.EngineTypes.startp = _startpos__6_;
+                MenhirLib.EngineTypes.endp = _endpos__6_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = virt;
+                      MenhirLib.EngineTypes.startp = _startpos_virt_;
+                      MenhirLib.EngineTypes.endp = _endpos_virt_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let csig : (Parsetree.class_type) = Obj.magic csig in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 17197 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_type_declaration list) = let x =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17212 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let id =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17224 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17232 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2126 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      let text = symbol_text _symbolstartpos in
+      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
+    )
+# 17247 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17253 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.module_binding list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17271 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = body;
+              MenhirLib.EngineTypes.startp = _startpos_body_;
+              MenhirLib.EngineTypes.endp = _endpos_body_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.module_binding list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.module_expr) = Obj.magic body in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.module_binding list) = let x =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17334 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let name =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17346 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17354 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 1464 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let loc = make_loc _sloc in
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs _sloc in
+    let text = symbol_text _symbolstartpos in
+    Mb.mk name body ~attrs ~loc ~text ~docs
+  )
+# 17369 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17375 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.module_declaration list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17393 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = mty;
+              MenhirLib.EngineTypes.startp = _startpos_mty_;
+              MenhirLib.EngineTypes.endp = _endpos_mty_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.module_declaration list) = let x =
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17463 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let name =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17475 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17483 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 1746 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs _sloc in
+    let loc = make_loc _sloc in
+    let text = symbol_text _symbolstartpos in
+    Md.mk name mty ~attrs ~loc ~text ~docs
+  )
+# 17498 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17504 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.attributes) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17522 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = x;
+            MenhirLib.EngineTypes.startp = _startpos_x_;
+            MenhirLib.EngineTypes.endp = _endpos_x_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.attributes) = Obj.magic xs in
+        let x : (Parsetree.attribute) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.attributes) = 
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17554 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.type_declaration list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17572 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = kind_priv_manifest;
+                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
+                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
+        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 17639 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.type_declaration list) = let x =
+          let xs = xs_inlined1 in
+          let attrs2 =
+            let _1 = _1_inlined3 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17654 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined3_ in
+          let cstrs =
+            let _1 =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 17663 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 17668 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17674 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let id =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17685 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17693 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2999 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let text = symbol_text _symbolstartpos in
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
+    )
+# 17709 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17715 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.type_declaration list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17733 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined4;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined3;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = params;
+                      MenhirLib.EngineTypes.startp = _startpos_params_;
+                      MenhirLib.EngineTypes.endp = _endpos_params_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
+        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
+        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 17807 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.type_declaration list) = let x =
+          let xs = xs_inlined1 in
+          let attrs2 =
+            let _1 = _1_inlined4 in
+            
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17822 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_attrs2_ = _endpos__1_inlined4_ in
+          let cstrs =
+            let _1 =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 17831 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 17836 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17842 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let kind_priv_manifest =
+            let _1 = _1_inlined3 in
+            
+# 3045 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 17850 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let id =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 17861 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let attrs1 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 17869 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_attrs2_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2999 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let text = symbol_text _symbolstartpos in
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
+    )
+# 17885 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17891 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.attributes) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17909 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = x;
+            MenhirLib.EngineTypes.startp = _startpos_x_;
+            MenhirLib.EngineTypes.endp = _endpos_x_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.attributes) = Obj.magic xs in
+        let x : (Parsetree.attribute) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.attributes) = 
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 17941 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.signature_item list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 17959 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.signature_item list list) = let x =
+          let _1 =
+            let _startpos = _startpos__1_ in
+            
+# 894 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_sig _startpos )
+# 17994 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1606 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18000 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18006 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
+        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.signature_item list list) = let x =
+          let _1 =
+            let _startpos = _startpos__1_ in
+            
+# 892 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_sig _startpos @ [_1] )
+# 18041 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1606 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18047 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18053 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.structure_item list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 18071 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.structure_item list list) = let x =
+          let _1 =
+            let ys =
+              let items = 
+# 954 "src/ocaml/preprocess/parser_raw.mly"
+    ( [] )
+# 18106 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1348 "src/ocaml/preprocess/parser_raw.mly"
+    ( items )
+# 18111 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let xs =
+              let _startpos = _startpos__1_ in
+              
+# 890 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos )
+# 18119 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 18125 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1364 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18131 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18137 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = e;
+              MenhirLib.EngineTypes.startp = _startpos_e_;
+              MenhirLib.EngineTypes.endp = _endpos_e_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.structure_item list list) = let x =
+          let _1 =
+            let ys =
+              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
+              let items =
+                let x =
+                  let _1 =
+                    let _1 =
+                      let attrs = 
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 18191 "src/ocaml/preprocess/parser_raw.ml"
+                       in
+                      
+# 1355 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstrexp e attrs )
+# 18196 "src/ocaml/preprocess/parser_raw.ml"
+                      
+                    in
+                    let _startpos__1_ = _startpos_e_ in
+                    let _startpos = _startpos__1_ in
+                    
+# 888 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos @ [_1] )
+# 18204 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _startpos__1_ = _startpos_e_ in
+                  let _endpos = _endpos__1_ in
+                  let _startpos = _startpos__1_ in
+                  
+# 907 "src/ocaml/preprocess/parser_raw.mly"
+  ( mark_rhs_docs _startpos _endpos;
+    _1 )
+# 18214 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 956 "src/ocaml/preprocess/parser_raw.mly"
+    ( x )
+# 18220 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1348 "src/ocaml/preprocess/parser_raw.mly"
+    ( items )
+# 18226 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let xs =
+              let _startpos = _startpos__1_ in
+              
+# 890 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos )
+# 18234 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 18240 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1364 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18246 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18252 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
+        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.structure_item list list) = let x =
+          let _1 =
+            let _startpos = _startpos__1_ in
+            
+# 888 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos @ [_1] )
+# 18287 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1364 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18293 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18299 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.class_type_field list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 18317 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
+        let _1 : (Parsetree.class_type_field) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_type_field list list) = let x =
+          let _startpos = _startpos__1_ in
+          
+# 902 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_csig _startpos @ [_1] )
+# 18351 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18357 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.class_field list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 18375 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.class_field list list) = Obj.magic xs in
+        let _1 : (Parsetree.class_field) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.class_field list list) = let x =
+          let _startpos = _startpos__1_ in
+          
+# 900 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_cstr _startpos @ [_1] )
+# 18409 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18415 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.structure_item list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 18433 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
+        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.structure_item list list) = let x =
+          let _startpos = _startpos__1_ in
+          
+# 888 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos @ [_1] )
+# 18467 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18473 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.toplevel_phrase list list) = 
+# 211 "<standard.mly>"
+    ( [] )
+# 18491 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.toplevel_phrase list list) = let x =
+          let _1 =
+            let x =
+              let _1 = 
+# 954 "src/ocaml/preprocess/parser_raw.mly"
+    ( [] )
+# 18526 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1184 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 18531 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 183 "<standard.mly>"
+    ( x )
+# 18537 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1196 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18543 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18549 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = e;
+              MenhirLib.EngineTypes.startp = _startpos_e_;
+              MenhirLib.EngineTypes.endp = _endpos_e_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.toplevel_phrase list list) = let x =
+          let _1 =
+            let x =
+              let _1 = _1_inlined1 in
+              let _1 =
+                let x =
+                  let _1 =
+                    let _1 =
+                      let attrs = 
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 18603 "src/ocaml/preprocess/parser_raw.ml"
+                       in
+                      
+# 1355 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstrexp e attrs )
+# 18608 "src/ocaml/preprocess/parser_raw.ml"
+                      
+                    in
+                    
+# 898 "src/ocaml/preprocess/parser_raw.mly"
+  ( Ptop_def [_1] )
+# 18614 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _startpos__1_ = _startpos_e_ in
+                  let _startpos = _startpos__1_ in
+                  
+# 896 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_def _startpos @ [_1] )
+# 18622 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 956 "src/ocaml/preprocess/parser_raw.mly"
+    ( x )
+# 18628 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1184 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 18634 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 183 "<standard.mly>"
+    ( x )
+# 18640 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1196 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18646 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18652 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
+        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.toplevel_phrase list list) = let x =
+          let _1 =
+            let _1 = 
+# 898 "src/ocaml/preprocess/parser_raw.mly"
+  ( Ptop_def [_1] )
+# 18686 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _startpos = _startpos__1_ in
+            
+# 896 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_def _startpos @ [_1] )
+# 18692 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1196 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18698 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18704 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
+        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.toplevel_phrase list list) = let x =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _startpos = _startpos__1_ in
+              
+# 907 "src/ocaml/preprocess/parser_raw.mly"
+  ( mark_rhs_docs _startpos _endpos;
+    _1 )
+# 18742 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos = _startpos__1_ in
+            
+# 896 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_def _startpos @ [_1] )
+# 18749 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 1196 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 18755 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 213 "<standard.mly>"
+    ( x :: xs )
+# 18761 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = opat;
+          MenhirLib.EngineTypes.startp = _startpos_opat_;
+          MenhirLib.EngineTypes.endp = _endpos_opat_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = octy;
+            MenhirLib.EngineTypes.startp = _startpos_octy_;
+            MenhirLib.EngineTypes.endp = _endpos_octy_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let opat : (Parsetree.pattern option) = Obj.magic opat in
+        let octy : (Parsetree.core_type option) = Obj.magic octy in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_opat_ in
+        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
+# 124 "<standard.mly>"
+    ( None )
+# 18800 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 18810 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_opat_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2888 "src/ocaml/preprocess/parser_raw.mly"
+    ( let pat =
+        match opat with
+        | None ->
+            (* No pattern; this is a pun. Desugar it. *)
+            pat_of_label ~loc:_sloc label
+        | Some pat ->
+            pat
+      in
+      label, mkpat_opt_constraint ~loc:_sloc pat octy
+    )
+# 18829 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1123 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x], None )
+# 18835 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = opat;
+            MenhirLib.EngineTypes.startp = _startpos_opat_;
+            MenhirLib.EngineTypes.endp = _endpos_opat_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = octy;
+              MenhirLib.EngineTypes.startp = _startpos_octy_;
+              MenhirLib.EngineTypes.endp = _endpos_octy_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let x : unit = Obj.magic x in
+        let opat : (Parsetree.pattern option) = Obj.magic opat in
+        let octy : (Parsetree.core_type option) = Obj.magic octy in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
+# 126 "<standard.mly>"
+    ( Some x )
+# 18881 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 18891 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_opat_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2888 "src/ocaml/preprocess/parser_raw.mly"
+    ( let pat =
+        match opat with
+        | None ->
+            (* No pattern; this is a pun. Desugar it. *)
+            pat_of_label ~loc:_sloc label
+        | Some pat ->
+            pat
+      in
+      label, mkpat_opt_constraint ~loc:_sloc pat octy
+    )
+# 18910 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1123 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x], None )
+# 18916 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = y;
+            MenhirLib.EngineTypes.startp = _startpos_y_;
+            MenhirLib.EngineTypes.endp = _endpos_y_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = opat;
+                MenhirLib.EngineTypes.startp = _startpos_opat_;
+                MenhirLib.EngineTypes.endp = _endpos_opat_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = octy;
+                  MenhirLib.EngineTypes.startp = _startpos_octy_;
+                  MenhirLib.EngineTypes.endp = _endpos_octy_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (unit option) = Obj.magic _4 in
+        let y : unit = Obj.magic y in
+        let _2 : unit = Obj.magic _2 in
+        let opat : (Parsetree.pattern option) = Obj.magic opat in
+        let octy : (Parsetree.core_type option) = Obj.magic octy in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 18981 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_opat_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2888 "src/ocaml/preprocess/parser_raw.mly"
+    ( let pat =
+        match opat with
+        | None ->
+            (* No pattern; this is a pun. Desugar it. *)
+            pat_of_label ~loc:_sloc label
+        | Some pat ->
+            pat
+      in
+      label, mkpat_opt_constraint ~loc:_sloc pat octy
+    )
+# 19000 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1125 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x], Some y )
+# 19006 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = tail;
+          MenhirLib.EngineTypes.startp = _startpos_tail_;
+          MenhirLib.EngineTypes.endp = _endpos_tail_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = opat;
+              MenhirLib.EngineTypes.startp = _startpos_opat_;
+              MenhirLib.EngineTypes.endp = _endpos_opat_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = octy;
+                MenhirLib.EngineTypes.startp = _startpos_octy_;
+                MenhirLib.EngineTypes.endp = _endpos_octy_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
+        let _2 : unit = Obj.magic _2 in
+        let opat : (Parsetree.pattern option) = Obj.magic opat in
+        let octy : (Parsetree.core_type option) = Obj.magic octy in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_tail_ in
+        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 19064 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_opat_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2888 "src/ocaml/preprocess/parser_raw.mly"
+    ( let pat =
+        match opat with
+        | None ->
+            (* No pattern; this is a pun. Desugar it. *)
+            pat_of_label ~loc:_sloc label
+        | Some pat ->
+            pat
+      in
+      label, mkpat_opt_constraint ~loc:_sloc pat octy
+    )
+# 19083 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1129 "src/ocaml/preprocess/parser_raw.mly"
+    ( let xs, y = tail in
+      x :: xs, y )
+# 19090 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
+        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Ast_helper.let_bindings) = let _5 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19152 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos__1_inlined3_ in
+        let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19163 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 19169 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _startpos = _startpos__1_ in
+        let _loc__4_ = (_startpos__4_, _endpos__4_) in
+        let _loc = (_startpos, _endpos) in
+        
+# 3887 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (ext, attr) = _2 in
+        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
+# 19180 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Ast_helper.let_bindings) = 
+# 3891 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 19205 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Ast_helper.let_bindings) = 
+# 3892 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( addlb _1 _2 )
+# 19237 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.case) = 
+# 2641 "src/ocaml/preprocess/parser_raw.mly"
+      ( Exp.case _1 (merloc _endpos__2_ _3) )
+# 19276 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.case) = 
+# 2643 "src/ocaml/preprocess/parser_raw.mly"
+      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
+# 19329 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
+        
+# 2645 "src/ocaml/preprocess/parser_raw.mly"
+      ( Exp.case _1 (merloc _endpos__2_
+                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
+# 19370 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = tail;
+          MenhirLib.EngineTypes.startp = _startpos_tail_;
+          MenhirLib.EngineTypes.endp = _endpos_tail_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 19433 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_tail_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _6 =
+            let _1 = _1_inlined3 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19444 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__6_ = _endpos__1_inlined3_ in
+          let _4 =
+            let _1 = _1_inlined2 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19453 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__4_ = _endpos__1_inlined2_ in
+          let _3 =
+            let _1 = _1_inlined1 in
+            
+# 3291 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19462 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _1 =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 19469 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 19477 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__6_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3501 "src/ocaml/preprocess/parser_raw.mly"
+    ( let info =
+        match rhs_info _endpos__4_ with
+        | Some _ as info_before_semi -> info_before_semi
+        | None -> symbol_info _endpos
+      in
+      let attrs = add_info_attrs info (_4 @ _6) in
+      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
+# 19492 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3482 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (f, c) = tail in (head :: f, c) )
+# 19498 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = tail;
+          MenhirLib.EngineTypes.startp = _startpos_tail_;
+          MenhirLib.EngineTypes.endp = _endpos_tail_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = ty;
+              MenhirLib.EngineTypes.startp = _startpos_ty_;
+              MenhirLib.EngineTypes.endp = _endpos_ty_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
+        let _2 : unit = Obj.magic _2 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_tail_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _endpos = _endpos_ty_ in
+          let _symbolstartpos = _startpos_ty_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3512 "src/ocaml/preprocess/parser_raw.mly"
+    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
+# 19541 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3482 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (f, c) = tail in (head :: f, c) )
+# 19547 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 19603 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _6 =
+            let _1 = _1_inlined3 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19614 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__6_ = _endpos__1_inlined3_ in
+          let _4 =
+            let _1 = _1_inlined2 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19623 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__4_ = _endpos__1_inlined2_ in
+          let _3 =
+            let _1 = _1_inlined1 in
+            
+# 3291 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19632 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _1 =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 19639 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 19647 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__6_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3501 "src/ocaml/preprocess/parser_raw.mly"
+    ( let info =
+        match rhs_info _endpos__4_ with
+        | Some _ as info_before_semi -> info_before_semi
+        | None -> symbol_info _endpos
+      in
+      let attrs = add_info_attrs info (_4 @ _6) in
+      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
+# 19662 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3485 "src/ocaml/preprocess/parser_raw.mly"
+      ( [head], Closed )
+# 19668 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = ty;
+            MenhirLib.EngineTypes.startp = _startpos_ty_;
+            MenhirLib.EngineTypes.endp = _endpos_ty_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _endpos = _endpos_ty_ in
+          let _symbolstartpos = _startpos_ty_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3512 "src/ocaml/preprocess/parser_raw.mly"
+    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
+# 19704 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3485 "src/ocaml/preprocess/parser_raw.mly"
+      ( [head], Closed )
+# 19710 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 19752 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _4 =
+            let _1 = _1_inlined2 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19763 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__4_ = _endpos__1_inlined2_ in
+          let _3 =
+            let _1 = _1_inlined1 in
+            
+# 3291 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19772 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _1 =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 19779 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 19787 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__4_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3494 "src/ocaml/preprocess/parser_raw.mly"
+    ( let info = symbol_info _endpos in
+      let attrs = add_info_attrs info _4 in
+      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
+# 19798 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3488 "src/ocaml/preprocess/parser_raw.mly"
+      ( [head], Closed )
+# 19804 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_ty_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
+          let _endpos = _endpos_ty_ in
+          let _symbolstartpos = _startpos_ty_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 3512 "src/ocaml/preprocess/parser_raw.mly"
+    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
+# 19833 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3488 "src/ocaml/preprocess/parser_raw.mly"
+      ( [head], Closed )
+# 19839 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
+# 3490 "src/ocaml/preprocess/parser_raw.mly"
+      ( [], Open )
+# 19864 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = private_;
+                MenhirLib.EngineTypes.startp = _startpos_private__;
+                MenhirLib.EngineTypes.endp = _endpos_private__;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 19911 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let ty =
+          let _1 = _1_inlined2 in
+          
+# 3287 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19924 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let label =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 19932 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 19940 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 19946 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 = 
+# 3745 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 19951 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1932 "src/ocaml/preprocess/parser_raw.mly"
+      ( (label, private_, Cfk_virtual ty), attrs )
+# 19956 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 19996 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20009 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20017 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20023 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 20028 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1934 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e = _5 in
+        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
+        (_4, _3,
+        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
+# 20036 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20082 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20096 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20104 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20112 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _1 = 
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 20118 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1934 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e = _5 in
+        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
+        (_4, _3,
+        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
+# 20126 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _8;
+          MenhirLib.EngineTypes.startp = _startpos__8_;
+          MenhirLib.EngineTypes.endp = _endpos__8_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _7;
+            MenhirLib.EngineTypes.startp = _startpos__7_;
+            MenhirLib.EngineTypes.endp = _endpos__7_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _5;
+                MenhirLib.EngineTypes.startp = _startpos__5_;
+                MenhirLib.EngineTypes.endp = _endpos__5_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _3;
+                    MenhirLib.EngineTypes.startp = _startpos__3_;
+                    MenhirLib.EngineTypes.endp = _endpos__3_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _8 : (Parsetree.expression) = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20187 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__8_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _6 =
+          let _1 = _1_inlined2 in
+          
+# 3287 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20200 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__6_ = _startpos__1_inlined2_ in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20209 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20217 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20223 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 20228 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1940 "src/ocaml/preprocess/parser_raw.mly"
+      ( let poly_exp =
+          let loc = (_startpos__6_, _endpos__8_) in
+          ghexp ~loc (Pexp_poly(_8, Some _6)) in
+        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
+# 20236 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _8;
+          MenhirLib.EngineTypes.startp = _startpos__8_;
+          MenhirLib.EngineTypes.endp = _endpos__8_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _7;
+            MenhirLib.EngineTypes.startp = _startpos__7_;
+            MenhirLib.EngineTypes.endp = _endpos__7_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _5;
+                MenhirLib.EngineTypes.startp = _startpos__5_;
+                MenhirLib.EngineTypes.endp = _endpos__5_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _3;
+                    MenhirLib.EngineTypes.startp = _startpos__3_;
+                    MenhirLib.EngineTypes.endp = _endpos__3_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _8 : (Parsetree.expression) = Obj.magic _8 in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20303 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__8_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _6 =
+          let _1 = _1_inlined3 in
+          
+# 3287 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20317 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__6_ = _startpos__1_inlined3_ in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20326 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20334 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20342 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _1 = 
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 20348 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1940 "src/ocaml/preprocess/parser_raw.mly"
+      ( let poly_exp =
+          let loc = (_startpos__6_, _endpos__8_) in
+          ghexp ~loc (Pexp_poly(_8, Some _6)) in
+        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
+# 20356 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _11;
+          MenhirLib.EngineTypes.startp = _startpos__11_;
+          MenhirLib.EngineTypes.endp = _endpos__11_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _10;
+            MenhirLib.EngineTypes.startp = _startpos__10_;
+            MenhirLib.EngineTypes.endp = _endpos__10_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _9;
+              MenhirLib.EngineTypes.startp = _startpos__9_;
+              MenhirLib.EngineTypes.endp = _endpos__9_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _8;
+                MenhirLib.EngineTypes.startp = _startpos__8_;
+                MenhirLib.EngineTypes.endp = _endpos__8_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = xs;
+                  MenhirLib.EngineTypes.startp = _startpos_xs_;
+                  MenhirLib.EngineTypes.endp = _endpos_xs_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _6;
+                    MenhirLib.EngineTypes.startp = _startpos__6_;
+                    MenhirLib.EngineTypes.endp = _endpos__6_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _5;
+                      MenhirLib.EngineTypes.startp = _startpos__5_;
+                      MenhirLib.EngineTypes.endp = _endpos__5_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = _3;
+                          MenhirLib.EngineTypes.startp = _startpos__3_;
+                          MenhirLib.EngineTypes.endp = _endpos__3_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _11 : (Parsetree.expression) = Obj.magic _11 in
+        let _10 : unit = Obj.magic _10 in
+        let _9 : (Parsetree.core_type) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20438 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__11_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _7 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 20449 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _startpos__7_ = _startpos_xs_ in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20457 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20465 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__4_ = _startpos__1_inlined1_ in
+        let _2 = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20472 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
+        let _1 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 20478 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
+        let _endpos = _endpos__11_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          if _startpos__2_ != _endpos__2_ then
+            _startpos__2_
+          else
+            if _startpos__3_ != _endpos__3_ then
+              _startpos__3_
+            else
+              _startpos__4_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1946 "src/ocaml/preprocess/parser_raw.mly"
+      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
+        let poly_exp =
+          let exp, poly =
+            (* it seems odd to use the global ~loc here while poly_exp_loc
+               is tighter, but this is what ocamlyacc does;
+               TODO improve parser.mly *)
+            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
+          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
+        (_4, _3,
+        Cfk_concrete (_1, poly_exp)), _2 )
+# 20505 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _11;
+          MenhirLib.EngineTypes.startp = _startpos__11_;
+          MenhirLib.EngineTypes.endp = _endpos__11_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _10;
+            MenhirLib.EngineTypes.startp = _startpos__10_;
+            MenhirLib.EngineTypes.endp = _endpos__10_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _9;
+              MenhirLib.EngineTypes.startp = _startpos__9_;
+              MenhirLib.EngineTypes.endp = _endpos__9_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _8;
+                MenhirLib.EngineTypes.startp = _startpos__8_;
+                MenhirLib.EngineTypes.endp = _endpos__8_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = xs;
+                  MenhirLib.EngineTypes.startp = _startpos_xs_;
+                  MenhirLib.EngineTypes.endp = _endpos_xs_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _6;
+                    MenhirLib.EngineTypes.startp = _startpos__6_;
+                    MenhirLib.EngineTypes.endp = _endpos__6_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _5;
+                      MenhirLib.EngineTypes.startp = _startpos__5_;
+                      MenhirLib.EngineTypes.endp = _endpos__5_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined2;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = _3;
+                          MenhirLib.EngineTypes.startp = _startpos__3_;
+                          MenhirLib.EngineTypes.endp = _endpos__3_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _;
+                            MenhirLib.EngineTypes.semv = _1_inlined1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                            MenhirLib.EngineTypes.next = {
+                              MenhirLib.EngineTypes.state = _menhir_s;
+                              MenhirLib.EngineTypes.semv = _1;
+                              MenhirLib.EngineTypes.startp = _startpos__1_;
+                              MenhirLib.EngineTypes.endp = _endpos__1_;
+                              MenhirLib.EngineTypes.next = _menhir_stack;
+                            };
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _11 : (Parsetree.expression) = Obj.magic _11 in
+        let _10 : unit = Obj.magic _10 in
+        let _9 : (Parsetree.core_type) = Obj.magic _9 in
+        let _8 : unit = Obj.magic _8 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20593 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__11_ in
+        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _7 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 20605 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _startpos__7_ = _startpos_xs_ in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 20613 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 20621 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__4_ = _startpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20630 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
+        let _1 = 
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 20637 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__11_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          if _startpos__2_ != _endpos__2_ then
+            _startpos__2_
+          else
+            if _startpos__3_ != _endpos__3_ then
+              _startpos__3_
+            else
+              _startpos__4_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1946 "src/ocaml/preprocess/parser_raw.mly"
+      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
+        let poly_exp =
+          let exp, poly =
+            (* it seems odd to use the global ~loc here while poly_exp_loc
+               is tighter, but this is what ocamlyacc does;
+               TODO improve parser.mly *)
+            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
+          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
+        (_4, _3,
+        Cfk_concrete (_1, poly_exp)), _2 )
+# 20663 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20684 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3625 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 20692 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20725 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3626 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 20735 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Longident.t) = let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3628 "src/ocaml/preprocess/parser_raw.mly"
+      ( lapply ~loc:_sloc _1 _3 )
+# 20784 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20805 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3621 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 20813 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 20846 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3622 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 20856 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = me;
+          MenhirLib.EngineTypes.startp = _startpos_me_;
+          MenhirLib.EngineTypes.endp = _endpos_me_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_me_ in
+        let _v : (Parsetree.module_expr) = 
+# 1424 "src/ocaml/preprocess/parser_raw.mly"
+      ( me )
+# 20888 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = me;
+          MenhirLib.EngineTypes.startp = _startpos_me_;
+          MenhirLib.EngineTypes.endp = _endpos_me_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = mty;
+              MenhirLib.EngineTypes.startp = _startpos_mty_;
+              MenhirLib.EngineTypes.endp = _endpos_mty_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _3 : unit = Obj.magic _3 in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_me_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 = 
+# 1427 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmod_constraint(me, mty) )
+# 20935 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos_me_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 20944 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1430 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20950 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = body;
+          MenhirLib.EngineTypes.startp = _startpos_body_;
+          MenhirLib.EngineTypes.endp = _endpos_body_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = arg;
+            MenhirLib.EngineTypes.startp = _startpos_arg_;
+            MenhirLib.EngineTypes.endp = _endpos_arg_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let body : (Parsetree.module_expr) = Obj.magic body in
+        let arg : (Parsetree.functor_parameter) = Obj.magic arg in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_arg_ in
+        let _endpos = _endpos_body_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 = 
+# 1429 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmod_functor(arg, body) )
+# 20983 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 20992 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1430 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 20998 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = mty;
+          MenhirLib.EngineTypes.startp = _startpos_mty_;
+          MenhirLib.EngineTypes.endp = _endpos_mty_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_mty_ in
+        let _v : (Parsetree.module_type) = 
+# 1671 "src/ocaml/preprocess/parser_raw.mly"
+      ( mty )
+# 21030 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = body;
+          MenhirLib.EngineTypes.startp = _startpos_body_;
+          MenhirLib.EngineTypes.endp = _endpos_body_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = arg;
+            MenhirLib.EngineTypes.startp = _startpos_arg_;
+            MenhirLib.EngineTypes.endp = _endpos_arg_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let body : (Parsetree.module_type) = Obj.magic body in
+        let arg : (Parsetree.functor_parameter) = Obj.magic arg in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_arg_ in
+        let _endpos = _endpos_body_ in
+        let _v : (Parsetree.module_type) = let _1 =
+          let _1 = 
+# 1674 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmty_functor(arg, body) )
+# 21063 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 929 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmty ~loc:_sloc _1 )
+# 21072 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1676 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21078 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = s;
+            MenhirLib.EngineTypes.startp = _startpos_s_;
+            MenhirLib.EngineTypes.endp = _endpos_s_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let s : (Parsetree.structure) = Obj.magic s in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.module_expr) = let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21126 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1255 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
+# 21135 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = me;
+          MenhirLib.EngineTypes.startp = _startpos_me_;
+          MenhirLib.EngineTypes.endp = _endpos_me_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = args;
+              MenhirLib.EngineTypes.startp = _startpos_args_;
+              MenhirLib.EngineTypes.endp = _endpos_args_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _4 : unit = Obj.magic _4 in
+        let args : (Parsetree.functor_parameter list) = Obj.magic args in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_me_ in
+        let _v : (Parsetree.module_expr) = let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21190 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_me_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1261 "src/ocaml/preprocess/parser_raw.mly"
+      ( wrap_mod_attrs ~loc:_sloc attrs (
+          List.fold_left (fun acc arg ->
+            mkmod ~loc:_sloc (Pmod_functor (arg, acc))
+          ) me args
+        ) )
+# 21203 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = me;
+          MenhirLib.EngineTypes.startp = _startpos_me_;
+          MenhirLib.EngineTypes.endp = _endpos_me_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_me_ in
+        let _endpos = _endpos_me_ in
+        let _v : (Parsetree.module_expr) = 
+# 1267 "src/ocaml/preprocess/parser_raw.mly"
+      ( me )
+# 21228 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = attr;
+          MenhirLib.EngineTypes.startp = _startpos_attr_;
+          MenhirLib.EngineTypes.endp = _endpos_attr_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = me;
+            MenhirLib.EngineTypes.startp = _startpos_me_;
+            MenhirLib.EngineTypes.endp = _endpos_me_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let attr : (Parsetree.attribute) = Obj.magic attr in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_me_ in
+        let _endpos = _endpos_attr_ in
+        let _v : (Parsetree.module_expr) = 
+# 1269 "src/ocaml/preprocess/parser_raw.mly"
+      ( Mod.attr me attr )
+# 21260 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 =
+            let x =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 21291 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1273 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmod_ident x )
+# 21297 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 21306 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1285 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21312 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = me2;
+          MenhirLib.EngineTypes.startp = _startpos_me2_;
+          MenhirLib.EngineTypes.endp = _endpos_me2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = me1;
+            MenhirLib.EngineTypes.startp = _startpos_me1_;
+            MenhirLib.EngineTypes.endp = _endpos_me1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let me2 : (Parsetree.module_expr) = Obj.magic me2 in
+        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_me1_ in
+        let _endpos = _endpos_me2_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 = 
+# 1276 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmod_apply(me1, me2) )
+# 21345 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_me2_, _startpos_me1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 21354 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1285 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21360 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = me1;
+              MenhirLib.EngineTypes.startp = _startpos_me1_;
+              MenhirLib.EngineTypes.endp = _endpos_me1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_me1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 =
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos_me1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 1279 "src/ocaml/preprocess/parser_raw.mly"
+        ( (* TODO review mkmod location *)
+          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
+# 21405 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_me1_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 21415 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1285 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21421 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = ex;
+          MenhirLib.EngineTypes.startp = _startpos_ex_;
+          MenhirLib.EngineTypes.endp = _endpos_ex_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let ex : (Parsetree.extension) = Obj.magic ex in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ex_ in
+        let _endpos = _endpos_ex_ in
+        let _v : (Parsetree.module_expr) = let _1 =
+          let _1 = 
+# 1283 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmod_extension ex )
+# 21447 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_ex_, _startpos_ex_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 927 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmod ~loc:_sloc _1 )
+# 21456 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1285 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21462 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 21483 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (string option) = 
+# 1238 "src/ocaml/preprocess/parser_raw.mly"
+      ( Some x )
+# 21491 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string option) = 
+# 1241 "src/ocaml/preprocess/parser_raw.mly"
+      ( None )
+# 21516 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = ext;
+                    MenhirLib.EngineTypes.startp = _startpos_ext_;
+                    MenhirLib.EngineTypes.endp = _endpos_ext_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 21576 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.module_substitution * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21589 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined4_ in
+        let body =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 21601 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let uid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 21612 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21620 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1706 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Ms.mk uid body ~attrs ~loc ~docs, ext
+  )
+# 21634 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = s;
+            MenhirLib.EngineTypes.startp = _startpos_s_;
+            MenhirLib.EngineTypes.endp = _endpos_s_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let s : (Parsetree.signature) = Obj.magic s in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.module_type) = let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21682 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1555 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
+# 21691 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = mty;
+          MenhirLib.EngineTypes.startp = _startpos_mty_;
+          MenhirLib.EngineTypes.endp = _endpos_mty_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = args;
+              MenhirLib.EngineTypes.startp = _startpos_args_;
+              MenhirLib.EngineTypes.endp = _endpos_args_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _4 : unit = Obj.magic _4 in
+        let args : (Parsetree.functor_parameter list) = Obj.magic args in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_mty_ in
+        let _v : (Parsetree.module_type) = let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21746 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_mty_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1563 "src/ocaml/preprocess/parser_raw.mly"
+      ( wrap_mty_attrs ~loc:_sloc attrs (
+          List.fold_left (fun acc arg ->
+            mkmty ~loc:_sloc (Pmty_functor (arg, acc))
+          ) mty args
+        ) )
+# 21759 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_type) = let _4 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21814 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1569 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
+# 21823 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.module_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.module_type) = 
+# 1571 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 21862 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.module_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.module_type) = 
+# 1577 "src/ocaml/preprocess/parser_raw.mly"
+      ( Mty.attr _1 _2 )
+# 21894 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.module_type) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 21925 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1580 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmty_ident _1 )
+# 21931 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 929 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmty ~loc:_sloc _1 )
+# 21940 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1591 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 21946 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.module_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.module_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.module_type) = let _1 =
+          let _1 = 
+# 1583 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmty_functor(Named (mknoloc None, _1), _3) )
+# 21986 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 929 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmty ~loc:_sloc _1 )
+# 21995 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1591 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22001 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.module_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.module_type) = let _1 =
+          let _1 =
+            let _3 =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 22043 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 22048 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1585 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmty_with(_1, _3) )
+# 22054 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_xs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 929 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmty ~loc:_sloc _1 )
+# 22064 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1591 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22070 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.module_type) = let _1 =
+          let _1 = 
+# 1589 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pmty_extension _1 )
+# 22096 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 929 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkmty ~loc:_sloc _1 )
+# 22104 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1591 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22110 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = typ;
+            MenhirLib.EngineTypes.startp = _startpos_typ_;
+            MenhirLib.EngineTypes.endp = _endpos_typ_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = ext;
+                  MenhirLib.EngineTypes.startp = _startpos_ext_;
+                  MenhirLib.EngineTypes.endp = _endpos_ext_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let typ : (Parsetree.module_type option) = Obj.magic typ in
+        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.module_type_declaration * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22179 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 22191 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22199 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1501 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
+  )
+# 22213 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3635 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 22238 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3636 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 22277 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.mutable_flag) = 
+# 3705 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Immutable )
+# 22295 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.mutable_flag) = 
+# 3706 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Mutable )
+# 22320 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
+# 3714 "src/ocaml/preprocess/parser_raw.mly"
+      ( Immutable, Concrete )
+# 22338 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
+# 3716 "src/ocaml/preprocess/parser_raw.mly"
+      ( Mutable, Concrete )
+# 22363 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
+# 3718 "src/ocaml/preprocess/parser_raw.mly"
+      ( Immutable, Virtual )
+# 22388 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
+# 3721 "src/ocaml/preprocess/parser_raw.mly"
+      ( Mutable, Virtual )
+# 22420 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
+# 3721 "src/ocaml/preprocess/parser_raw.mly"
+      ( Mutable, Virtual )
+# 22452 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (string) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (string) = 
+# 3678 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _2 )
+# 22484 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 22505 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string Location.loc list) = let x =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 22517 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 221 "<standard.mly>"
+    ( [ x ] )
+# 22523 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 22551 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (string Location.loc list) = let x =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 22563 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 223 "<standard.mly>"
+    ( x :: xs )
+# 22569 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = s;
+          MenhirLib.EngineTypes.startp = _startpos_s_;
+          MenhirLib.EngineTypes.endp = _endpos_s_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let s : (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 22590 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic s in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_s_ in
+        let _endpos = _endpos_s_ in
+        let _v : (string list) = let x = 
+# 3674 "src/ocaml/preprocess/parser_raw.mly"
+    ( fst s )
+# 22598 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 221 "<standard.mly>"
+    ( [ x ] )
+# 22603 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = s;
+            MenhirLib.EngineTypes.startp = _startpos_s_;
+            MenhirLib.EngineTypes.endp = _endpos_s_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let xs : (string list) = Obj.magic xs in
+        let s : (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 22631 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic s in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_s_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (string list) = let x = 
+# 3674 "src/ocaml/preprocess/parser_raw.mly"
+    ( fst s )
+# 22639 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 223 "<standard.mly>"
+    ( x :: xs )
+# 22644 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_ty_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 22669 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3019 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_abstract, priv, Some ty) )
+# 22674 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_ty_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 22706 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3019 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_abstract, priv, Some ty) )
+# 22711 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = cs;
+          MenhirLib.EngineTypes.startp = _startpos_cs_;
+          MenhirLib.EngineTypes.endp = _endpos_cs_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_cs_ in
+        let _endpos = _endpos_cs_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 22736 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 22742 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22747 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3023 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_variant cs, priv, oty) )
+# 22753 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = cs;
+          MenhirLib.EngineTypes.startp = _startpos_cs_;
+          MenhirLib.EngineTypes.endp = _endpos_cs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_cs_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 22785 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 22791 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22796 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3023 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_variant cs, priv, oty) )
+# 22802 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = cs;
+          MenhirLib.EngineTypes.startp = _startpos_cs_;
+          MenhirLib.EngineTypes.endp = _endpos_cs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x;
+              MenhirLib.EngineTypes.startp = _startpos_x_;
+              MenhirLib.EngineTypes.endp = _endpos_x_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_cs_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 22841 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 22848 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 22853 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22859 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3023 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_variant cs, priv, oty) )
+# 22865 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = cs;
+          MenhirLib.EngineTypes.startp = _startpos_cs_;
+          MenhirLib.EngineTypes.endp = _endpos_cs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = x;
+                MenhirLib.EngineTypes.startp = _startpos_x_;
+                MenhirLib.EngineTypes.endp = _endpos_x_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
+        let _1 : unit = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_cs_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 22911 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 22918 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 22923 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22929 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3023 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_variant cs, priv, oty) )
+# 22935 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__3_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 22960 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 22966 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 22971 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3027 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_open, priv, oty) )
+# 22977 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 23009 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 23015 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23020 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3027 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_open, priv, oty) )
+# 23026 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x;
+              MenhirLib.EngineTypes.startp = _startpos_x_;
+              MenhirLib.EngineTypes.endp = _endpos_x_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 23065 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 23072 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 23077 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23083 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3027 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_open, priv, oty) )
+# 23089 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = x;
+                MenhirLib.EngineTypes.startp = _startpos_x_;
+                MenhirLib.EngineTypes.endp = _endpos_x_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : unit = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 23135 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 23142 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 23147 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23153 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3027 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_open, priv, oty) )
+# 23159 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ls;
+            MenhirLib.EngineTypes.startp = _startpos_ls_;
+            MenhirLib.EngineTypes.endp = _endpos_ls_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
+        let _3 : unit = Obj.magic _3 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__3_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 23198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 23204 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23209 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3031 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_record ls, priv, oty) )
+# 23215 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ls;
+            MenhirLib.EngineTypes.startp = _startpos_ls_;
+            MenhirLib.EngineTypes.endp = _endpos_ls_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 23261 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 23267 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23272 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3031 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_record ls, priv, oty) )
+# 23278 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ls;
+            MenhirLib.EngineTypes.startp = _startpos_ls_;
+            MenhirLib.EngineTypes.endp = _endpos_ls_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = x;
+                  MenhirLib.EngineTypes.startp = _startpos_x_;
+                  MenhirLib.EngineTypes.endp = _endpos_x_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 23331 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 23338 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 23343 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23349 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3031 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_record ls, priv, oty) )
+# 23355 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ls;
+            MenhirLib.EngineTypes.startp = _startpos_ls_;
+            MenhirLib.EngineTypes.endp = _endpos_ls_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = x;
+                    MenhirLib.EngineTypes.startp = _startpos_x_;
+                    MenhirLib.EngineTypes.endp = _endpos_x_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
+        let _3 : unit = Obj.magic _3 in
+        let _1 : unit = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 23415 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let oty =
+          let _1 =
+            let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 23422 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 126 "<standard.mly>"
+    ( Some x )
+# 23427 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3035 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23433 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3031 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_record ls, priv, oty) )
+# 23439 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = me;
+            MenhirLib.EngineTypes.startp = _startpos_me_;
+            MenhirLib.EngineTypes.endp = _endpos_me_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined2 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23494 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined2_ in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23503 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let override = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 23509 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1520 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Opn.mk me ~override ~attrs ~loc ~docs, ext
+  )
+# 23522 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = me;
+            MenhirLib.EngineTypes.startp = _startpos_me_;
+            MenhirLib.EngineTypes.endp = _endpos_me_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23584 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let attrs1 =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23593 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let override =
+          let _1 = _1_inlined1 in
+          
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 23601 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1520 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Opn.mk me ~override ~attrs ~loc ~docs, ext
+  )
+# 23615 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23670 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 23682 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23690 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let override = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 23696 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1535 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Opn.mk id ~override ~attrs ~loc ~docs, ext
+  )
+# 23709 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23771 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined4_ in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 23783 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined2 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 23791 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let override =
+          let _1 = _1_inlined1 in
+          
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 23799 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1535 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Opn.mk id ~override ~attrs ~loc ~docs, ext
+  )
+# 23813 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 742 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23834 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3551 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 23842 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 700 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23863 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3552 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 23871 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 701 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23892 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3553 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 23900 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23942 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (string) = 
+# 3554 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^"(" ^ _3 ^ ")" )
+# 23950 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 23999 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (string) = 
+# 3555 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^ "(" ^ _3 ^ ")<-" )
+# 24007 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24049 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (string) = 
+# 3556 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^"[" ^ _3 ^ "]" )
+# 24057 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24106 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (string) = 
+# 3557 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^ "[" ^ _3 ^ "]<-" )
+# 24114 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24156 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (string) = 
+# 3558 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^"{" ^ _3 ^ "}" )
+# 24164 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24213 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (string) = 
+# 3559 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "."^ _1 ^ "{" ^ _3 ^ "}<-" )
+# 24221 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 753 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24242 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3560 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24250 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3561 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "!" )
+# 24275 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = op;
+          MenhirLib.EngineTypes.startp = _startpos_op_;
+          MenhirLib.EngineTypes.endp = _endpos_op_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let op : (
+# 694 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24296 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_op_ in
+        let _endpos = _endpos_op_ in
+        let _v : (string) = let _1 = 
+# 3565 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 24304 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24309 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = op;
+          MenhirLib.EngineTypes.startp = _startpos_op_;
+          MenhirLib.EngineTypes.endp = _endpos_op_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let op : (
+# 695 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24330 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_op_ in
+        let _endpos = _endpos_op_ in
+        let _v : (string) = let _1 = 
+# 3566 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 24338 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24343 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = op;
+          MenhirLib.EngineTypes.startp = _startpos_op_;
+          MenhirLib.EngineTypes.endp = _endpos_op_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let op : (
+# 696 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24364 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_op_ in
+        let _endpos = _endpos_op_ in
+        let _v : (string) = let _1 = 
+# 3567 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 24372 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24377 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = op;
+          MenhirLib.EngineTypes.startp = _startpos_op_;
+          MenhirLib.EngineTypes.endp = _endpos_op_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let op : (
+# 697 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24398 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_op_ in
+        let _endpos = _endpos_op_ in
+        let _v : (string) = let _1 = 
+# 3568 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 24406 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24411 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = op;
+          MenhirLib.EngineTypes.startp = _startpos_op_;
+          MenhirLib.EngineTypes.endp = _endpos_op_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let op : (
+# 698 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 24432 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic op in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_op_ in
+        let _endpos = _endpos_op_ in
+        let _v : (string) = let _1 = 
+# 3569 "src/ocaml/preprocess/parser_raw.mly"
+                  ( op )
+# 24440 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24445 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3570 "src/ocaml/preprocess/parser_raw.mly"
+                   ("+")
+# 24470 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24475 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3571 "src/ocaml/preprocess/parser_raw.mly"
+                  ("+.")
+# 24500 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24505 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3572 "src/ocaml/preprocess/parser_raw.mly"
+                  ("+=")
+# 24530 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24535 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3573 "src/ocaml/preprocess/parser_raw.mly"
+                   ("-")
+# 24560 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24565 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3574 "src/ocaml/preprocess/parser_raw.mly"
+                  ("-.")
+# 24590 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24595 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3575 "src/ocaml/preprocess/parser_raw.mly"
+                   ("*")
+# 24620 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24625 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3576 "src/ocaml/preprocess/parser_raw.mly"
+                   ("%")
+# 24650 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24655 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3577 "src/ocaml/preprocess/parser_raw.mly"
+                   ("=")
+# 24680 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24685 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3578 "src/ocaml/preprocess/parser_raw.mly"
+                   ("<")
+# 24710 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24715 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3579 "src/ocaml/preprocess/parser_raw.mly"
+                   (">")
+# 24740 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24745 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3580 "src/ocaml/preprocess/parser_raw.mly"
+                  ("or")
+# 24770 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24775 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3581 "src/ocaml/preprocess/parser_raw.mly"
+                  ("||")
+# 24800 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24805 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3582 "src/ocaml/preprocess/parser_raw.mly"
+                   ("&")
+# 24830 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24835 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3583 "src/ocaml/preprocess/parser_raw.mly"
+                  ("&&")
+# 24860 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24865 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = let _1 = 
+# 3584 "src/ocaml/preprocess/parser_raw.mly"
+                  (":=")
+# 24890 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3562 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 24895 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (bool) = 
+# 3467 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( true )
+# 24920 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (bool) = 
+# 3468 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( false )
+# 24938 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (unit option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 24956 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : unit = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (unit option) = 
+# 116 "<standard.mly>"
+    ( Some x )
+# 24981 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (unit option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 24999 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : unit = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (unit option) = 
+# 116 "<standard.mly>"
+    ( Some x )
+# 25024 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (string Location.loc option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25042 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 25069 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (string Location.loc option) = let x =
+          let x =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 25084 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 183 "<standard.mly>"
+    ( x )
+# 25090 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25096 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.core_type option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25114 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type option) = let x = 
+# 183 "<standard.mly>"
+    ( x )
+# 25146 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25151 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.expression option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25169 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.expression option) = let x = 
+# 183 "<standard.mly>"
+    ( x )
+# 25201 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25206 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.module_type option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25224 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.module_type) = Obj.magic x in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.module_type option) = let x = 
+# 183 "<standard.mly>"
+    ( x )
+# 25256 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25261 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.pattern option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25279 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.pattern) = Obj.magic x in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.pattern option) = let x = 
+# 183 "<standard.mly>"
+    ( x )
+# 25311 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25316 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.expression option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25334 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.expression option) = let x = 
+# 183 "<standard.mly>"
+    ( x )
+# 25366 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 116 "<standard.mly>"
+    ( Some x )
+# 25371 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
+# 114 "<standard.mly>"
+    ( None )
+# 25389 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
+# 116 "<standard.mly>"
+    ( Some x )
+# 25414 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 25435 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3760 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 25443 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 25477 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (string) = 
+# 3761 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _2 )
+# 25486 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = mty;
+            MenhirLib.EngineTypes.startp = _startpos_mty_;
+            MenhirLib.EngineTypes.endp = _endpos_mty_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = me;
+                MenhirLib.EngineTypes.startp = _startpos_me_;
+                MenhirLib.EngineTypes.endp = _endpos_me_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _3 : unit = Obj.magic _3 in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1294 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
+# 25542 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = me;
+            MenhirLib.EngineTypes.startp = _startpos_me_;
+            MenhirLib.EngineTypes.endp = _endpos_me_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let me : (Parsetree.module_expr) = Obj.magic me in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.module_expr) = 
+# 1301 "src/ocaml/preprocess/parser_raw.mly"
+      ( me (* TODO consider reloc *) )
+# 25581 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = e;
+            MenhirLib.EngineTypes.startp = _startpos_e_;
+            MenhirLib.EngineTypes.endp = _endpos_e_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_expr) = let e = 
+# 1324 "src/ocaml/preprocess/parser_raw.mly"
+      ( e )
+# 25634 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 25641 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1309 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
+# 25650 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = e;
+                MenhirLib.EngineTypes.startp = _startpos_e_;
+                MenhirLib.EngineTypes.endp = _endpos_e_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_expr) = let e =
+          let (_endpos__1_, _startpos__1_, _1, _2) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2, _2_inlined1) in
+          let ty =
+            let _1 =
+              let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 25721 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 25729 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 25735 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_ty_ = _endpos__1_ in
+          let _endpos = _endpos_ty_ in
+          let _startpos = _startpos_e_ in
+          let _loc = (_startpos, _endpos) in
+          
+# 1326 "src/ocaml/preprocess/parser_raw.mly"
+      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
+# 25745 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 25753 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1309 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
+# 25762 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = e;
+                    MenhirLib.EngineTypes.startp = _startpos_e_;
+                    MenhirLib.EngineTypes.endp = _endpos_e_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _2;
+                        MenhirLib.EngineTypes.startp = _startpos__2_;
+                        MenhirLib.EngineTypes.endp = _endpos__2_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_expr) = let e =
+          let (_endpos__1_inlined1_, _startpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _1, _2) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined3, _1_inlined2, _2_inlined1) in
+          let ty2 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+            let _1 =
+              let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 25848 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 25856 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 25862 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_ty2_ = _endpos__1_inlined1_ in
+          let ty1 =
+            let _1 =
+              let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 25871 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 25879 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 25885 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos_ty2_ in
+          let _startpos = _startpos_e_ in
+          let _loc = (_startpos, _endpos) in
+          
+# 1328 "src/ocaml/preprocess/parser_raw.mly"
+      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
+# 25894 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 25902 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1309 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
+# 25911 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = e;
+                MenhirLib.EngineTypes.startp = _startpos_e_;
+                MenhirLib.EngineTypes.endp = _endpos_e_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.module_expr) = let e =
+          let (_endpos__1_, _startpos__1_, _1, _2) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2, _2_inlined1) in
+          let ty2 =
+            let _1 =
+              let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 25982 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 25990 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 25996 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos_ty2_ = _endpos__1_ in
+          let _endpos = _endpos_ty2_ in
+          let _startpos = _startpos_e_ in
+          let _loc = (_startpos, _endpos) in
+          
+# 1330 "src/ocaml/preprocess/parser_raw.mly"
+      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
+# 26006 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26014 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1309 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
+# 26023 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 868 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.core_type)
+# 26055 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1201 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26059 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 870 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.expression)
+# 26091 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1206 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26095 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 872 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.pattern)
+# 26127 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1211 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26131 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _endpos = _endpos__3_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _loc__2_ = (_startpos__2_, _endpos__2_) in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2750 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
+# 26175 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26181 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern) = let _1 = 
+# 2752 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pat.attr _1 _2 )
+# 26213 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26218 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 = 
+# 2754 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26243 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26248 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _3 =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 26295 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2757 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_alias(_1, _3) )
+# 26301 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__1_ = _endpos__1_inlined1_ in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 26311 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26317 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26323 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 = 
+# 2761 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_tuple(List.rev _1) )
+# 26350 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 26358 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26364 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26370 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 = 
+# 2765 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_or(_1, _3) )
+# 26411 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos__1_ = _endpos__3_ in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 26420 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26426 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2738 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26432 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26482 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 26488 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2740 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
+# 26497 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern list) = 
+# 2868 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _3 :: _1 )
+# 26536 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern list) = 
+# 2869 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( [_3; _1] )
+# 26575 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern list) = 
+# 2868 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _3 :: _1 )
+# 26614 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern list) = 
+# 2869 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( [_3; _1] )
+# 26653 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = 
+# 2773 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26678 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 26716 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2776 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_construct(_1, Some _2) )
+# 26722 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 26732 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2779 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26738 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2778 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_variant(_1, Some _2) )
+# 26771 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 26780 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2779 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26786 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _2 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 26836 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 26842 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2781 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
+# 26851 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _endpos = _endpos__3_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _loc__2_ = (_startpos__2_, _endpos__2_) in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2750 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
+# 26895 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26901 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.attribute) = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern) = let _1 = 
+# 2752 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pat.attr _1 _2 )
+# 26933 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26938 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 = 
+# 2754 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26963 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 26968 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _3 =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 27015 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2757 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_alias(_1, _3) )
+# 27021 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__1_ = _endpos__1_inlined1_ in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 27031 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27037 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 27043 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 = 
+# 2761 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_tuple(List.rev _1) )
+# 27070 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 27078 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27084 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 27090 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 = 
+# 2765 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ppat_or(_1, _3) )
+# 27131 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos__1_ = _endpos__3_ in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 27140 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2768 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27146 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2745 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 27152 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 27173 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 27187 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2169 "src/ocaml/preprocess/parser_raw.mly"
+                        ( Ppat_var _1 )
+# 27193 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 27202 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2171 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27208 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2170 "src/ocaml/preprocess/parser_raw.mly"
+                        ( Ppat_any )
+# 27234 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 27242 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2171 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27248 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.structure) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.payload) = 
+# 3866 "src/ocaml/preprocess/parser_raw.mly"
+              ( PStr _1 )
+# 27273 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.signature) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.payload) = 
+# 3867 "src/ocaml/preprocess/parser_raw.mly"
+                    ( PSig _2 )
+# 27305 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.payload) = 
+# 3868 "src/ocaml/preprocess/parser_raw.mly"
+                    ( PTyp _2 )
+# 27337 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.payload) = 
+# 3869 "src/ocaml/preprocess/parser_raw.mly"
+                     ( PPat (_2, None) )
+# 27369 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.payload) = 
+# 3870 "src/ocaml/preprocess/parser_raw.mly"
+                                   ( PPat (_2, Some _4) )
+# 27415 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = 
+# 3281 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27440 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.core_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 27483 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 27488 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3273 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27494 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3277 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ptyp_poly(_1, _3) )
+# 27500 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_xs_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 27510 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3283 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27516 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 = 
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27541 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3281 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27546 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let _3 = 
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27587 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _1 =
+              let _1 =
+                let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 27594 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 986 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 27599 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3273 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27605 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3277 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ptyp_poly(_1, _3) )
+# 27611 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos__1_ = _startpos_xs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 27621 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3283 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27627 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.payload) = Obj.magic _3 in
+        let _2 : (string Location.loc) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3833 "src/ocaml/preprocess/parser_raw.mly"
+    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
+# 27676 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = prim;
+            MenhirLib.EngineTypes.startp = _startpos_prim_;
+            MenhirLib.EngineTypes.endp = _endpos_prim_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _7;
+              MenhirLib.EngineTypes.startp = _startpos__7_;
+              MenhirLib.EngineTypes.endp = _endpos__7_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ty;
+                MenhirLib.EngineTypes.startp = _startpos_ty_;
+                MenhirLib.EngineTypes.endp = _endpos_ty_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _5;
+                  MenhirLib.EngineTypes.startp = _startpos__5_;
+                  MenhirLib.EngineTypes.endp = _endpos__5_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined2;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let prim : (string list) = Obj.magic prim in
+        let _7 : unit = Obj.magic _7 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27759 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 27771 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27779 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2929 "src/ocaml/preprocess/parser_raw.mly"
+    ( let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      Val.mk id ty ~prim ~attrs ~loc ~docs,
+      ext )
+# 27792 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.private_flag) = let _1 = 
+# 3701 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Public )
+# 27810 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3698 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27815 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.private_flag) = let _1 = 
+# 3702 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Private )
+# 27840 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 3698 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 27845 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
+# 3724 "src/ocaml/preprocess/parser_raw.mly"
+                 ( Public, Concrete )
+# 27863 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
+# 3725 "src/ocaml/preprocess/parser_raw.mly"
+            ( Private, Concrete )
+# 27888 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
+# 3726 "src/ocaml/preprocess/parser_raw.mly"
+            ( Public, Virtual )
+# 27913 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
+# 3727 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Private, Virtual )
+# 27945 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
+# 3728 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Private, Virtual )
+# 27977 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.rec_flag) = 
+# 3681 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Nonrecursive )
+# 27995 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.rec_flag) = 
+# 3682 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Recursive )
+# 28020 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = fields;
+          MenhirLib.EngineTypes.startp = _startpos_fields_;
+          MenhirLib.EngineTypes.endp = _endpos_fields_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_fields_ in
+        let _endpos = _endpos_fields_ in
+        let _v : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) = let eo = 
+# 124 "<standard.mly>"
+    ( None )
+# 28046 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 2670 "src/ocaml/preprocess/parser_raw.mly"
+    ( eo, fields )
+# 28051 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = fields;
+          MenhirLib.EngineTypes.startp = _startpos_fields_;
+          MenhirLib.EngineTypes.endp = _endpos_fields_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x;
+              MenhirLib.EngineTypes.startp = _startpos_x_;
+              MenhirLib.EngineTypes.endp = _endpos_x_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_fields_ in
+        let _v : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
+          let x = 
+# 191 "<standard.mly>"
+    ( x )
+# 28092 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 28097 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2670 "src/ocaml/preprocess/parser_raw.mly"
+    ( eo, fields )
+# 28103 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.constructor_declaration list) = let x = 
+# 3103 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Type.constructor cid ~args ?res ~attrs ~loc ~info
+    )
+# 28133 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1096 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28138 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.constructor_declaration list) = let x = 
+# 3103 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Type.constructor cid ~args ?res ~attrs ~loc ~info
+    )
+# 28168 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1099 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28173 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.constructor_declaration list) = let x = 
+# 3103 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Type.constructor cid ~args ?res ~attrs ~loc ~info
+    )
+# 28210 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1103 "src/ocaml/preprocess/parser_raw.mly"
+      ( x :: xs )
+# 28215 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x =
+          let _1 = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28246 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3209 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28251 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1096 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28257 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3211 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28282 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1096 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28287 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x =
+          let _1 = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28318 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3209 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28323 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1099 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28329 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3211 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28354 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1099 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28359 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x =
+          let _1 = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28397 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 3209 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28402 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1103 "src/ocaml/preprocess/parser_raw.mly"
+      ( x :: xs )
+# 28408 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3211 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 28440 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1103 "src/ocaml/preprocess/parser_raw.mly"
+      ( x :: xs )
+# 28445 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28475 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1096 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28480 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_d_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28510 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1099 "src/ocaml/preprocess/parser_raw.mly"
+      ( [x] )
+# 28515 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = d;
+          MenhirLib.EngineTypes.startp = _startpos_d_;
+          MenhirLib.EngineTypes.endp = _endpos_d_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let d : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) = Obj.magic d in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_d_ in
+        let _v : (Parsetree.extension_constructor list) = let x = 
+# 3215 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    )
+# 28552 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1103 "src/ocaml/preprocess/parser_raw.mly"
+      ( x :: xs )
+# 28557 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
+# 962 "src/ocaml/preprocess/parser_raw.mly"
+    ( [] )
+# 28575 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = xs;
+                  MenhirLib.EngineTypes.startp = _startpos_xs_;
+                  MenhirLib.EngineTypes.endp = _endpos_xs_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.core_type) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__3_ in
+        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = let x =
+          let x =
+            let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2049 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1, _3, make_loc _sloc )
+# 28634 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 183 "<standard.mly>"
+    ( x )
+# 28640 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 964 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 28646 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.functor_parameter) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.functor_parameter list) = 
+# 976 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 28671 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.functor_parameter) = Obj.magic x in
+        let xs : (Parsetree.functor_parameter list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.functor_parameter list) = 
+# 978 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 28703 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
+# 976 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 28728 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
+        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
+# 978 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 28760 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (string) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (string list) = 
+# 976 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 28785 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (string) = Obj.magic x in
+        let xs : (string list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (string list) = 
+# 978 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 28817 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (string Location.loc list) = let x =
+          let _2 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 28855 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3269 "src/ocaml/preprocess/parser_raw.mly"
+    ( _2 )
+# 28861 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 976 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 28867 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (string Location.loc list) = let x =
+          let _2 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 28912 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3269 "src/ocaml/preprocess/parser_raw.mly"
+    ( _2 )
+# 28918 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 978 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 28924 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.case) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.case list) = let _1 = 
+# 124 "<standard.mly>"
+    ( None )
+# 28949 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1067 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 28954 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = x_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.case) = Obj.magic x in
+        let x_inlined1 : unit = Obj.magic x_inlined1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_inlined1_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.case list) = let _1 =
+          let x = x_inlined1 in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 28988 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1067 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 28994 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.case) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.case list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.case list) = 
+# 1071 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29033 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type list) = let xs =
+          let x = 
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 29059 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29064 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29070 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type list) = let xs =
+          let x = 
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 29110 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29115 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29121 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.with_constraint) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.with_constraint list) = let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29146 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29151 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.with_constraint) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.with_constraint list) = let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29190 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29195 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.row_field) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.row_field list) = let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29220 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29225 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.row_field) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.row_field list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.row_field list) = let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29264 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29269 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29294 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29299 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29338 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29343 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.core_type * Asttypes.variance) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29368 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29373 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type * Asttypes.variance) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29412 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29417 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = let xs = 
+# 1002 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x ] )
+# 29442 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29447 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = let xs = 
+# 1006 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29486 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1010 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 29491 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = 
+# 1033 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29530 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x2;
+          MenhirLib.EngineTypes.startp = _startpos_x2_;
+          MenhirLib.EngineTypes.endp = _endpos_x2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x1;
+              MenhirLib.EngineTypes.startp = _startpos_x1_;
+              MenhirLib.EngineTypes.endp = _endpos_x1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x2 : (Parsetree.core_type) = Obj.magic x2 in
+        let _2 : unit = Obj.magic _2 in
+        let x1 : (Parsetree.core_type) = Obj.magic x1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x1_ in
+        let _endpos = _endpos_x2_ in
+        let _v : (Parsetree.core_type list) = 
+# 1037 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x2; x1 ] )
+# 29569 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.expression list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.expression list) = 
+# 1033 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29608 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x2;
+          MenhirLib.EngineTypes.startp = _startpos_x2_;
+          MenhirLib.EngineTypes.endp = _endpos_x2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x1;
+              MenhirLib.EngineTypes.startp = _startpos_x1_;
+              MenhirLib.EngineTypes.endp = _endpos_x1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x2 : (Parsetree.expression) = Obj.magic x2 in
+        let _2 : unit = Obj.magic _2 in
+        let x1 : (Parsetree.expression) = Obj.magic x1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x1_ in
+        let _endpos = _endpos_x2_ in
+        let _v : (Parsetree.expression list) = 
+# 1037 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x2; x1 ] )
+# 29647 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : (Parsetree.core_type) = Obj.magic x in
+        let _2 : unit = Obj.magic _2 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.core_type list) = 
+# 1033 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29686 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x2;
+          MenhirLib.EngineTypes.startp = _startpos_x2_;
+          MenhirLib.EngineTypes.endp = _endpos_x2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x1;
+              MenhirLib.EngineTypes.startp = _startpos_x1_;
+              MenhirLib.EngineTypes.endp = _endpos_x1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x2 : (Parsetree.core_type) = Obj.magic x2 in
+        let _2 : unit = Obj.magic _2 in
+        let x1 : (Parsetree.core_type) = Obj.magic x1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x1_ in
+        let _endpos = _endpos_x2_ in
+        let _v : (Parsetree.core_type list) = 
+# 1037 "src/ocaml/preprocess/parser_raw.mly"
+    ( [ x2; x1 ] )
+# 29725 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.row_field) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.row_field) = 
+# 3452 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 29750 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.core_type) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3454 "src/ocaml/preprocess/parser_raw.mly"
+      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
+# 29778 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.expression list) = let _2 = 
+# 124 "<standard.mly>"
+    ( None )
+# 29803 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 29808 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = x;
+            MenhirLib.EngineTypes.startp = _startpos_x_;
+            MenhirLib.EngineTypes.endp = _endpos_x_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x_inlined1 : unit = Obj.magic x_inlined1 in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_inlined1_ in
+        let _v : (Parsetree.expression list) = let _2 =
+          let x = x_inlined1 in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 29842 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 29848 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x;
+              MenhirLib.EngineTypes.startp = _startpos_x_;
+              MenhirLib.EngineTypes.endp = _endpos_x_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.expression list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.expression) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.expression list) = 
+# 1058 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 29887 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = oe;
+          MenhirLib.EngineTypes.startp = _startpos_oe_;
+          MenhirLib.EngineTypes.endp = _endpos_oe_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let oe : (Parsetree.expression option) = Obj.magic oe in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 29915 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_oe_ in
+        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
+# 124 "<standard.mly>"
+    ( None )
+# 29923 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 29930 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 29938 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_oe_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2693 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match oe with
+          | None ->
+              (* No expression; this is a pun. Desugar it. *)
+              exp_of_label ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, e )
+# 29956 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 29962 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = oe;
+            MenhirLib.EngineTypes.startp = _startpos_oe_;
+            MenhirLib.EngineTypes.endp = _endpos_oe_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let x : unit = Obj.magic x in
+        let oe : (Parsetree.expression option) = Obj.magic oe in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 29997 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
+# 126 "<standard.mly>"
+    ( Some x )
+# 30005 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 30012 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30020 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_oe_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2693 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match oe with
+          | None ->
+              (* No expression; this is a pun. Desugar it. *)
+              exp_of_label ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, e )
+# 30038 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 30044 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = oe;
+              MenhirLib.EngineTypes.startp = _startpos_oe_;
+              MenhirLib.EngineTypes.endp = _endpos_oe_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let oe : (Parsetree.expression option) = Obj.magic oe in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 30086 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : ((string Location.loc * Parsetree.expression) list) = let x =
+          let label =
+            let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 30096 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30104 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_oe_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2693 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match oe with
+          | None ->
+              (* No expression; this is a pun. Desugar it. *)
+              exp_of_label ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, e )
+# 30122 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1058 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 30128 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let x : (Parsetree.pattern) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_ in
+        let _v : (Parsetree.pattern list) = let _2 = 
+# 124 "<standard.mly>"
+    ( None )
+# 30153 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 30158 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = x;
+            MenhirLib.EngineTypes.startp = _startpos_x_;
+            MenhirLib.EngineTypes.endp = _endpos_x_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let x_inlined1 : unit = Obj.magic x_inlined1 in
+        let x : (Parsetree.pattern) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_x_inlined1_ in
+        let _v : (Parsetree.pattern list) = let _2 =
+          let x = x_inlined1 in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 30192 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 30198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = x;
+              MenhirLib.EngineTypes.startp = _startpos_x_;
+              MenhirLib.EngineTypes.endp = _endpos_x_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let xs : (Parsetree.pattern list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let x : (Parsetree.pattern) = Obj.magic x in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_x_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.pattern list) = 
+# 1058 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 30237 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = eo;
+          MenhirLib.EngineTypes.startp = _startpos_eo_;
+          MenhirLib.EngineTypes.endp = _endpos_eo_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = c;
+            MenhirLib.EngineTypes.startp = _startpos_c_;
+            MenhirLib.EngineTypes.endp = _endpos_c_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let eo : (Parsetree.expression option) = Obj.magic eo in
+        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_eo_ in
+        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
+# 124 "<standard.mly>"
+    ( None )
+# 30276 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30286 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_eo_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2676 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match eo with
+          | None ->
+              (* No pattern; this is a pun. Desugar it. *)
+              exp_of_longident ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, mkexp_opt_constraint ~loc:_sloc e c )
+# 30304 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 30310 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = x;
+          MenhirLib.EngineTypes.startp = _startpos_x_;
+          MenhirLib.EngineTypes.endp = _endpos_x_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = eo;
+            MenhirLib.EngineTypes.startp = _startpos_eo_;
+            MenhirLib.EngineTypes.endp = _endpos_eo_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = c;
+              MenhirLib.EngineTypes.startp = _startpos_c_;
+              MenhirLib.EngineTypes.endp = _endpos_c_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let x : unit = Obj.magic x in
+        let eo : (Parsetree.expression option) = Obj.magic eo in
+        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_x_ in
+        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
+# 126 "<standard.mly>"
+    ( Some x )
+# 30356 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30366 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_eo_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2676 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match eo with
+          | None ->
+              (* No pattern; this is a pun. Desugar it. *)
+              exp_of_longident ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, mkexp_opt_constraint ~loc:_sloc e c )
+# 30384 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1054 "src/ocaml/preprocess/parser_raw.mly"
+    ( [x] )
+# 30390 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = eo;
+              MenhirLib.EngineTypes.startp = _startpos_eo_;
+              MenhirLib.EngineTypes.endp = _endpos_eo_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = c;
+                MenhirLib.EngineTypes.startp = _startpos_c_;
+                MenhirLib.EngineTypes.endp = _endpos_c_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let eo : (Parsetree.expression option) = Obj.magic eo in
+        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let x =
+          let label =
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30448 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos_label_ = _startpos__1_ in
+          let _endpos = _endpos_eo_ in
+          let _symbolstartpos = _startpos_label_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2676 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e =
+          match eo with
+          | None ->
+              (* No pattern; this is a pun. Desugar it. *)
+              exp_of_longident ~loc:_sloc label
+          | Some e ->
+              e
+        in
+        label, mkexp_opt_constraint ~loc:_sloc e c )
+# 30466 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1058 "src/ocaml/preprocess/parser_raw.mly"
+    ( x :: xs )
+# 30472 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = 
+# 2138 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( _1 )
+# 30497 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = 
+# 2139 "src/ocaml/preprocess/parser_raw.mly"
+                                  ( _1 )
+# 30529 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2141 "src/ocaml/preprocess/parser_raw.mly"
+    ( Pexp_sequence(_1, _3) )
+# 30569 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 30578 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2142 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30584 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : (string Location.loc) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2144 "src/ocaml/preprocess/parser_raw.mly"
+    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
+      let payload = PStr [mkstrexp seq []] in
+      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
+# 30642 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = args_res;
+              MenhirLib.EngineTypes.startp = _startpos_args_res_;
+              MenhirLib.EngineTypes.endp = _endpos_args_res_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = ext;
+                    MenhirLib.EngineTypes.startp = _startpos_ext_;
+                    MenhirLib.EngineTypes.endp = _endpos_ext_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
+        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
+          let _1 = _1_inlined4 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30711 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined4_ in
+        let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30720 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 30731 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30739 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3133 "src/ocaml/preprocess/parser_raw.mly"
+    ( let args, res = args_res in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      Te.mk_exception ~attrs
+        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
+      , ext )
+# 30753 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = xss;
+          MenhirLib.EngineTypes.startp = _startpos_xss_;
+          MenhirLib.EngineTypes.endp = _endpos_xss_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let xss : (Parsetree.signature_item list list) = Obj.magic xss in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xss_ in
+        let _endpos = _endpos_xss_ in
+        let _v : (Parsetree.signature) = let _1 =
+          let _1 = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 30779 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 877 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_sig _startpos _endpos _1 )
+# 30787 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1597 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30793 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.signature_item) = let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30827 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__2_ = _endpos__1_inlined1_ in
+        let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1612 "src/ocaml/preprocess/parser_raw.mly"
+      ( let docs = symbol_docs _sloc in
+        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
+# 30838 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.attribute) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1616 "src/ocaml/preprocess/parser_raw.mly"
+        ( Psig_attribute _1 )
+# 30864 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 925 "src/ocaml/preprocess/parser_raw.mly"
+    ( mksig ~loc:_sloc _1 )
+# 30872 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1618 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30878 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1621 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_value _1 )
+# 30904 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 30912 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30918 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1623 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_value _1 )
+# 30944 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 30952 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 30958 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = a;
+            MenhirLib.EngineTypes.startp = _startpos_a_;
+            MenhirLib.EngineTypes.endp = _endpos_a_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
+        let a : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = Obj.magic a in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_a_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let _1 = 
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 30995 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 2965 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 31000 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2948 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31006 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1625 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_type _1 )
+# 31012 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31022 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31028 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = a;
+            MenhirLib.EngineTypes.startp = _startpos_a_;
+            MenhirLib.EngineTypes.endp = _endpos_a_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
+        let a : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = Obj.magic a in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_a_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let _1 = 
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 31065 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 2965 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 31070 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2953 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31076 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1627 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_typesubst _1 )
+# 31082 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31092 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31098 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = priv;
+              MenhirLib.EngineTypes.startp = _startpos_priv_;
+              MenhirLib.EngineTypes.endp = _endpos_priv_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let priv : (Asttypes.private_flag) = Obj.magic priv in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let attrs2 =
+                  let _1 = _1_inlined3 in
+                  
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31185 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                let cs = 
+# 1107 "src/ocaml/preprocess/parser_raw.mly"
+    ( List.rev xs )
+# 31192 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let tid =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                  let _endpos = _endpos__1_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31202 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _4 = 
+# 3689 "src/ocaml/preprocess/parser_raw.mly"
+                ( Recursive )
+# 31208 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let attrs1 =
+                  let _1 = _1_inlined1 in
+                  
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31215 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos = _endpos_attrs2_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 3202 "src/ocaml/preprocess/parser_raw.mly"
+    ( let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      Te.mk tid cs ~params ~priv ~attrs ~docs,
+      ext )
+# 31227 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3189 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31233 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1629 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_typext _1 )
+# 31239 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31249 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31255 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = priv;
+              MenhirLib.EngineTypes.startp = _startpos_priv_;
+              MenhirLib.EngineTypes.endp = _endpos_priv_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined3;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined2;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = ext;
+                          MenhirLib.EngineTypes.startp = _startpos_ext_;
+                          MenhirLib.EngineTypes.endp = _endpos_ext_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let priv : (Asttypes.private_flag) = Obj.magic priv in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let attrs2 =
+                  let _1 = _1_inlined4 in
+                  
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31349 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos_attrs2_ = _endpos__1_inlined4_ in
+                let cs = 
+# 1107 "src/ocaml/preprocess/parser_raw.mly"
+    ( List.rev xs )
+# 31356 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let tid =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+                  let _endpos = _endpos__1_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31366 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _4 =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                  let _endpos = _endpos__1_ in
+                  let _startpos = _startpos__1_ in
+                  let _loc = (_startpos, _endpos) in
+                  
+# 3690 "src/ocaml/preprocess/parser_raw.mly"
+                ( not_expecting _loc "nonrec flag"; Recursive )
+# 31377 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let attrs1 =
+                  let _1 = _1_inlined1 in
+                  
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31385 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos = _endpos_attrs2_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 3202 "src/ocaml/preprocess/parser_raw.mly"
+    ( let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      Te.mk tid cs ~params ~priv ~attrs ~docs,
+      ext )
+# 31397 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3189 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31403 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1629 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_typext _1 )
+# 31409 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31419 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31425 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1631 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_exception _1 )
+# 31451 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31459 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31465 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = ext;
+                  MenhirLib.EngineTypes.startp = _startpos_ext_;
+                  MenhirLib.EngineTypes.endp = _endpos_ext_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.module_type) = Obj.magic body in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs2 =
+                let _1 = _1_inlined3 in
+                
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31530 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos_attrs2_ = _endpos__1_inlined3_ in
+              let name =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31542 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let attrs1 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31550 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos = _endpos_attrs2_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 1660 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Md.mk name body ~attrs ~loc ~docs, ext
+  )
+# 31564 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1633 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Psig_module body, ext) )
+# 31570 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31580 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31586 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = ext;
+                    MenhirLib.EngineTypes.startp = _startpos_ext_;
+                    MenhirLib.EngineTypes.endp = _endpos_ext_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs2 =
+                let _1 = _1_inlined4 in
+                
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31658 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos_attrs2_ = _endpos__1_inlined4_ in
+              let body =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+                let id =
+                  let _endpos = _endpos__1_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31671 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let (_endpos_id_, _startpos_id_) = (_endpos__1_, _startpos__1_) in
+                let _endpos = _endpos_id_ in
+                let _symbolstartpos = _startpos_id_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 1696 "src/ocaml/preprocess/parser_raw.mly"
+    ( Mty.alias ~loc:(make_loc _sloc) id )
+# 31681 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let name =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31692 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let attrs1 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31700 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos = _endpos_attrs2_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 1687 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Md.mk name body ~attrs ~loc ~docs, ext
+  )
+# 31714 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1635 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Psig_module body, ext) )
+# 31720 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31730 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31736 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1637 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
+# 31762 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31770 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31776 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = mty;
+              MenhirLib.EngineTypes.startp = _startpos_mty_;
+              MenhirLib.EngineTypes.endp = _endpos_mty_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _6;
+                MenhirLib.EngineTypes.startp = _startpos__6_;
+                MenhirLib.EngineTypes.endp = _endpos__6_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _4;
+                    MenhirLib.EngineTypes.startp = _startpos__4_;
+                    MenhirLib.EngineTypes.endp = _endpos__4_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.module_declaration list) = Obj.magic bs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let mty : (Parsetree.module_type) = Obj.magic mty in
+        let _6 : unit = Obj.magic _6 in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let a =
+                  let attrs2 =
+                    let _1 = _1_inlined3 in
+                    
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31864 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                  let name =
+                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                    let _endpos = _endpos__1_ in
+                    let _symbolstartpos = _startpos__1_ in
+                    let _sloc = (_symbolstartpos, _endpos) in
+                    
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 31876 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let attrs1 =
+                    let _1 = _1_inlined1 in
+                    
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31884 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos = _endpos_attrs2_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 1732 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    ext, Md.mk name mty ~attrs ~loc ~docs
+  )
+# 31898 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 31904 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1721 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31910 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1639 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
+# 31916 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_bs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31926 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31932 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1641 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
+# 31958 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 31966 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 31972 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.open_description * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1643 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Psig_open body, ext) )
+# 31998 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 32006 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32012 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = thing;
+            MenhirLib.EngineTypes.startp = _startpos_thing_;
+            MenhirLib.EngineTypes.endp = _endpos_thing_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let thing : (Parsetree.module_type) = Obj.magic thing in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs2 =
+                let _1 = _1_inlined2 in
+                
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32070 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos_attrs2_ = _endpos__1_inlined2_ in
+              let attrs1 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32079 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos = _endpos_attrs2_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 1485 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Incl.mk thing ~attrs ~loc ~docs, ext
+  )
+# 32093 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1645 "src/ocaml/preprocess/parser_raw.mly"
+        ( psig_include _1 )
+# 32099 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 32109 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32115 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = cty;
+              MenhirLib.EngineTypes.startp = _startpos_cty_;
+              MenhirLib.EngineTypes.endp = _endpos_cty_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = virt;
+                      MenhirLib.EngineTypes.startp = _startpos_virt_;
+                      MenhirLib.EngineTypes.endp = _endpos_virt_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = ext;
+                          MenhirLib.EngineTypes.startp = _startpos_ext_;
+                          MenhirLib.EngineTypes.endp = _endpos_ext_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.class_description list) = Obj.magic bs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let cty : (Parsetree.class_type) = Obj.magic cty in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 32194 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let a =
+                  let attrs2 =
+                    let _1 = _1_inlined3 in
+                    
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32214 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                  let id =
+                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                    let _endpos = _endpos__1_ in
+                    let _symbolstartpos = _startpos__1_ in
+                    let _sloc = (_symbolstartpos, _endpos) in
+                    
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 32226 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let attrs1 =
+                    let _1 = _1_inlined1 in
+                    
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32234 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos = _endpos_attrs2_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 2070 "src/ocaml/preprocess/parser_raw.mly"
+    (
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      ext,
+      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
+    )
+# 32249 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 32255 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2058 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32261 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1647 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (ext, l) = _1 in (Psig_class l, ext) )
+# 32267 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_bs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 32277 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32283 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.signature_item) = let _1 =
+          let _1 = 
+# 1649 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
+# 32309 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 942 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mksig_ext ~loc:_sloc _1 )
+# 32317 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1651 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32323 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.constant) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.constant) = 
+# 3528 "src/ocaml/preprocess/parser_raw.mly"
+                 ( _1 )
+# 32348 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 32375 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constant) = 
+# 3529 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
+# 32384 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (
+# 683 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 32411 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constant) = 
+# 3530 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
+# 32420 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 32447 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constant) = 
+# 3531 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (n, m) = _2 in Pconst_integer (n, m) )
+# 32456 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (
+# 683 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 32483 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.constant) = 
+# 3532 "src/ocaml/preprocess/parser_raw.mly"
+                 ( let (f, m) = _2 in Pconst_float(f, m) )
+# 32492 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 2880 "src/ocaml/preprocess/parser_raw.mly"
+    ( let fields, closed = _1 in
+      let closed = match closed with Some () -> Open | None -> Closed in
+      fields, closed )
+# 32537 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2851 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (fields, closed) = _2 in
+        Ppat_record(fields, closed) )
+# 32544 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 32554 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2865 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32560 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ps;
+            MenhirLib.EngineTypes.startp = _startpos_ps_;
+            MenhirLib.EngineTypes.endp = _endpos_ps_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let ps : (Parsetree.pattern list) = Obj.magic ps in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _2 = 
+# 2874 "src/ocaml/preprocess/parser_raw.mly"
+    ( ps )
+# 32601 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _loc__3_ = (_startpos__3_, _endpos__3_) in
+            
+# 2856 "src/ocaml/preprocess/parser_raw.mly"
+      ( fst (mktailpat _loc__3_ _2) )
+# 32607 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 32617 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2865 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32623 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ps;
+            MenhirLib.EngineTypes.startp = _startpos_ps_;
+            MenhirLib.EngineTypes.endp = _endpos_ps_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let ps : (Parsetree.pattern list) = Obj.magic ps in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _2 = 
+# 2874 "src/ocaml/preprocess/parser_raw.mly"
+    ( ps )
+# 32664 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 2860 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_array _2 )
+# 32669 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 32679 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2865 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32685 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2862 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_array [] )
+# 32718 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 32727 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2865 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 32733 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _startpos = _startpos__1_ in
+        
+# 3875 "src/ocaml/preprocess/parser_raw.mly"
+    ( Fake.Meta.code _startpos _endpos _2 )
+# 32774 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
+        let _startpos = _startpos__1_ in
+        
+# 3877 "src/ocaml/preprocess/parser_raw.mly"
+    ( Fake.Meta.uncode _startpos _endpos _2 )
+# 32808 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2311 "src/ocaml/preprocess/parser_raw.mly"
+      ( reloc_exp ~loc:_sloc _2 )
+# 32850 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2317 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkexp_constraint ~loc:_sloc _2 _3 )
+# 32899 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2319 "src/ocaml/preprocess/parser_raw.mly"
+      ( array_get ~loc:_sloc _1 _4 )
+# 32955 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2325 "src/ocaml/preprocess/parser_raw.mly"
+      ( string_get ~loc:_sloc _1 _4 )
+# 33011 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33059 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33068 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2331 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc lident bracket _2 _1 _4 )
+# 33076 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33124 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33133 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2337 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc lident paren _2 _1 _4  )
+# 33141 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33189 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2343 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc lident brace _2 _1 _4 )
+# 33206 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33266 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33277 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2349 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc (ldot _3) bracket _4 _1 _6  )
+# 33285 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33345 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33356 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2356 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc (ldot _3) paren _4 _1 _6 )
+# 33364 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _2;
+                    MenhirLib.EngineTypes.startp = _startpos__2_;
+                    MenhirLib.EngineTypes.endp = _endpos__2_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : unit = Obj.magic _7 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 33424 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _4 in
+        let _3 : (Longident.t) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _6 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 33435 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2363 "src/ocaml/preprocess/parser_raw.mly"
+      ( dotop_get ~loc:_sloc (ldot _3) brace _4 _1 _6  )
+# 33443 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2370 "src/ocaml/preprocess/parser_raw.mly"
+      ( bigarray_get ~loc:_sloc _1 _4 )
+# 33499 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = e;
+            MenhirLib.EngineTypes.startp = _startpos_e_;
+            MenhirLib.EngineTypes.endp = _endpos_e_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let attrs =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 33555 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2383 "src/ocaml/preprocess/parser_raw.mly"
+      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
+# 33561 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__5_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2376 "src/ocaml/preprocess/parser_raw.mly"
+    ( let desc, attrs = _1 in
+      mkexp_attrs ~loc:_sloc desc attrs )
+# 33572 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 33623 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 33629 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__3_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2385 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
+# 33638 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__3_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2376 "src/ocaml/preprocess/parser_raw.mly"
+    ( let desc, attrs = _1 in
+      mkexp_attrs ~loc:_sloc desc attrs )
+# 33649 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _3 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 33701 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _2 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 33711 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 33717 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2391 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_new(_3), _2 )
+# 33723 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__1_inlined3_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2376 "src/ocaml/preprocess/parser_raw.mly"
+    ( let desc, attrs = _1 in
+      mkexp_attrs ~loc:_sloc desc attrs )
+# 33734 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _3 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 33799 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 33805 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 2393 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_pack _4, _3 )
+# 33811 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__5_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2376 "src/ocaml/preprocess/parser_raw.mly"
+    ( let desc, attrs = _1 in
+      mkexp_attrs ~loc:_sloc desc attrs )
+# 33822 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _4;
+                MenhirLib.EngineTypes.startp = _startpos__4_;
+                MenhirLib.EngineTypes.endp = _endpos__4_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _2;
+                      MenhirLib.EngineTypes.startp = _startpos__2_;
+                      MenhirLib.EngineTypes.endp = _endpos__2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _6 =
+            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+            let _1 =
+              let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 33900 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 33908 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 33914 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _3 =
+            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 33924 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 33930 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__7_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 2395 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
+# 33939 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__1_ = _endpos__7_ in
+        let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2376 "src/ocaml/preprocess/parser_raw.mly"
+    ( let desc, attrs = _1 in
+      mkexp_attrs ~loc:_sloc desc attrs )
+# 33950 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 33981 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2403 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_ident (_1) )
+# 33987 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 33996 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34002 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.constant) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2405 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_constant _1 )
+# 34028 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34036 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34042 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34073 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2407 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_construct(_1, None) )
+# 34079 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34088 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34094 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2409 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_variant(_1, None) )
+# 34120 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34128 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34134 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (
+# 742 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 34162 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 34176 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2411 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_apply(_1, [Nolabel,_2]) )
+# 34182 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34192 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34198 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 = 
+# 2412 "src/ocaml/preprocess/parser_raw.mly"
+            ("!")
+# 34233 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 34241 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2413 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_apply(_1, [Nolabel,_2]) )
+# 34247 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34257 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34263 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _2 = 
+# 2688 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 34304 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 2415 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_override _2 )
+# 34309 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34319 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34325 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2421 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_override [] )
+# 34358 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34367 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34373 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34419 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2423 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_field(_1, _3) )
+# 34425 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34435 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34441 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34501 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 34510 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2425 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_open(od, _4) )
+# 34516 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34526 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34532 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _4 = 
+# 2688 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 34587 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34597 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 34606 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__5_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2427 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_override *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
+# 34617 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34627 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34633 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 34666 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 34680 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34688 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2434 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_send(_1, _3) )
+# 34694 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34704 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34710 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.expression) = Obj.magic _3 in
+        let _1_inlined1 : (
+# 753 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 34744 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _1 : (Parsetree.expression) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _2 =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 911 "src/ocaml/preprocess/parser_raw.mly"
+   ( mkoperator ~loc:_sloc _1 )
+# 34760 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2436 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkinfix _1 _2 _3 )
+# 34766 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34776 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34782 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2438 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_extension _1 )
+# 34808 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34816 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34822 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _endpos = _endpos__1_ in
+            let _startpos = _startpos__1_ in
+            let _loc = (_startpos, _endpos) in
+            
+# 2440 "src/ocaml/preprocess/parser_raw.mly"
+      ( let id = mkrhs "merlin.hole" _loc in
+        Pexp_extension (id, PStr []) )
+# 34853 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34862 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34868 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_inlined1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
+              let _1 = 
+# 2442 "src/ocaml/preprocess/parser_raw.mly"
+                                                    (Lident "()")
+# 34918 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos__1_ = _endpos__2_ in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34927 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__3_ = _endpos__2_inlined1_ in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 34939 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 34948 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2443 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
+# 34959 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 34969 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 34975 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2450 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (exten, fields) = _2 in
+        Pexp_record(fields, exten) )
+# 35017 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35026 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35032 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35093 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35102 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__5_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2457 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (exten, fields) = _4 in
+        (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_record(fields, exten))) )
+# 35114 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35124 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35130 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _2 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 35171 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 2465 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_array(_2) )
+# 35176 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35186 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35192 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 = 
+# 2471 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pexp_array [] )
+# 35225 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35234 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35240 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 35295 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35305 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35314 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__5_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2473 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_array *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array(_4))) )
+# 35325 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35335 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35341 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35394 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35403 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__4_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2476 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_array *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array [])) )
+# 35414 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35424 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35430 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _2 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 35471 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _loc__3_ = (_startpos__3_, _endpos__3_) in
+            
+# 2484 "src/ocaml/preprocess/parser_raw.mly"
+      ( fst (mktailexp _loc__3_ _2) )
+# 35477 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35487 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35493 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = es;
+            MenhirLib.EngineTypes.startp = _startpos_es_;
+            MenhirLib.EngineTypes.endp = _endpos_es_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let es : (Parsetree.expression list) = Obj.magic es in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _4 = 
+# 2705 "src/ocaml/preprocess/parser_raw.mly"
+    ( es )
+# 35548 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35558 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35567 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__5_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _loc__5_ = (_startpos__5_, _endpos__5_) in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2490 "src/ocaml/preprocess/parser_raw.mly"
+      ( let list_exp =
+          (* TODO: review the location of list_exp *)
+          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
+          mkexp ~loc:_sloc tail_exp in
+        Pexp_open(od, list_exp) )
+# 35582 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35592 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35598 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_inlined1_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
+              let _1 = 
+# 2495 "src/ocaml/preprocess/parser_raw.mly"
+                                                        (Lident "[]")
+# 35648 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos__1_ = _endpos__2_ in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35657 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__3_ = _endpos__2_inlined1_ in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35669 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35678 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2496 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
+# 35689 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35699 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35705 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _9;
+          MenhirLib.EngineTypes.startp = _startpos__9_;
+          MenhirLib.EngineTypes.endp = _endpos__9_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _7;
+              MenhirLib.EngineTypes.startp = _startpos__7_;
+              MenhirLib.EngineTypes.endp = _endpos__7_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _6;
+                MenhirLib.EngineTypes.startp = _startpos__6_;
+                MenhirLib.EngineTypes.endp = _endpos__6_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _4;
+                      MenhirLib.EngineTypes.startp = _startpos__4_;
+                      MenhirLib.EngineTypes.endp = _endpos__4_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _3;
+                        MenhirLib.EngineTypes.startp = _startpos__3_;
+                        MenhirLib.EngineTypes.endp = _endpos__3_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = _2;
+                          MenhirLib.EngineTypes.startp = _startpos__2_;
+                          MenhirLib.EngineTypes.endp = _endpos__2_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _9 : unit = Obj.magic _9 in
+        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
+        let _7 : unit = Obj.magic _7 in
+        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _4 : unit = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__9_ in
+        let _v : (Parsetree.expression) = let _1 =
+          let _1 =
+            let _8 =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+              let _1 =
+                let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 35798 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 35806 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35812 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _5 =
+              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+              let _2 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 35822 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 35828 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let od =
+              let _1 =
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35839 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _loc__1_ = (_startpos__1_, _endpos__1_) in
+              
+# 1544 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _loc__1_ in
+    let me = Mod.ident ~loc _1 in
+    Opn.mk ~loc me )
+# 35848 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos_od_ = _startpos__1_ in
+            let _endpos = _endpos__9_ in
+            let _symbolstartpos = _startpos_od_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2505 "src/ocaml/preprocess/parser_raw.mly"
+      ( (* TODO: review the location of Pexp_constraint *)
+        let modexp =
+          mkexp_attrs ~loc:_sloc
+            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
+        Pexp_open(od, modexp) )
+# 35862 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__9_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 917 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkexp ~loc:_sloc _1 )
+# 35872 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2379 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35878 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 35909 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2785 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_var (_1) )
+# 35915 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 35924 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2786 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 35930 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = 
+# 2787 "src/ocaml/preprocess/parser_raw.mly"
+                             ( _1 )
+# 35955 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2792 "src/ocaml/preprocess/parser_raw.mly"
+      ( reloc_pat ~loc:_sloc _2 )
+# 35997 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = 
+# 2794 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36022 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.pattern) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36087 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _3 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 36097 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 36103 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2796 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
+# 36112 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined4;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined3;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _2;
+                      MenhirLib.EngineTypes.startp = _startpos__2_;
+                      MenhirLib.EngineTypes.endp = _endpos__2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined4 : (Parsetree.module_type) = Obj.magic _1_inlined4 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : (Parsetree.pattern) = let _6 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4) in
+          let _1 =
+            let _1 = 
+# 3443 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_package (package_type_of_module_type _1) )
+# 36189 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 36197 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3444 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36203 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36214 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _3 =
+          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
+          let _2 =
+            let _1 = _1_inlined1 in
+            
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 36224 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3857 "src/ocaml/preprocess/parser_raw.mly"
+                    ( _1, _2 )
+# 36230 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2798 "src/ocaml/preprocess/parser_raw.mly"
+      ( mkpat_attrs ~loc:_sloc
+          (Ppat_constraint(mkpat ~loc:_sloc (Ppat_unpack _4), _6))
+          _3 )
+# 36241 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2806 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_any )
+# 36267 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36275 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36281 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.constant) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2808 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_constant _1 )
+# 36307 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36315 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36321 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.constant) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.constant) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2810 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_interval (_1, _3) )
+# 36361 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36370 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36376 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36407 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2812 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_construct(_1, None) )
+# 36413 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36422 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36428 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2814 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_variant(_1, None) )
+# 36454 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36462 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36468 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _2 =
+              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36507 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2816 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_type (_2) )
+# 36513 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36523 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36529 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (Parsetree.pattern) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36574 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2818 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_open(_1, _3) )
+# 36580 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36590 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36596 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_inlined1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
+              let _1 = 
+# 2819 "src/ocaml/preprocess/parser_raw.mly"
+                                                     (Lident "[]")
+# 36646 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos__1_ = _endpos__2_ in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36655 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__3_ = _endpos__2_inlined1_ in
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36666 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2820 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
+# 36675 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36685 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36691 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
+        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_inlined1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _3 =
+              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
+              let _1 = 
+# 2821 "src/ocaml/preprocess/parser_raw.mly"
+                                                 (Lident "()")
+# 36741 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              let _endpos__1_ = _endpos__2_ in
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36750 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__3_ = _endpos__2_inlined1_ in
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36761 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos = _endpos__3_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 2822 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
+# 36770 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__2_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36780 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36786 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.pattern) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 =
+            let _1 =
+              let _endpos = _endpos__1_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 36845 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 2824 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_open (_1, _4) )
+# 36851 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36861 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36867 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : unit = Obj.magic _5 in
+        let _4 : (Parsetree.core_type) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.pattern) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2834 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_constraint(_2, _4) )
+# 36921 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos__5_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36930 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36936 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.pattern) = let _1 =
+          let _1 = 
+# 2845 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ppat_extension _1 )
+# 36962 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 919 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkpat ~loc:_sloc _1 )
+# 36970 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 2802 "src/ocaml/preprocess/parser_raw.mly"
+      ( _1 )
+# 36976 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 36997 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3767 "src/ocaml/preprocess/parser_raw.mly"
+           ( _1 )
+# 37005 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 37026 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3768 "src/ocaml/preprocess/parser_raw.mly"
+           ( _1 )
+# 37034 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3769 "src/ocaml/preprocess/parser_raw.mly"
+        ( "and" )
+# 37059 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3770 "src/ocaml/preprocess/parser_raw.mly"
+       ( "as" )
+# 37084 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3771 "src/ocaml/preprocess/parser_raw.mly"
+           ( "assert" )
+# 37109 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3772 "src/ocaml/preprocess/parser_raw.mly"
+          ( "begin" )
+# 37134 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3773 "src/ocaml/preprocess/parser_raw.mly"
+          ( "class" )
+# 37159 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3774 "src/ocaml/preprocess/parser_raw.mly"
+               ( "constraint" )
+# 37184 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3775 "src/ocaml/preprocess/parser_raw.mly"
+       ( "do" )
+# 37209 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3776 "src/ocaml/preprocess/parser_raw.mly"
+         ( "done" )
+# 37234 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3777 "src/ocaml/preprocess/parser_raw.mly"
+           ( "downto" )
+# 37259 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3778 "src/ocaml/preprocess/parser_raw.mly"
+         ( "else" )
+# 37284 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3779 "src/ocaml/preprocess/parser_raw.mly"
+        ( "end" )
+# 37309 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3780 "src/ocaml/preprocess/parser_raw.mly"
+              ( "exception" )
+# 37334 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3781 "src/ocaml/preprocess/parser_raw.mly"
+             ( "external" )
+# 37359 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3782 "src/ocaml/preprocess/parser_raw.mly"
+          ( "false" )
+# 37384 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3783 "src/ocaml/preprocess/parser_raw.mly"
+        ( "for" )
+# 37409 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3784 "src/ocaml/preprocess/parser_raw.mly"
+        ( "fun" )
+# 37434 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3785 "src/ocaml/preprocess/parser_raw.mly"
+             ( "function" )
+# 37459 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3786 "src/ocaml/preprocess/parser_raw.mly"
+            ( "functor" )
+# 37484 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3787 "src/ocaml/preprocess/parser_raw.mly"
+       ( "if" )
+# 37509 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3788 "src/ocaml/preprocess/parser_raw.mly"
+       ( "in" )
+# 37534 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3789 "src/ocaml/preprocess/parser_raw.mly"
+            ( "include" )
+# 37559 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3790 "src/ocaml/preprocess/parser_raw.mly"
+            ( "inherit" )
+# 37584 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3791 "src/ocaml/preprocess/parser_raw.mly"
+                ( "initializer" )
+# 37609 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3792 "src/ocaml/preprocess/parser_raw.mly"
+         ( "lazy" )
+# 37634 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3793 "src/ocaml/preprocess/parser_raw.mly"
+        ( "let" )
+# 37659 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3794 "src/ocaml/preprocess/parser_raw.mly"
+          ( "match" )
+# 37684 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3795 "src/ocaml/preprocess/parser_raw.mly"
+           ( "method" )
+# 37709 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3796 "src/ocaml/preprocess/parser_raw.mly"
+           ( "module" )
+# 37734 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3797 "src/ocaml/preprocess/parser_raw.mly"
+            ( "mutable" )
+# 37759 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3798 "src/ocaml/preprocess/parser_raw.mly"
+        ( "new" )
+# 37784 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3799 "src/ocaml/preprocess/parser_raw.mly"
+           ( "nonrec" )
+# 37809 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3800 "src/ocaml/preprocess/parser_raw.mly"
+           ( "object" )
+# 37834 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3801 "src/ocaml/preprocess/parser_raw.mly"
+       ( "of" )
+# 37859 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3802 "src/ocaml/preprocess/parser_raw.mly"
+         ( "open" )
+# 37884 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3803 "src/ocaml/preprocess/parser_raw.mly"
+       ( "or" )
+# 37909 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3804 "src/ocaml/preprocess/parser_raw.mly"
+            ( "private" )
+# 37934 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3805 "src/ocaml/preprocess/parser_raw.mly"
+        ( "rec" )
+# 37959 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3806 "src/ocaml/preprocess/parser_raw.mly"
+        ( "sig" )
+# 37984 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3807 "src/ocaml/preprocess/parser_raw.mly"
+           ( "struct" )
+# 38009 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3808 "src/ocaml/preprocess/parser_raw.mly"
+         ( "then" )
+# 38034 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3809 "src/ocaml/preprocess/parser_raw.mly"
+       ( "to" )
+# 38059 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3810 "src/ocaml/preprocess/parser_raw.mly"
+         ( "true" )
+# 38084 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3811 "src/ocaml/preprocess/parser_raw.mly"
+        ( "try" )
+# 38109 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3812 "src/ocaml/preprocess/parser_raw.mly"
+         ( "type" )
+# 38134 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3813 "src/ocaml/preprocess/parser_raw.mly"
+        ( "val" )
+# 38159 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3814 "src/ocaml/preprocess/parser_raw.mly"
+            ( "virtual" )
+# 38184 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3815 "src/ocaml/preprocess/parser_raw.mly"
+         ( "when" )
+# 38209 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3816 "src/ocaml/preprocess/parser_raw.mly"
+          ( "while" )
+# 38234 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3817 "src/ocaml/preprocess/parser_raw.mly"
+         ( "with" )
+# 38259 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.type_exception * string Location.loc option) = 
+# 3110 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38284 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined5;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined4;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined3;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _5;
+                MenhirLib.EngineTypes.startp = _startpos__5_;
+                MenhirLib.EngineTypes.endp = _endpos__5_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = ext;
+                      MenhirLib.EngineTypes.startp = _startpos_ext_;
+                      MenhirLib.EngineTypes.endp = _endpos_ext_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined5_ in
+        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
+          let _1 = _1_inlined5 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38360 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs_ = _endpos__1_inlined5_ in
+        let attrs2 =
+          let _1 = _1_inlined4 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38369 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let lid =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 38380 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 38391 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38399 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3119 "src/ocaml/preprocess/parser_raw.mly"
+  ( let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Te.mk_exception ~attrs
+      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
+    , ext )
+# 38412 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = 
+# 2629 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 38444 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.expression) = Obj.magic _2 in
+        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2631 "src/ocaml/preprocess/parser_raw.mly"
+      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
+# 38479 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _5;
+          MenhirLib.EngineTypes.startp = _startpos__5_;
+          MenhirLib.EngineTypes.endp = _endpos__5_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = xs;
+              MenhirLib.EngineTypes.startp = _startpos_xs_;
+              MenhirLib.EngineTypes.endp = _endpos_xs_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _5 : (Parsetree.expression) = Obj.magic _5 in
+        let _4 : unit = Obj.magic _4 in
+        let xs : (string Location.loc list) = Obj.magic xs in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__5_ in
+        let _v : (Parsetree.expression) = let _3 = 
+# 2532 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 38532 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2633 "src/ocaml/preprocess/parser_raw.mly"
+      ( mk_newtypes ~loc:_sloc _3 _5 )
+# 38540 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = xss;
+          MenhirLib.EngineTypes.startp = _startpos_xss_;
+          MenhirLib.EngineTypes.endp = _endpos_xss_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xss_ in
+        let _endpos = _endpos_xss_ in
+        let _v : (Parsetree.structure) = let _1 =
+          let _1 =
+            let ys = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 38567 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let xs =
+              let items = 
+# 954 "src/ocaml/preprocess/parser_raw.mly"
+    ( [] )
+# 38573 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1348 "src/ocaml/preprocess/parser_raw.mly"
+    ( items )
+# 38578 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 38584 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 876 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_str _startpos _endpos _1 )
+# 38593 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1341 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 38599 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xss;
+          MenhirLib.EngineTypes.startp = _startpos_xss_;
+          MenhirLib.EngineTypes.endp = _endpos_xss_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e;
+              MenhirLib.EngineTypes.startp = _startpos_e_;
+              MenhirLib.EngineTypes.endp = _endpos_e_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e_ in
+        let _endpos = _endpos_xss_ in
+        let _v : (Parsetree.structure) = let _1 =
+          let _1 =
+            let ys = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 38640 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let xs =
+              let items =
+                let x =
+                  let _1 =
+                    let _1 =
+                      let attrs = 
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38650 "src/ocaml/preprocess/parser_raw.ml"
+                       in
+                      
+# 1355 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstrexp e attrs )
+# 38655 "src/ocaml/preprocess/parser_raw.ml"
+                      
+                    in
+                    let _startpos__1_ = _startpos_e_ in
+                    let _startpos = _startpos__1_ in
+                    
+# 888 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos @ [_1] )
+# 38663 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _startpos__1_ = _startpos_e_ in
+                  let _endpos = _endpos__1_ in
+                  let _startpos = _startpos__1_ in
+                  
+# 907 "src/ocaml/preprocess/parser_raw.mly"
+  ( mark_rhs_docs _startpos _endpos;
+    _1 )
+# 38673 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 956 "src/ocaml/preprocess/parser_raw.mly"
+    ( x )
+# 38679 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1348 "src/ocaml/preprocess/parser_raw.mly"
+    ( items )
+# 38685 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 38691 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 876 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_str _startpos _endpos _1 )
+# 38700 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1341 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 38706 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
+        let _startpos = _startpos__1_ in
+        let _loc = (_startpos, _endpos) in
+        
+# 3883 "src/ocaml/preprocess/parser_raw.mly"
+    ( val_of_lwt_bindings ~loc:_loc _1 )
+# 38734 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1370 "src/ocaml/preprocess/parser_raw.mly"
+      ( val_of_let_bindings ~loc:_sloc _1 )
+# 38762 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : (Parsetree.extension) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _2 =
+              let _1 = _1_inlined1 in
+              
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38798 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _endpos__2_ = _endpos__1_inlined1_ in
+            let _endpos = _endpos__2_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 1373 "src/ocaml/preprocess/parser_raw.mly"
+        ( let docs = symbol_docs _sloc in
+          Pstr_extension (_1, add_docs_attrs docs _2) )
+# 38809 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined1_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 923 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstr ~loc:_sloc _1 )
+# 38819 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38825 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.attribute) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1376 "src/ocaml/preprocess/parser_raw.mly"
+        ( Pstr_attribute _1 )
+# 38851 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 923 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstr ~loc:_sloc _1 )
+# 38859 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38865 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1380 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_primitive _1 )
+# 38891 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 38899 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38905 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1382 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_primitive _1 )
+# 38931 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 38939 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38945 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = a;
+            MenhirLib.EngineTypes.startp = _startpos_a_;
+            MenhirLib.EngineTypes.endp = _endpos_a_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
+        let a : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) = Obj.magic a in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_a_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let _1 = 
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 38982 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                
+# 2965 "src/ocaml/preprocess/parser_raw.mly"
+  ( _1 )
+# 38987 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 2948 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 38993 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1384 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_type _1 )
+# 38999 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39009 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39015 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = priv;
+              MenhirLib.EngineTypes.startp = _startpos_priv_;
+              MenhirLib.EngineTypes.endp = _endpos_priv_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined2;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let priv : (Asttypes.private_flag) = Obj.magic priv in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let attrs2 =
+                  let _1 = _1_inlined3 in
+                  
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39102 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                let cs = 
+# 1107 "src/ocaml/preprocess/parser_raw.mly"
+    ( List.rev xs )
+# 39109 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let tid =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                  let _endpos = _endpos__1_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 39119 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _4 = 
+# 3689 "src/ocaml/preprocess/parser_raw.mly"
+                ( Recursive )
+# 39125 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let attrs1 =
+                  let _1 = _1_inlined1 in
+                  
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39132 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos = _endpos_attrs2_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 3202 "src/ocaml/preprocess/parser_raw.mly"
+    ( let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      Te.mk tid cs ~params ~priv ~attrs ~docs,
+      ext )
+# 39144 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3185 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39150 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1386 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_typext _1 )
+# 39156 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39166 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39172 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined4;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = priv;
+              MenhirLib.EngineTypes.startp = _startpos_priv_;
+              MenhirLib.EngineTypes.endp = _endpos_priv_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _7;
+                MenhirLib.EngineTypes.startp = _startpos__7_;
+                MenhirLib.EngineTypes.endp = _endpos__7_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined3;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = params;
+                    MenhirLib.EngineTypes.startp = _startpos_params_;
+                    MenhirLib.EngineTypes.endp = _endpos_params_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined2;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = _1_inlined1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _;
+                          MenhirLib.EngineTypes.semv = ext;
+                          MenhirLib.EngineTypes.startp = _startpos_ext_;
+                          MenhirLib.EngineTypes.endp = _endpos_ext_;
+                          MenhirLib.EngineTypes.next = {
+                            MenhirLib.EngineTypes.state = _menhir_s;
+                            MenhirLib.EngineTypes.semv = _1;
+                            MenhirLib.EngineTypes.startp = _startpos__1_;
+                            MenhirLib.EngineTypes.endp = _endpos__1_;
+                            MenhirLib.EngineTypes.next = _menhir_stack;
+                          };
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
+        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
+        let priv : (Asttypes.private_flag) = Obj.magic priv in
+        let _7 : unit = Obj.magic _7 in
+        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined4_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let attrs2 =
+                  let _1 = _1_inlined4 in
+                  
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39266 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos_attrs2_ = _endpos__1_inlined4_ in
+                let cs = 
+# 1107 "src/ocaml/preprocess/parser_raw.mly"
+    ( List.rev xs )
+# 39273 "src/ocaml/preprocess/parser_raw.ml"
+                 in
+                let tid =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
+                  let _endpos = _endpos__1_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 39283 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _4 =
+                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                  let _endpos = _endpos__1_ in
+                  let _startpos = _startpos__1_ in
+                  let _loc = (_startpos, _endpos) in
+                  
+# 3690 "src/ocaml/preprocess/parser_raw.mly"
+                ( not_expecting _loc "nonrec flag"; Recursive )
+# 39294 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let attrs1 =
+                  let _1 = _1_inlined1 in
+                  
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39302 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                let _endpos = _endpos_attrs2_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 3202 "src/ocaml/preprocess/parser_raw.mly"
+    ( let docs = symbol_docs _sloc in
+      let attrs = attrs1 @ attrs2 in
+      Te.mk tid cs ~params ~priv ~attrs ~docs,
+      ext )
+# 39314 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 3185 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39320 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1386 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_typext _1 )
+# 39326 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined4_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39336 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39342 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1388 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_exception _1 )
+# 39368 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39376 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39382 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = body;
+            MenhirLib.EngineTypes.startp = _startpos_body_;
+            MenhirLib.EngineTypes.endp = _endpos_body_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = ext;
+                  MenhirLib.EngineTypes.startp = _startpos_ext_;
+                  MenhirLib.EngineTypes.endp = _endpos_ext_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.module_expr) = Obj.magic body in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs2 =
+                let _1 = _1_inlined3 in
+                
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39447 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos_attrs2_ = _endpos__1_inlined3_ in
+              let name =
+                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                let _endpos = _endpos__1_ in
+                let _symbolstartpos = _startpos__1_ in
+                let _sloc = (_symbolstartpos, _endpos) in
+                
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 39459 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let attrs1 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39467 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos = _endpos_attrs2_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 1414 "src/ocaml/preprocess/parser_raw.mly"
+    ( let docs = symbol_docs _sloc in
+      let loc = make_loc _sloc in
+      let attrs = attrs1 @ attrs2 in
+      let body = Mb.mk name body ~attrs ~loc ~docs in
+      Pstr_module body, ext )
+# 39480 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1390 "src/ocaml/preprocess/parser_raw.mly"
+        ( _1 )
+# 39486 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined3_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39496 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39502 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = body;
+              MenhirLib.EngineTypes.startp = _startpos_body_;
+              MenhirLib.EngineTypes.endp = _endpos_body_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _4;
+                  MenhirLib.EngineTypes.startp = _startpos__4_;
+                  MenhirLib.EngineTypes.endp = _endpos__4_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = ext;
+                      MenhirLib.EngineTypes.startp = _startpos_ext_;
+                      MenhirLib.EngineTypes.endp = _endpos_ext_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _menhir_s;
+                        MenhirLib.EngineTypes.semv = _1;
+                        MenhirLib.EngineTypes.startp = _startpos__1_;
+                        MenhirLib.EngineTypes.endp = _endpos__1_;
+                        MenhirLib.EngineTypes.next = _menhir_stack;
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.module_binding list) = Obj.magic bs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.module_expr) = Obj.magic body in
+        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let a =
+                  let attrs2 =
+                    let _1 = _1_inlined3 in
+                    
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39583 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                  let name =
+                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                    let _endpos = _endpos__1_ in
+                    let _symbolstartpos = _startpos__1_ in
+                    let _sloc = (_symbolstartpos, _endpos) in
+                    
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 39595 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let attrs1 =
+                    let _1 = _1_inlined1 in
+                    
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39603 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos = _endpos_attrs2_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 1448 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let loc = make_loc _sloc in
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs _sloc in
+    ext,
+    Mb.mk name body ~attrs ~loc ~docs
+  )
+# 39618 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 39624 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1436 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39630 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1392 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_recmodule _1 )
+# 39636 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_bs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39646 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39652 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1394 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
+# 39678 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39686 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39692 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1396 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (body, ext) = _1 in (Pstr_open body, ext) )
+# 39718 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39726 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39732 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = bs;
+          MenhirLib.EngineTypes.startp = _startpos_bs_;
+          MenhirLib.EngineTypes.endp = _endpos_bs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined3;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = body;
+              MenhirLib.EngineTypes.startp = _startpos_body_;
+              MenhirLib.EngineTypes.endp = _endpos_body_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = params;
+                  MenhirLib.EngineTypes.startp = _startpos_params_;
+                  MenhirLib.EngineTypes.endp = _endpos_params_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = virt;
+                    MenhirLib.EngineTypes.startp = _startpos_virt_;
+                    MenhirLib.EngineTypes.endp = _endpos_virt_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _;
+                      MenhirLib.EngineTypes.semv = _1_inlined1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                      MenhirLib.EngineTypes.next = {
+                        MenhirLib.EngineTypes.state = _;
+                        MenhirLib.EngineTypes.semv = ext;
+                        MenhirLib.EngineTypes.startp = _startpos_ext_;
+                        MenhirLib.EngineTypes.endp = _endpos_ext_;
+                        MenhirLib.EngineTypes.next = {
+                          MenhirLib.EngineTypes.state = _menhir_s;
+                          MenhirLib.EngineTypes.semv = _1;
+                          MenhirLib.EngineTypes.startp = _startpos__1_;
+                          MenhirLib.EngineTypes.endp = _endpos__1_;
+                          MenhirLib.EngineTypes.next = _menhir_stack;
+                        };
+                      };
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let bs : (Parsetree.class_declaration list) = Obj.magic bs in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let body : (Parsetree.class_expr) = Obj.magic body in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 39804 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
+        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_bs_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let _1 =
+                let a =
+                  let attrs2 =
+                    let _1 = _1_inlined3 in
+                    
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39824 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
+                  let id =
+                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+                    let _endpos = _endpos__1_ in
+                    let _symbolstartpos = _startpos__1_ in
+                    let _sloc = (_symbolstartpos, _endpos) in
+                    
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 39836 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let attrs1 =
+                    let _1 = _1_inlined1 in
+                    
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39844 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _endpos = _endpos_attrs2_ in
+                  let _symbolstartpos = _startpos__1_ in
+                  let _sloc = (_symbolstartpos, _endpos) in
+                  
+# 1772 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    ext,
+    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
+  )
+# 39859 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 1115 "src/ocaml/preprocess/parser_raw.mly"
+    ( let (x, b) = a in x, b :: bs )
+# 39865 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1761 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39871 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1398 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (ext, l) = _1 in (Pstr_class l, ext) )
+# 39877 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos_bs_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39887 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39893 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 = 
+# 1400 "src/ocaml/preprocess/parser_raw.mly"
+        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
+# 39919 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 39927 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39933 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = thing;
+            MenhirLib.EngineTypes.startp = _startpos_thing_;
+            MenhirLib.EngineTypes.endp = _endpos_thing_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = ext;
+                MenhirLib.EngineTypes.startp = _startpos_ext_;
+                MenhirLib.EngineTypes.endp = _endpos_ext_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
+        let thing : (Parsetree.module_expr) = Obj.magic thing in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.structure_item) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs2 =
+                let _1 = _1_inlined2 in
+                
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 39991 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos_attrs2_ = _endpos__1_inlined2_ in
+              let attrs1 =
+                let _1 = _1_inlined1 in
+                
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40000 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              let _endpos = _endpos_attrs2_ in
+              let _symbolstartpos = _startpos__1_ in
+              let _sloc = (_symbolstartpos, _endpos) in
+              
+# 1485 "src/ocaml/preprocess/parser_raw.mly"
+  (
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc _sloc in
+    let docs = symbol_docs _sloc in
+    Incl.mk thing ~attrs ~loc ~docs, ext
+  )
+# 40014 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 1402 "src/ocaml/preprocess/parser_raw.mly"
+        ( pstr_include _1 )
+# 40020 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _endpos__1_ = _endpos__1_inlined2_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 940 "src/ocaml/preprocess/parser_raw.mly"
+    ( wrap_mkstr_ext ~loc:_sloc _1 )
+# 40030 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1404 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40036 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3752 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "-" )
+# 40061 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3753 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( "-." )
+# 40086 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _3;
+              MenhirLib.EngineTypes.startp = _startpos__3_;
+              MenhirLib.EngineTypes.endp = _endpos__3_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _3 : (bool) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.row_field) = let _5 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40141 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos__1_inlined1_ in
+        let _4 =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 40150 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 40155 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3472 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40161 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40171 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3458 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info = symbol_info _endpos in
+        let attrs = add_info_attrs info _5 in
+        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
+# 40182 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.row_field) = let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40216 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__2_ = _endpos__1_inlined1_ in
+        let _1 =
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40227 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3462 "src/ocaml/preprocess/parser_raw.mly"
+      ( let info = symbol_info _endpos in
+        let attrs = add_info_attrs info _2 in
+        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
+# 40238 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined1;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined1_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg = 
+# 124 "<standard.mly>"
+    ( None )
+# 40270 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos_arg_ = _endpos__1_inlined1_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40281 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40290 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 40323 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3656 "src/ocaml/preprocess/parser_raw.mly"
+                  ( let (s, _) = _1 in Pdir_string s )
+# 40336 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40344 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40350 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40362 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40371 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 40404 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3657 "src/ocaml/preprocess/parser_raw.mly"
+                  ( let (n, m) = _1 in Pdir_int (n ,m) )
+# 40417 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40425 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40431 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40443 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40452 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3658 "src/ocaml/preprocess/parser_raw.mly"
+                  ( Pdir_ident _1 )
+# 40494 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40502 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40508 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40520 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40529 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3659 "src/ocaml/preprocess/parser_raw.mly"
+                  ( Pdir_ident _1 )
+# 40571 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40579 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40585 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40597 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40606 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3660 "src/ocaml/preprocess/parser_raw.mly"
+                  ( Pdir_bool false )
+# 40648 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40656 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40662 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40674 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40683 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined1;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.toplevel_phrase) = let arg =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let x =
+            let _1 = 
+# 3661 "src/ocaml/preprocess/parser_raw.mly"
+                  ( Pdir_bool true )
+# 40725 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let _endpos = _endpos__1_ in
+            let _symbolstartpos = _startpos__1_ in
+            let _sloc = (_symbolstartpos, _endpos) in
+            
+# 945 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive_arg ~loc:_sloc _1 )
+# 40733 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 126 "<standard.mly>"
+    ( Some x )
+# 40739 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_arg_ = _endpos__1_inlined2_ in
+        let dir =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 40751 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_arg_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3652 "src/ocaml/preprocess/parser_raw.mly"
+    ( mk_directive ~loc:_sloc dir arg )
+# 40760 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = e;
+              MenhirLib.EngineTypes.startp = _startpos_e_;
+              MenhirLib.EngineTypes.endp = _endpos_e_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 40799 "src/ocaml/preprocess/parser_raw.ml"
+        ) = let _1 =
+          let _1 =
+            let _1 =
+              let attrs = 
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40806 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1355 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstrexp e attrs )
+# 40811 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            let _startpos__1_ = _startpos_e_ in
+            let _startpos = _startpos__1_ in
+            
+# 888 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_str _startpos @ [_1] )
+# 40819 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let _startpos__1_ = _startpos_e_ in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 876 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_str _startpos _endpos _1 )
+# 40828 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1153 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ptop_def _1 )
+# 40834 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xss_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 40866 "src/ocaml/preprocess/parser_raw.ml"
+        ) = let _1 =
+          let _1 = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 40871 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 876 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_str _startpos _endpos _1 )
+# 40879 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1157 "src/ocaml/preprocess/parser_raw.mly"
+    ( Ptop_def _1 )
+# 40885 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 40917 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1161 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 40921 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 40946 "src/ocaml/preprocess/parser_raw.ml"
+        ) = 
+# 1164 "src/ocaml/preprocess/parser_raw.mly"
+    ( raise End_of_file )
+# 40950 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_ty_ in
+        let _endpos = _endpos_ty_ in
+        let _v : (Parsetree.core_type) = 
+# 3364 "src/ocaml/preprocess/parser_raw.mly"
+      ( ty )
+# 40975 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let xs : (Parsetree.core_type list) = Obj.magic xs in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xs_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 =
+            let tys =
+              let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 41003 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1046 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 41008 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 3367 "src/ocaml/preprocess/parser_raw.mly"
+        ( Ptyp_tuple tys )
+# 41014 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 41024 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3369 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41030 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
+# 2708 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( (Some _2, None) )
+# 41062 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _4;
+          MenhirLib.EngineTypes.startp = _startpos__4_;
+          MenhirLib.EngineTypes.endp = _endpos__4_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _2;
+              MenhirLib.EngineTypes.startp = _startpos__2_;
+              MenhirLib.EngineTypes.endp = _endpos__2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _4 : (Parsetree.core_type) = Obj.magic _4 in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__4_ in
+        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
+# 2709 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( (Some _2, Some _4) )
+# 41108 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
+# 2710 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( (None, Some _2) )
+# 41140 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
+# 3039 "src/ocaml/preprocess/parser_raw.mly"
+      ( (Ptype_abstract, Public, None) )
+# 41158 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
+# 3041 "src/ocaml/preprocess/parser_raw.mly"
+      ( _2 )
+# 41190 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 41211 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3617 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 41219 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 41252 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3618 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 41262 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : (Parsetree.core_type) = Obj.magic _2 in
+        let _1 : (Asttypes.variance) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Parsetree.core_type * Asttypes.variance) = 
+# 3056 "src/ocaml/preprocess/parser_raw.mly"
+                                       ( _2, _1 )
+# 41294 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
+# 3049 "src/ocaml/preprocess/parser_raw.mly"
+      ( [] )
+# 41312 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = p;
+          MenhirLib.EngineTypes.startp = _startpos_p_;
+          MenhirLib.EngineTypes.endp = _endpos_p_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let p : (Parsetree.core_type * Asttypes.variance) = Obj.magic p in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_p_ in
+        let _endpos = _endpos_p_ in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
+# 3051 "src/ocaml/preprocess/parser_raw.mly"
+      ( [p] )
+# 41337 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xs;
+            MenhirLib.EngineTypes.startp = _startpos_xs_;
+            MenhirLib.EngineTypes.endp = _endpos_xs_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let ps =
+          let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 41377 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          
+# 1018 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 41382 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3053 "src/ocaml/preprocess/parser_raw.mly"
+      ( ps )
+# 41388 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = tyvar;
+          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
+          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let tyvar : (string) = Obj.magic tyvar in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_tyvar_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3061 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_var tyvar )
+# 41421 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos__1_ = _endpos_tyvar_ in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 41430 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3064 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41436 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Parsetree.core_type) = let _1 =
+          let _1 = 
+# 3063 "src/ocaml/preprocess/parser_raw.mly"
+      ( Ptyp_any )
+# 41462 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 921 "src/ocaml/preprocess/parser_raw.mly"
+    ( mktyp ~loc:_sloc _1 )
+# 41470 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3064 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41476 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.variance) = 
+# 3068 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Invariant )
+# 41494 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.variance) = 
+# 3069 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Covariant )
+# 41519 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.variance) = 
+# 3070 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Contravariant )
+# 41544 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_xss_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 866 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase list)
+# 41576 "src/ocaml/preprocess/parser_raw.ml"
+        ) = let _1 =
+          let _1 =
+            let ys = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 41582 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let xs =
+              let _1 = 
+# 954 "src/ocaml/preprocess/parser_raw.mly"
+    ( [] )
+# 41588 "src/ocaml/preprocess/parser_raw.ml"
+               in
+              
+# 1184 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41593 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 41599 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 880 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_def _startpos _endpos _1 )
+# 41608 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1177 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41614 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = xss;
+            MenhirLib.EngineTypes.startp = _startpos_xss_;
+            MenhirLib.EngineTypes.endp = _endpos_xss_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = e;
+                MenhirLib.EngineTypes.startp = _startpos_e_;
+                MenhirLib.EngineTypes.endp = _endpos_e_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let e : (Parsetree.expression) = Obj.magic e in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos_e_ in
+        let _endpos = _endpos__2_ in
+        let _v : (
+# 866 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase list)
+# 41660 "src/ocaml/preprocess/parser_raw.ml"
+        ) = let _1 =
+          let _1 =
+            let ys = 
+# 260 "<standard.mly>"
+    ( List.flatten xss )
+# 41666 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            let xs =
+              let _1 =
+                let x =
+                  let _1 =
+                    let _1 =
+                      let attrs = 
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41676 "src/ocaml/preprocess/parser_raw.ml"
+                       in
+                      
+# 1355 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkstrexp e attrs )
+# 41681 "src/ocaml/preprocess/parser_raw.ml"
+                      
+                    in
+                    
+# 898 "src/ocaml/preprocess/parser_raw.mly"
+  ( Ptop_def [_1] )
+# 41687 "src/ocaml/preprocess/parser_raw.ml"
+                    
+                  in
+                  let _startpos__1_ = _startpos_e_ in
+                  let _startpos = _startpos__1_ in
+                  
+# 896 "src/ocaml/preprocess/parser_raw.mly"
+  ( text_def _startpos @ [_1] )
+# 41695 "src/ocaml/preprocess/parser_raw.ml"
+                  
+                in
+                
+# 956 "src/ocaml/preprocess/parser_raw.mly"
+    ( x )
+# 41701 "src/ocaml/preprocess/parser_raw.ml"
+                
+              in
+              
+# 1184 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41707 "src/ocaml/preprocess/parser_raw.ml"
+              
+            in
+            
+# 267 "<standard.mly>"
+    ( xs @ ys )
+# 41713 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
+          let _endpos = _endpos__1_ in
+          let _startpos = _startpos__1_ in
+          
+# 880 "src/ocaml/preprocess/parser_raw.mly"
+                              ( extra_def _startpos _endpos _1 )
+# 41722 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 1177 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41728 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 41749 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (string) = 
+# 3542 "src/ocaml/preprocess/parser_raw.mly"
+                              ( _1 )
+# 41757 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : unit = Obj.magic _3 in
+        let _2 : (string) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (string) = 
+# 3543 "src/ocaml/preprocess/parser_raw.mly"
+                              ( _2 )
+# 41796 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : (string) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Longident.t) = 
+# 3600 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Lident _1 )
+# 41821 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _3;
+          MenhirLib.EngineTypes.startp = _startpos__3_;
+          MenhirLib.EngineTypes.endp = _endpos__3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _2;
+            MenhirLib.EngineTypes.startp = _startpos__2_;
+            MenhirLib.EngineTypes.endp = _endpos__2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _menhir_s;
+              MenhirLib.EngineTypes.semv = _1;
+              MenhirLib.EngineTypes.startp = _startpos__1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_;
+              MenhirLib.EngineTypes.next = _menhir_stack;
+            };
+          };
+        } = _menhir_stack in
+        let _3 : (string) = Obj.magic _3 in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : (Longident.t) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__3_ in
+        let _v : (Longident.t) = 
+# 3601 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Ldot(_1, _3) )
+# 41860 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = ty;
+          MenhirLib.EngineTypes.startp = _startpos_ty_;
+          MenhirLib.EngineTypes.endp = _endpos_ty_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = mutable_;
+                MenhirLib.EngineTypes.startp = _startpos_mutable__;
+                MenhirLib.EngineTypes.endp = _endpos_mutable__;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 41907 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_ty_ in
+        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let label =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 41920 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 41928 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 41934 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 = 
+# 3745 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 41939 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1918 "src/ocaml/preprocess/parser_raw.mly"
+      ( (label, mutable_, Cfk_virtual ty), attrs )
+# 41944 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _3;
+                MenhirLib.EngineTypes.startp = _startpos__3_;
+                MenhirLib.EngineTypes.endp = _endpos__3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : (Parsetree.expression) = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 41991 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 42004 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42012 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42018 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _1 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 42023 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1920 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
+# 42028 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _6;
+          MenhirLib.EngineTypes.startp = _startpos__6_;
+          MenhirLib.EngineTypes.endp = _endpos__6_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _5;
+            MenhirLib.EngineTypes.startp = _startpos__5_;
+            MenhirLib.EngineTypes.endp = _endpos__5_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined2;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _3;
+                MenhirLib.EngineTypes.startp = _startpos__3_;
+                MenhirLib.EngineTypes.endp = _endpos__3_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _6 : (Parsetree.expression) = Obj.magic _6 in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 42081 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__6_ in
+        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 42095 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42103 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42111 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _1 = 
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 42117 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        
+# 1920 "src/ocaml/preprocess/parser_raw.mly"
+      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
+# 42122 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
+        let _1_inlined1 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 42176 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined1 in
+        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
+        let _1 : (Parsetree.attributes) = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 42189 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42197 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__4_ = _startpos__1_inlined1_ in
+        let _2 = 
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42204 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
+        let _1 = 
+# 3748 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Fresh )
+# 42210 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          if _startpos__2_ != _endpos__2_ then
+            _startpos__2_
+          else
+            if _startpos__3_ != _endpos__3_ then
+              _startpos__3_
+            else
+              _startpos__4_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1923 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
+        (_4, _3, Cfk_concrete (_1, e)), _2
+      )
+# 42230 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _7;
+          MenhirLib.EngineTypes.startp = _startpos__7_;
+          MenhirLib.EngineTypes.endp = _endpos__7_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _6;
+            MenhirLib.EngineTypes.startp = _startpos__6_;
+            MenhirLib.EngineTypes.endp = _endpos__6_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _3;
+                  MenhirLib.EngineTypes.startp = _startpos__3_;
+                  MenhirLib.EngineTypes.endp = _endpos__3_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = _1_inlined1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _7 : (Parsetree.expression) = Obj.magic _7 in
+        let _6 : unit = Obj.magic _6 in
+        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
+        let _1_inlined2 : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 42290 "src/ocaml/preprocess/parser_raw.ml"
+        ) = Obj.magic _1_inlined2 in
+        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__7_ in
+        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _1 = 
+# 3516 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( _1 )
+# 42304 "src/ocaml/preprocess/parser_raw.ml"
+           in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42312 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _startpos__4_ = _startpos__1_inlined2_ in
+        let _2 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42321 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
+        let _1 = 
+# 3749 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Override )
+# 42328 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        let _endpos = _endpos__7_ in
+        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
+          _startpos__1_
+        else
+          if _startpos__2_ != _endpos__2_ then
+            _startpos__2_
+          else
+            if _startpos__3_ != _endpos__3_ then
+              _startpos__3_
+            else
+              _startpos__4_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 1923 "src/ocaml/preprocess/parser_raw.mly"
+      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
+        (_4, _3, Cfk_concrete (_1, e)), _2
+      )
+# 42347 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined3;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = ty;
+            MenhirLib.EngineTypes.startp = _startpos_ty_;
+            MenhirLib.EngineTypes.endp = _endpos_ty_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _5;
+              MenhirLib.EngineTypes.startp = _startpos__5_;
+              MenhirLib.EngineTypes.endp = _endpos__5_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined2;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _1_inlined1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _;
+                    MenhirLib.EngineTypes.semv = ext;
+                    MenhirLib.EngineTypes.startp = _startpos_ext_;
+                    MenhirLib.EngineTypes.endp = _endpos_ext_;
+                    MenhirLib.EngineTypes.next = {
+                      MenhirLib.EngineTypes.state = _menhir_s;
+                      MenhirLib.EngineTypes.semv = _1;
+                      MenhirLib.EngineTypes.startp = _startpos__1_;
+                      MenhirLib.EngineTypes.endp = _endpos__1_;
+                      MenhirLib.EngineTypes.next = _menhir_stack;
+                    };
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
+        let ty : (Parsetree.core_type) = Obj.magic ty in
+        let _5 : unit = Obj.magic _5 in
+        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
+        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
+        let ext : (string Location.loc option) = Obj.magic ext in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined3_ in
+        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
+          let _1 = _1_inlined3 in
+          
+# 3842 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42416 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos_attrs2_ = _endpos__1_inlined3_ in
+        let id =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42428 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let attrs1 =
+          let _1 = _1_inlined1 in
+          
+# 3846 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42436 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos_attrs2_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 2910 "src/ocaml/preprocess/parser_raw.mly"
+    ( let attrs = attrs1 @ attrs2 in
+      let loc = make_loc _sloc in
+      let docs = symbol_docs _sloc in
+      Val.mk id ty ~attrs ~loc ~docs,
+      ext )
+# 42449 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _endpos = _startpos in
+        let _v : (Asttypes.virtual_flag) = 
+# 3709 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Concrete )
+# 42467 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.virtual_flag) = 
+# 3710 "src/ocaml/preprocess/parser_raw.mly"
+                                                ( Virtual )
+# 42492 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.mutable_flag) = 
+# 3733 "src/ocaml/preprocess/parser_raw.mly"
+            ( Immutable )
+# 42517 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.mutable_flag) = 
+# 3734 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Mutable )
+# 42549 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.mutable_flag) = 
+# 3735 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Mutable )
+# 42581 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.private_flag) = 
+# 3740 "src/ocaml/preprocess/parser_raw.mly"
+            ( Public )
+# 42606 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.private_flag) = 
+# 3741 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Private )
+# 42638 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.private_flag) = 
+# 3742 "src/ocaml/preprocess/parser_raw.mly"
+                    ( Private )
+# 42670 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = xs;
+          MenhirLib.EngineTypes.startp = _startpos_xs_;
+          MenhirLib.EngineTypes.endp = _endpos_xs_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _1_inlined2;
+            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _4;
+              MenhirLib.EngineTypes.startp = _startpos__4_;
+              MenhirLib.EngineTypes.endp = _endpos__4_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _1_inlined1;
+                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _;
+                  MenhirLib.EngineTypes.semv = _2;
+                  MenhirLib.EngineTypes.startp = _startpos__2_;
+                  MenhirLib.EngineTypes.endp = _endpos__2_;
+                  MenhirLib.EngineTypes.next = {
+                    MenhirLib.EngineTypes.state = _menhir_s;
+                    MenhirLib.EngineTypes.semv = _1;
+                    MenhirLib.EngineTypes.startp = _startpos__1_;
+                    MenhirLib.EngineTypes.endp = _endpos__1_;
+                    MenhirLib.EngineTypes.next = _menhir_stack;
+                  };
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos_xs_ in
+        let _v : (Parsetree.with_constraint) = let _6 =
+          let _1 =
+            let xs = 
+# 253 "<standard.mly>"
+    ( List.rev xs )
+# 42732 "src/ocaml/preprocess/parser_raw.ml"
+             in
+            
+# 968 "src/ocaml/preprocess/parser_raw.mly"
+    ( xs )
+# 42737 "src/ocaml/preprocess/parser_raw.ml"
+            
+          in
+          
+# 3010 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42743 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__6_ = _endpos_xs_ in
+        let _5 =
+          let _1 = _1_inlined2 in
+          
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42752 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _3 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42763 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__6_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3235 "src/ocaml/preprocess/parser_raw.mly"
+      ( let lident = loc_last _3 in
+        Pwith_type
+          (_3,
+           (Type.mk lident
+              ~params:_2
+              ~cstrs:_6
+              ~manifest:_5
+              ~priv:_4
+              ~loc:(make_loc _sloc))) )
+# 42780 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _4;
+            MenhirLib.EngineTypes.startp = _startpos__4_;
+            MenhirLib.EngineTypes.endp = _endpos__4_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _;
+                MenhirLib.EngineTypes.semv = _2;
+                MenhirLib.EngineTypes.startp = _startpos__2_;
+                MenhirLib.EngineTypes.endp = _endpos__2_;
+                MenhirLib.EngineTypes.next = {
+                  MenhirLib.EngineTypes.state = _menhir_s;
+                  MenhirLib.EngineTypes.semv = _1;
+                  MenhirLib.EngineTypes.startp = _startpos__1_;
+                  MenhirLib.EngineTypes.endp = _endpos__1_;
+                  MenhirLib.EngineTypes.next = _menhir_stack;
+                };
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
+        let _4 : unit = Obj.magic _4 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.with_constraint) = let _5 =
+          let _1 = _1_inlined2 in
+          
+# 3312 "src/ocaml/preprocess/parser_raw.mly"
+    ( _1 )
+# 42835 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos__5_ = _endpos__1_inlined2_ in
+        let _3 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42847 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _endpos = _endpos__5_ in
+        let _symbolstartpos = _startpos__1_ in
+        let _sloc = (_symbolstartpos, _endpos) in
+        
+# 3248 "src/ocaml/preprocess/parser_raw.mly"
+      ( let lident = loc_last _3 in
+        Pwith_typesubst
+         (_3,
+           (Type.mk lident
+              ~params:_2
+              ~manifest:_5
+              ~loc:(make_loc _sloc))) )
+# 42862 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.with_constraint) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42913 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42924 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3256 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pwith_module (_2, _4) )
+# 42930 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _1_inlined2;
+          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
+          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _;
+            MenhirLib.EngineTypes.semv = _3;
+            MenhirLib.EngineTypes.startp = _startpos__3_;
+            MenhirLib.EngineTypes.endp = _endpos__3_;
+            MenhirLib.EngineTypes.next = {
+              MenhirLib.EngineTypes.state = _;
+              MenhirLib.EngineTypes.semv = _1_inlined1;
+              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
+              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
+              MenhirLib.EngineTypes.next = {
+                MenhirLib.EngineTypes.state = _menhir_s;
+                MenhirLib.EngineTypes.semv = _1;
+                MenhirLib.EngineTypes.startp = _startpos__1_;
+                MenhirLib.EngineTypes.endp = _endpos__1_;
+                MenhirLib.EngineTypes.next = _menhir_stack;
+              };
+            };
+          };
+        } = _menhir_stack in
+        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
+        let _3 : unit = Obj.magic _3 in
+        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_inlined2_ in
+        let _v : (Parsetree.with_constraint) = let _4 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42981 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        let _2 =
+          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
+          let _endpos = _endpos__1_ in
+          let _symbolstartpos = _startpos__1_ in
+          let _sloc = (_symbolstartpos, _endpos) in
+          
+# 884 "src/ocaml/preprocess/parser_raw.mly"
+    ( mkrhs _1 _sloc )
+# 42992 "src/ocaml/preprocess/parser_raw.ml"
+          
+        in
+        
+# 3258 "src/ocaml/preprocess/parser_raw.mly"
+      ( Pwith_modsubst (_2, _4) )
+# 42998 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = _1;
+          MenhirLib.EngineTypes.startp = _startpos__1_;
+          MenhirLib.EngineTypes.endp = _endpos__1_;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        } = _menhir_stack in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__1_ in
+        let _v : (Asttypes.private_flag) = 
+# 3261 "src/ocaml/preprocess/parser_raw.mly"
+                   ( Public )
+# 43023 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+      (fun _menhir_env ->
+        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
+        let {
+          MenhirLib.EngineTypes.state = _;
+          MenhirLib.EngineTypes.semv = _2;
+          MenhirLib.EngineTypes.startp = _startpos__2_;
+          MenhirLib.EngineTypes.endp = _endpos__2_;
+          MenhirLib.EngineTypes.next = {
+            MenhirLib.EngineTypes.state = _menhir_s;
+            MenhirLib.EngineTypes.semv = _1;
+            MenhirLib.EngineTypes.startp = _startpos__1_;
+            MenhirLib.EngineTypes.endp = _endpos__1_;
+            MenhirLib.EngineTypes.next = _menhir_stack;
+          };
+        } = _menhir_stack in
+        let _2 : unit = Obj.magic _2 in
+        let _1 : unit = Obj.magic _1 in
+        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
+        let _startpos = _startpos__1_ in
+        let _endpos = _endpos__2_ in
+        let _v : (Asttypes.private_flag) = 
+# 3262 "src/ocaml/preprocess/parser_raw.mly"
+                   ( Private )
+# 43055 "src/ocaml/preprocess/parser_raw.ml"
+         in
+        {
+          MenhirLib.EngineTypes.state = _menhir_s;
+          MenhirLib.EngineTypes.semv = Obj.repr _v;
+          MenhirLib.EngineTypes.startp = _startpos;
+          MenhirLib.EngineTypes.endp = _endpos;
+          MenhirLib.EngineTypes.next = _menhir_stack;
+        });
+    |]
+  
+  and trace =
+    None
+  
+end
+
+module MenhirInterpreter = struct
+  
+  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
+  
+  module TI = MenhirLib.Engine.Make (ET)
+  
+  include TI
+  
+  module Symbols = struct
+    
+    type _ terminal = 
+      | T_error : unit terminal
+      | T_WITH : unit terminal
+      | T_WHILE_LWT : unit terminal
+      | T_WHILE : unit terminal
+      | T_WHEN : unit terminal
+      | T_VIRTUAL : unit terminal
+      | T_VAL : unit terminal
+      | T_UNDERSCORE : unit terminal
+      | T_UIDENT : (
+# 764 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43093 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_TYPE : unit terminal
+      | T_TRY_LWT : unit terminal
+      | T_TRY : unit terminal
+      | T_TRUE : unit terminal
+      | T_TO : unit terminal
+      | T_TILDE : unit terminal
+      | T_THEN : unit terminal
+      | T_STRUCT : unit terminal
+      | T_STRING : (
+# 756 "src/ocaml/preprocess/parser_raw.mly"
+       (string * string option)
+# 43106 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_STAR : unit terminal
+      | T_SIG : unit terminal
+      | T_SEMISEMI : unit terminal
+      | T_SEMI : unit terminal
+      | T_RPAREN : unit terminal
+      | T_REC : unit terminal
+      | T_RBRACKET : unit terminal
+      | T_RBRACE : unit terminal
+      | T_QUOTE : unit terminal
+      | T_QUESTIONQUESTION : unit terminal
+      | T_QUESTION : unit terminal
+      | T_PRIVATE : unit terminal
+      | T_PREFIXOP : (
+# 742 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43123 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_PLUSEQ : unit terminal
+      | T_PLUSDOT : unit terminal
+      | T_PLUS : unit terminal
+      | T_PERCENT : unit terminal
+      | T_OR : unit terminal
+      | T_OPTLABEL : (
+# 735 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43133 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_OPEN : unit terminal
+      | T_OF : unit terminal
+      | T_OBJECT : unit terminal
+      | T_NONREC : unit terminal
+      | T_NEW : unit terminal
+      | T_MUTABLE : unit terminal
+      | T_MODULE : unit terminal
+      | T_MINUSGREATER : unit terminal
+      | T_MINUSDOT : unit terminal
+      | T_MINUS : unit terminal
+      | T_METHOD : unit terminal
+      | T_MATCH_LWT : unit terminal
+      | T_MATCH : unit terminal
+      | T_LPAREN : unit terminal
+      | T_LIDENT : (
+# 718 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43152 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_LET_LWT : unit terminal
+      | T_LETOP : (
+# 700 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43158 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_LET : unit terminal
+      | T_LESSMINUS : unit terminal
+      | T_LESS : unit terminal
+      | T_LBRACKETPERCENTPERCENT : unit terminal
+      | T_LBRACKETPERCENT : unit terminal
+      | T_LBRACKETLESS : unit terminal
+      | T_LBRACKETGREATER : unit terminal
+      | T_LBRACKETBAR : unit terminal
+      | T_LBRACKETATATAT : unit terminal
+      | T_LBRACKETATAT : unit terminal
+      | T_LBRACKETAT : unit terminal
+      | T_LBRACKET : unit terminal
+      | T_LBRACELESS : unit terminal
+      | T_LBRACE : unit terminal
+      | T_LAZY : unit terminal
+      | T_LABEL : (
+# 705 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43178 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INT : (
+# 704 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 43183 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INITIALIZER : unit terminal
+      | T_INHERIT : unit terminal
+      | T_INFIXOP4 : (
+# 698 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43190 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INFIXOP3 : (
+# 697 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43195 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INFIXOP2 : (
+# 696 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43200 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INFIXOP1 : (
+# 695 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43205 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INFIXOP0 : (
+# 694 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43210 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_INCLUDE : unit terminal
+      | T_IN : unit terminal
+      | T_IF : unit terminal
+      | T_HASHOP : (
+# 753 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43218 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_HASH : unit terminal
+      | T_GREATERRBRACKET : unit terminal
+      | T_GREATERRBRACE : unit terminal
+      | T_GREATERDOT : unit terminal
+      | T_GREATER : unit terminal
+      | T_FUNCTOR : unit terminal
+      | T_FUNCTION : unit terminal
+      | T_FUN : unit terminal
+      | T_FOR_LWT : unit terminal
+      | T_FOR : unit terminal
+      | T_FLOAT : (
+# 683 "src/ocaml/preprocess/parser_raw.mly"
+       (string * char option)
+# 43233 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_FINALLY_LWT : unit terminal
+      | T_FALSE : unit terminal
+      | T_EXTERNAL : unit terminal
+      | T_EXCEPTION : unit terminal
+      | T_EQUAL : unit terminal
+      | T_EOL : unit terminal
+      | T_EOF : unit terminal
+      | T_END : unit terminal
+      | T_ELSE : unit terminal
+      | T_DOWNTO : unit terminal
+      | T_DOTTILDE : unit terminal
+      | T_DOTOP : (
+# 699 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43249 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_DOTLESS : unit terminal
+      | T_DOTDOT : unit terminal
+      | T_DOT : unit terminal
+      | T_DONE : unit terminal
+      | T_DOCSTRING : (
+# 772 "src/ocaml/preprocess/parser_raw.mly"
+       (Docstrings.docstring)
+# 43258 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_DO : unit terminal
+      | T_CONSTRAINT : unit terminal
+      | T_COMMENT : (
+# 771 "src/ocaml/preprocess/parser_raw.mly"
+       (string * Location.t)
+# 43265 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_COMMA : unit terminal
+      | T_COLONGREATER : unit terminal
+      | T_COLONEQUAL : unit terminal
+      | T_COLONCOLON : unit terminal
+      | T_COLON : unit terminal
+      | T_CLASS : unit terminal
+      | T_CHAR : (
+# 663 "src/ocaml/preprocess/parser_raw.mly"
+       (char)
+# 43276 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_BEGIN : unit terminal
+      | T_BARRBRACKET : unit terminal
+      | T_BARBAR : unit terminal
+      | T_BAR : unit terminal
+      | T_BANG : unit terminal
+      | T_BACKQUOTE : unit terminal
+      | T_ASSERT : unit terminal
+      | T_AS : unit terminal
+      | T_ANDOP : (
+# 701 "src/ocaml/preprocess/parser_raw.mly"
+       (string)
+# 43289 "src/ocaml/preprocess/parser_raw.ml"
+    ) terminal
+      | T_AND : unit terminal
+      | T_AMPERSAND : unit terminal
+      | T_AMPERAMPER : unit terminal
+    
+    type _ nonterminal = 
+      | N_with_type_binder : (Asttypes.private_flag) nonterminal
+      | N_with_constraint : (Parsetree.with_constraint) nonterminal
+      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
+      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
+      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
+      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
+      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) nonterminal
+      | N_val_longident : (Longident.t) nonterminal
+      | N_val_ident : (string) nonterminal
+      | N_use_file : (
+# 866 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase list)
+# 43309 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_type_variance : (Asttypes.variance) nonterminal
+      | N_type_variable : (Parsetree.core_type) nonterminal
+      | N_type_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+      | N_type_parameter : (Parsetree.core_type * Asttypes.variance) nonterminal
+      | N_type_longident : (Longident.t) nonterminal
+      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
+      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
+      | N_tuple_type : (Parsetree.core_type) nonterminal
+      | N_toplevel_phrase : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 43322 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
+      | N_tag_field : (Parsetree.row_field) nonterminal
+      | N_subtractive : (string) nonterminal
+      | N_structure_item : (Parsetree.structure_item) nonterminal
+      | N_structure : (Parsetree.structure) nonterminal
+      | N_strict_binding : (Parsetree.expression) nonterminal
+      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
+      | N_single_attr_id : (string) nonterminal
+      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
+      | N_simple_pattern : (Parsetree.pattern) nonterminal
+      | N_simple_expr : (Parsetree.expression) nonterminal
+      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
+      | N_signed_constant : (Parsetree.constant) nonterminal
+      | N_signature_item : (Parsetree.signature_item) nonterminal
+      | N_signature : (Parsetree.signature) nonterminal
+      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
+      | N_seq_expr : (Parsetree.expression) nonterminal
+      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
+      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
+      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
+      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
+      | N_row_field : (Parsetree.row_field) nonterminal
+      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
+      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
+      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
+      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
+      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
+      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
+      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
+      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
+      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
+      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
+      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
+      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
+      | N_reversed_nonempty_llist_functor_arg_ : (Parsetree.functor_parameter list) nonterminal
+      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
+      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
+      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
+      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
+      | N_record_expr_content : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
+      | N_rec_flag : (Asttypes.rec_flag) nonterminal
+      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
+      | N_private_flag : (Asttypes.private_flag) nonterminal
+      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
+      | N_post_item_attribute : (Parsetree.attribute) nonterminal
+      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
+      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
+      | N_payload : (Parsetree.payload) nonterminal
+      | N_pattern_var : (Parsetree.pattern) nonterminal
+      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
+      | N_pattern_gen : (Parsetree.pattern) nonterminal
+      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
+      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
+      | N_pattern : (Parsetree.pattern) nonterminal
+      | N_parse_pattern : (
+# 872 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.pattern)
+# 43383 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_parse_expression : (
+# 870 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.expression)
+# 43388 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_parse_core_type : (
+# 868 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.core_type)
+# 43393 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
+      | N_optlabel : (string) nonterminal
+      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
+      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
+      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
+      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
+      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
+      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
+      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
+      | N_option_SEMI_ : (unit option) nonterminal
+      | N_option_BAR_ : (unit option) nonterminal
+      | N_opt_ampersand : (bool) nonterminal
+      | N_operator : (string) nonterminal
+      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
+      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
+      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
+      | N_nonempty_list_raw_string_ : (string list) nonterminal
+      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
+      | N_name_tag : (string) nonterminal
+      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
+      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
+      | N_mty_longident : (Longident.t) nonterminal
+      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
+      | N_module_type : (Parsetree.module_type) nonterminal
+      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
+      | N_module_name : (string option) nonterminal
+      | N_module_expr : (Parsetree.module_expr) nonterminal
+      | N_module_declaration_body : (Parsetree.module_type) nonterminal
+      | N_module_binding_body : (Parsetree.module_expr) nonterminal
+      | N_mod_longident : (Longident.t) nonterminal
+      | N_mod_ext_longident : (Longident.t) nonterminal
+      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) nonterminal
+      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
+      | N_match_case : (Parsetree.case) nonterminal
+      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
+      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
+      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
+      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
+      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
+      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
+      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
+      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
+      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
+      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
+      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
+      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
+      | N_list_attribute_ : (Parsetree.attributes) nonterminal
+      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
+      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
+      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
+      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
+      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
+      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
+      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
+      | N_let_pattern : (Parsetree.pattern) nonterminal
+      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
+      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
+      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
+      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
+      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
+      | N_label_longident : (Longident.t) nonterminal
+      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
+      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
+      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
+      | N_label_declaration : (Parsetree.label_declaration) nonterminal
+      | N_item_extension : (Parsetree.extension) nonterminal
+      | N_interface : (
+# 862 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.signature)
+# 43465 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_index_mod : (string) nonterminal
+      | N_implementation : (
+# 860 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.structure)
+# 43471 "src/ocaml/preprocess/parser_raw.ml"
+    ) nonterminal
+      | N_ident : (string) nonterminal
+      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) nonterminal
+      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) nonterminal
+      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) nonterminal
+      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) nonterminal
+      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
+      | N_functor_args : (Parsetree.functor_parameter list) nonterminal
+      | N_functor_arg : (Parsetree.functor_parameter) nonterminal
+      | N_function_type : (Parsetree.core_type) nonterminal
+      | N_fun_def : (Parsetree.expression) nonterminal
+      | N_fun_binding : (Parsetree.expression) nonterminal
+      | N_formal_class_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+      | N_floating_attribute : (Parsetree.attribute) nonterminal
+      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
+      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
+      | N_extension : (Parsetree.extension) nonterminal
+      | N_ext : (string Location.loc option) nonterminal
+      | N_expr : (Parsetree.expression) nonterminal
+      | N_direction_flag : (Asttypes.direction_flag) nonterminal
+      | N_core_type : (Parsetree.core_type) nonterminal
+      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
+      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
+      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
+      | N_constr_longident : (Longident.t) nonterminal
+      | N_constr_ident : (string) nonterminal
+      | N_constant : (Parsetree.constant) nonterminal
+      | N_clty_longident : (Longident.t) nonterminal
+      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
+      | N_class_type : (Parsetree.class_type) nonterminal
+      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
+      | N_class_signature : (Parsetree.class_type) nonterminal
+      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
+      | N_class_self_type : (Parsetree.core_type) nonterminal
+      | N_class_self_pattern : (Parsetree.pattern) nonterminal
+      | N_class_longident : (Longident.t) nonterminal
+      | N_class_fun_def : (Parsetree.class_expr) nonterminal
+      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
+      | N_class_field : (Parsetree.class_field) nonterminal
+      | N_class_expr : (Parsetree.class_expr) nonterminal
+      | N_attribute : (Parsetree.attribute) nonterminal
+      | N_attr_id : (string Location.loc) nonterminal
+      | N_atomic_type : (Parsetree.core_type) nonterminal
+      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
+      | N_alias_type : (Parsetree.core_type) nonterminal
+      | N_additive : (string) nonterminal
+    
+  end
+  
+  include Symbols
+  
+  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
+    
+    include TI
+    
+    include Symbols
+    
+    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
+    
+    let terminal =
+      fun t ->
+        match t with
+        | 0 ->
+            X (T T_error)
+        | 1 ->
+            X (T T_WITH)
+        | 2 ->
+            X (T T_WHILE_LWT)
+        | 3 ->
+            X (T T_WHILE)
+        | 4 ->
+            X (T T_WHEN)
+        | 5 ->
+            X (T T_VIRTUAL)
+        | 6 ->
+            X (T T_VAL)
+        | 7 ->
+            X (T T_UNDERSCORE)
+        | 8 ->
+            X (T T_UIDENT)
+        | 9 ->
+            X (T T_TYPE)
+        | 10 ->
+            X (T T_TRY_LWT)
+        | 11 ->
+            X (T T_TRY)
+        | 12 ->
+            X (T T_TRUE)
+        | 13 ->
+            X (T T_TO)
+        | 14 ->
+            X (T T_TILDE)
+        | 15 ->
+            X (T T_THEN)
+        | 16 ->
+            X (T T_STRUCT)
+        | 17 ->
+            X (T T_STRING)
+        | 18 ->
+            X (T T_STAR)
+        | 19 ->
+            X (T T_SIG)
+        | 20 ->
+            X (T T_SEMISEMI)
+        | 21 ->
+            X (T T_SEMI)
+        | 22 ->
+            X (T T_RPAREN)
+        | 23 ->
+            X (T T_REC)
+        | 24 ->
+            X (T T_RBRACKET)
+        | 25 ->
+            X (T T_RBRACE)
+        | 26 ->
+            X (T T_QUOTE)
+        | 27 ->
+            X (T T_QUESTIONQUESTION)
+        | 28 ->
+            X (T T_QUESTION)
+        | 29 ->
+            X (T T_PRIVATE)
+        | 30 ->
+            X (T T_PREFIXOP)
+        | 31 ->
+            X (T T_PLUSEQ)
+        | 32 ->
+            X (T T_PLUSDOT)
+        | 33 ->
+            X (T T_PLUS)
+        | 34 ->
+            X (T T_PERCENT)
+        | 35 ->
+            X (T T_OR)
+        | 36 ->
+            X (T T_OPTLABEL)
+        | 37 ->
+            X (T T_OPEN)
+        | 38 ->
+            X (T T_OF)
+        | 39 ->
+            X (T T_OBJECT)
+        | 40 ->
+            X (T T_NONREC)
+        | 41 ->
+            X (T T_NEW)
+        | 42 ->
+            X (T T_MUTABLE)
+        | 43 ->
+            X (T T_MODULE)
+        | 44 ->
+            X (T T_MINUSGREATER)
+        | 45 ->
+            X (T T_MINUSDOT)
+        | 46 ->
+            X (T T_MINUS)
+        | 47 ->
+            X (T T_METHOD)
+        | 48 ->
+            X (T T_MATCH_LWT)
+        | 49 ->
+            X (T T_MATCH)
+        | 50 ->
+            X (T T_LPAREN)
+        | 51 ->
+            X (T T_LIDENT)
+        | 52 ->
+            X (T T_LET_LWT)
+        | 53 ->
+            X (T T_LETOP)
+        | 54 ->
+            X (T T_LET)
+        | 55 ->
+            X (T T_LESSMINUS)
+        | 56 ->
+            X (T T_LESS)
+        | 57 ->
+            X (T T_LBRACKETPERCENTPERCENT)
+        | 58 ->
+            X (T T_LBRACKETPERCENT)
+        | 59 ->
+            X (T T_LBRACKETLESS)
+        | 60 ->
+            X (T T_LBRACKETGREATER)
+        | 61 ->
+            X (T T_LBRACKETBAR)
+        | 62 ->
+            X (T T_LBRACKETATATAT)
+        | 63 ->
+            X (T T_LBRACKETATAT)
+        | 64 ->
+            X (T T_LBRACKETAT)
+        | 65 ->
+            X (T T_LBRACKET)
+        | 66 ->
+            X (T T_LBRACELESS)
+        | 67 ->
+            X (T T_LBRACE)
+        | 68 ->
+            X (T T_LAZY)
+        | 69 ->
+            X (T T_LABEL)
+        | 70 ->
+            X (T T_INT)
+        | 71 ->
+            X (T T_INITIALIZER)
+        | 72 ->
+            X (T T_INHERIT)
+        | 73 ->
+            X (T T_INFIXOP4)
+        | 74 ->
+            X (T T_INFIXOP3)
+        | 75 ->
+            X (T T_INFIXOP2)
+        | 76 ->
+            X (T T_INFIXOP1)
+        | 77 ->
+            X (T T_INFIXOP0)
+        | 78 ->
+            X (T T_INCLUDE)
+        | 79 ->
+            X (T T_IN)
+        | 80 ->
+            X (T T_IF)
+        | 81 ->
+            X (T T_HASHOP)
+        | 82 ->
+            X (T T_HASH)
+        | 83 ->
+            X (T T_GREATERRBRACKET)
+        | 84 ->
+            X (T T_GREATERRBRACE)
+        | 85 ->
+            X (T T_GREATERDOT)
+        | 86 ->
+            X (T T_GREATER)
+        | 87 ->
+            X (T T_FUNCTOR)
+        | 88 ->
+            X (T T_FUNCTION)
+        | 89 ->
+            X (T T_FUN)
+        | 90 ->
+            X (T T_FOR_LWT)
+        | 91 ->
+            X (T T_FOR)
+        | 92 ->
+            X (T T_FLOAT)
+        | 93 ->
+            X (T T_FINALLY_LWT)
+        | 94 ->
+            X (T T_FALSE)
+        | 95 ->
+            X (T T_EXTERNAL)
+        | 96 ->
+            X (T T_EXCEPTION)
+        | 97 ->
+            X (T T_EQUAL)
+        | 98 ->
+            X (T T_EOL)
+        | 99 ->
+            X (T T_EOF)
+        | 100 ->
+            X (T T_END)
+        | 101 ->
+            X (T T_ELSE)
+        | 102 ->
+            X (T T_DOWNTO)
+        | 103 ->
+            X (T T_DOTTILDE)
+        | 104 ->
+            X (T T_DOTOP)
+        | 105 ->
+            X (T T_DOTLESS)
+        | 106 ->
+            X (T T_DOTDOT)
+        | 107 ->
+            X (T T_DOT)
+        | 108 ->
+            X (T T_DONE)
+        | 109 ->
+            X (T T_DOCSTRING)
+        | 110 ->
+            X (T T_DO)
+        | 111 ->
+            X (T T_CONSTRAINT)
+        | 112 ->
+            X (T T_COMMENT)
+        | 113 ->
+            X (T T_COMMA)
+        | 114 ->
+            X (T T_COLONGREATER)
+        | 115 ->
+            X (T T_COLONEQUAL)
+        | 116 ->
+            X (T T_COLONCOLON)
+        | 117 ->
+            X (T T_COLON)
+        | 118 ->
+            X (T T_CLASS)
+        | 119 ->
+            X (T T_CHAR)
+        | 120 ->
+            X (T T_BEGIN)
+        | 121 ->
+            X (T T_BARRBRACKET)
+        | 122 ->
+            X (T T_BARBAR)
+        | 123 ->
+            X (T T_BAR)
+        | 124 ->
+            X (T T_BANG)
+        | 125 ->
+            X (T T_BACKQUOTE)
+        | 126 ->
+            X (T T_ASSERT)
+        | 127 ->
+            X (T T_AS)
+        | 128 ->
+            X (T T_ANDOP)
+        | 129 ->
+            X (T T_AND)
+        | 130 ->
+            X (T T_AMPERSAND)
+        | 131 ->
+            X (T T_AMPERAMPER)
+        | _ ->
+            assert false
+    
+    and nonterminal =
+      fun nt ->
+        match nt with
+        | 197 ->
+            X (N N_additive)
+        | 196 ->
+            X (N N_alias_type)
+        | 195 ->
+            X (N N_and_let_binding)
+        | 194 ->
+            X (N N_atomic_type)
+        | 193 ->
+            X (N N_attr_id)
+        | 192 ->
+            X (N N_attribute)
+        | 191 ->
+            X (N N_class_expr)
+        | 190 ->
+            X (N N_class_field)
+        | 189 ->
+            X (N N_class_fun_binding)
+        | 188 ->
+            X (N N_class_fun_def)
+        | 187 ->
+            X (N N_class_longident)
+        | 186 ->
+            X (N N_class_self_pattern)
+        | 185 ->
+            X (N N_class_self_type)
+        | 184 ->
+            X (N N_class_sig_field)
+        | 183 ->
+            X (N N_class_signature)
+        | 182 ->
+            X (N N_class_simple_expr)
+        | 181 ->
+            X (N N_class_type)
+        | 180 ->
+            X (N N_class_type_declarations)
+        | 179 ->
+            X (N N_clty_longident)
+        | 178 ->
+            X (N N_constant)
+        | 177 ->
+            X (N N_constr_ident)
+        | 176 ->
+            X (N N_constr_longident)
+        | 175 ->
+            X (N N_constrain_field)
+        | 174 ->
+            X (N N_constructor_arguments)
+        | 173 ->
+            X (N N_constructor_declarations)
+        | 172 ->
+            X (N N_core_type)
+        | 171 ->
+            X (N N_direction_flag)
+        | 170 ->
+            X (N N_expr)
+        | 169 ->
+            X (N N_ext)
+        | 168 ->
+            X (N N_extension)
+        | 167 ->
+            X (N N_extension_constructor_rebind_BAR_)
+        | 166 ->
+            X (N N_extension_constructor_rebind_epsilon_)
+        | 165 ->
+            X (N N_floating_attribute)
+        | 164 ->
+            X (N N_formal_class_parameters)
+        | 163 ->
+            X (N N_fun_binding)
+        | 162 ->
+            X (N N_fun_def)
+        | 161 ->
+            X (N N_function_type)
+        | 160 ->
+            X (N N_functor_arg)
+        | 159 ->
+            X (N N_functor_args)
+        | 158 ->
+            X (N N_generalized_constructor_arguments)
+        | 157 ->
+            X (N N_generic_constructor_declaration_BAR_)
+        | 156 ->
+            X (N N_generic_constructor_declaration_epsilon_)
+        | 155 ->
+            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
+        | 154 ->
+            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
+        | 153 ->
+            X (N N_ident)
+        | 152 ->
+            X (N N_implementation)
+        | 151 ->
+            X (N N_index_mod)
+        | 150 ->
+            X (N N_interface)
+        | 149 ->
+            X (N N_item_extension)
+        | 148 ->
+            X (N N_label_declaration)
+        | 147 ->
+            X (N N_label_declaration_semi)
+        | 146 ->
+            X (N N_label_declarations)
+        | 145 ->
+            X (N N_label_let_pattern)
+        | 144 ->
+            X (N N_label_longident)
+        | 143 ->
+            X (N N_labeled_simple_expr)
+        | 142 ->
+            X (N N_labeled_simple_pattern)
+        | 141 ->
+            X (N N_let_binding_body)
+        | 140 ->
+            X (N N_let_bindings_ext_)
+        | 139 ->
+            X (N N_let_bindings_no_ext_)
+        | 138 ->
+            X (N N_let_pattern)
+        | 137 ->
+            X (N N_letop_binding_body)
+        | 136 ->
+            X (N N_letop_bindings)
+        | 135 ->
+            X (N N_list_and_class_declaration_)
+        | 134 ->
+            X (N N_list_and_class_description_)
+        | 133 ->
+            X (N N_list_and_class_type_declaration_)
+        | 132 ->
+            X (N N_list_and_module_binding_)
+        | 131 ->
+            X (N N_list_and_module_declaration_)
+        | 130 ->
+            X (N N_list_attribute_)
+        | 129 ->
+            X (N N_list_generic_and_type_declaration_type_kind__)
+        | 128 ->
+            X (N N_list_generic_and_type_declaration_type_subst_kind__)
+        | 127 ->
+            X (N N_list_post_item_attribute_)
+        | 126 ->
+            X (N N_list_signature_element_)
+        | 125 ->
+            X (N N_list_structure_element_)
+        | 124 ->
+            X (N N_list_text_csig_class_sig_field__)
+        | 123 ->
+            X (N N_list_text_cstr_class_field__)
+        | 122 ->
+            X (N N_list_text_str_structure_item__)
+        | 121 ->
+            X (N N_list_use_file_element_)
+        | 120 ->
+            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
+        | 119 ->
+            X (N N_lwt_binding)
+        | 118 ->
+            X (N N_lwt_bindings)
+        | 117 ->
+            X (N N_match_case)
+        | 116 ->
+            X (N N_meth_list)
+        | 115 ->
+            X (N N_method_)
+        | 114 ->
+            X (N N_mod_ext_longident)
+        | 113 ->
+            X (N N_mod_longident)
+        | 112 ->
+            X (N N_module_binding_body)
+        | 111 ->
+            X (N N_module_declaration_body)
+        | 110 ->
+            X (N N_module_expr)
+        | 109 ->
+            X (N N_module_name)
+        | 108 ->
+            X (N N_module_subst)
+        | 107 ->
+            X (N N_module_type)
+        | 106 ->
+            X (N N_module_type_declaration)
+        | 105 ->
+            X (N N_mty_longident)
+        | 104 ->
+            X (N N_mutable_flag)
+        | 103 ->
+            X (N N_mutable_virtual_flags)
+        | 102 ->
+            X (N N_name_tag)
+        | 101 ->
+            X (N N_nonempty_list_mkrhs_LIDENT__)
+        | 100 ->
+            X (N N_nonempty_list_raw_string_)
+        | 99 ->
+            X (N N_nonempty_type_kind)
+        | 98 ->
+            X (N N_open_declaration)
+        | 97 ->
+            X (N N_open_description)
+        | 96 ->
+            X (N N_operator)
+        | 95 ->
+            X (N N_opt_ampersand)
+        | 94 ->
+            X (N N_option_BAR_)
+        | 93 ->
+            X (N N_option_SEMI_)
+        | 92 ->
+            X (N N_option_preceded_AS_mkrhs_LIDENT___)
+        | 91 ->
+            X (N N_option_preceded_COLON_core_type__)
+        | 90 ->
+            X (N N_option_preceded_EQUAL_expr__)
+        | 89 ->
+            X (N N_option_preceded_EQUAL_module_type__)
+        | 88 ->
+            X (N N_option_preceded_EQUAL_pattern__)
+        | 87 ->
+            X (N N_option_preceded_EQUAL_seq_expr__)
+        | 86 ->
+            X (N N_option_type_constraint_)
+        | 85 ->
+            X (N N_optlabel)
+        | 84 ->
+            X (N N_paren_module_expr)
+        | 83 ->
+            X (N N_parse_core_type)
+        | 82 ->
+            X (N N_parse_expression)
+        | 81 ->
+            X (N N_parse_pattern)
+        | 80 ->
+            X (N N_pattern)
+        | 79 ->
+            X (N N_pattern_comma_list_pattern_)
+        | 78 ->
+            X (N N_pattern_comma_list_pattern_no_exn_)
+        | 77 ->
+            X (N N_pattern_gen)
+        | 76 ->
+            X (N N_pattern_no_exn)
+        | 75 ->
+            X (N N_pattern_var)
+        | 74 ->
+            X (N N_payload)
+        | 73 ->
+            X (N N_possibly_poly_core_type_)
+        | 72 ->
+            X (N N_possibly_poly_core_type_no_attr_)
+        | 71 ->
+            X (N N_post_item_attribute)
+        | 70 ->
+            X (N N_primitive_declaration)
+        | 69 ->
+            X (N N_private_flag)
+        | 68 ->
+            X (N N_private_virtual_flags)
+        | 67 ->
+            X (N N_rec_flag)
+        | 66 ->
+            X (N N_record_expr_content)
+        | 65 ->
+            X (N N_reversed_bar_llist_constructor_declaration_)
+        | 64 ->
+            X (N N_reversed_bar_llist_extension_constructor_)
+        | 63 ->
+            X (N N_reversed_bar_llist_extension_constructor_declaration_)
+        | 62 ->
+            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
+        | 61 ->
+            X (N N_reversed_nonempty_llist_functor_arg_)
+        | 60 ->
+            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
+        | 59 ->
+            X (N N_reversed_nonempty_llist_name_tag_)
+        | 58 ->
+            X (N N_reversed_nonempty_llist_typevar_)
+        | 57 ->
+            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
+        | 56 ->
+            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
+        | 55 ->
+            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
+        | 54 ->
+            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
+        | 53 ->
+            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
+        | 52 ->
+            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
+        | 51 ->
+            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
+        | 50 ->
+            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
+        | 49 ->
+            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
+        | 48 ->
+            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
+        | 47 ->
+            X (N N_row_field)
+        | 46 ->
+            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
+        | 45 ->
+            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
+        | 44 ->
+            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
+        | 43 ->
+            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
+        | 42 ->
+            X (N N_seq_expr)
+        | 41 ->
+            X (N N_sig_exception_declaration)
+        | 40 ->
+            X (N N_signature)
+        | 39 ->
+            X (N N_signature_item)
+        | 38 ->
+            X (N N_signed_constant)
+        | 37 ->
+            X (N N_simple_delimited_pattern)
+        | 36 ->
+            X (N N_simple_expr)
+        | 35 ->
+            X (N N_simple_pattern)
+        | 34 ->
+            X (N N_simple_pattern_not_ident)
+        | 33 ->
+            X (N N_single_attr_id)
+        | 32 ->
+            X (N N_str_exception_declaration)
+        | 31 ->
+            X (N N_strict_binding)
+        | 30 ->
+            X (N N_structure)
+        | 29 ->
+            X (N N_structure_item)
+        | 28 ->
+            X (N N_subtractive)
+        | 27 ->
+            X (N N_tag_field)
+        | 26 ->
+            X (N N_toplevel_directive)
+        | 25 ->
+            X (N N_toplevel_phrase)
+        | 24 ->
+            X (N N_tuple_type)
+        | 23 ->
+            X (N N_type_constraint)
+        | 22 ->
+            X (N N_type_kind)
+        | 21 ->
+            X (N N_type_longident)
+        | 20 ->
+            X (N N_type_parameter)
+        | 19 ->
+            X (N N_type_parameters)
+        | 18 ->
+            X (N N_type_variable)
+        | 17 ->
+            X (N N_type_variance)
+        | 16 ->
+            X (N N_use_file)
+        | 15 ->
+            X (N N_val_ident)
+        | 14 ->
+            X (N N_val_longident)
+        | 13 ->
+            X (N N_value)
+        | 12 ->
+            X (N N_value_description)
+        | 11 ->
+            X (N N_virtual_flag)
+        | 10 ->
+            X (N N_virtual_with_mutable_flag)
+        | 9 ->
+            X (N N_virtual_with_private_flag)
+        | 8 ->
+            X (N N_with_constraint)
+        | 7 ->
+            X (N N_with_type_binder)
+        | _ ->
+            assert false
+    
+    and lr0_incoming =
+      (16, "\000\000\000\006\000F\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000(\0000\000<\000H\000L\000N\000P\000R\000T\000V\000X\000`\000d\000h\000n\000\138\000\144\000\146\000\158\000\160\000\162\000\176\000\178\000\180\000\184\000\190\000\192\000\194\000\202\000\204\000\206\000\218\000\222\000\224\000\238\000\242\000\254\001\000\001\004\000C\000\216\001\131\001\131\001S\000\130\001\131\000\b\001S\001\005\000\018\000\022\001S\001\005\000\024\001S\001\005\000\026\000$\0008\000>\000T\001S\001\005\000h\000\227\000\216\000\018\000h\001w\001\129\001\005\000f\000&\000.\000>\000h\000v\001\131\000\014\001S\001\005\000f\000>\000@\000B\000D\000F\000H\000\\\000^\000l\000r\000\148\000\150\000\152\000\154\000\156\000\164\000\174\000\196\000\210\000f\000,\000\214\001/\000.\000p\000\132\001/\0002\000p\000\136\001/\0004\000p\000\232\000\246\000\250\001\002\001\006\001\b\000\193\000.\000\031\000\236\000\016\000\018\0006\000\018\000h\0013\000:\000h\000\236\000J\000f\000X\001S\001\005\000\018\000(\001\005\000\020\001S\001\005\000D\000R\000^\000f\000#\000\016\0006\0013\000%\000)\000i\000.\000\228\000)\000'\000h\000\196\000\018\000\026\000<\000f\000.\000h\000\236\000h\000r\000h\000\236\0006\0013\000x\000\248\000\189\000z\0002\000\189\000\132\000\166\001w\000\248\000\252\0013\000+\0001\000Z\000a\000&\000\229\000f\000\229\000.\000\216\000\018\000\216\000h\001Q\001\133\000\166\001w\000+\000\171\0001\000Z\001C\001\133\000&\001\133\001C\0007\000_\000m\0002\000\248\000_\000\205\000N\001\006\000\191\000q\001\006\001C\001\137\001\000\0006\0013\001\005\001\137\001\005\001Y\001\129\001\137\0007\0002\000_\000\248\000m\0002\000m\0002\000m\0002\000\174\000w\0002\000\205\000\205\000u\0006\0013\000\216\001\137\000\145\001\005\000,\001\005\000\214\000\233\001\133\000,\000\233\001\137\000\174\000\233\000\174\0001\000Z\001C\000\234\000.\000e\000.\000\166\001w\000+\000\228\001Y\001Y\000.\000\228\001Y\000\132\0002\000\136\000V\000\209\000h\000\236\000\145\001\005\000,\001\005\001%\0004\001'\001%\001)\000\190\000\214\000\248\000\018\000f\000\132\001c\000N\000\136\001%\0004\000g\000&\001\133\001]\001\133\000\236\001]\000Z\001\133\001\133\001=\001\005\000\131\000\248\001;\0019\001;\001Y\001[\001c\001=\001\005\000\136\001%\0004\000\214\000\199\001Y\000\196\000<\000\136\001%\0004\000\214\001[\000\136\001%\0004\000\214\001[\001[\000\232\000\199\000}\000\128\001\131\000\020\001S\001\005\000R\000'\000h\000-\000}\000\224\001Y\000\196\001Y\000\143\000\255\000\255\000+\000@\000<\000\139\000\248\001c\000\196\000f\000\234\000.\000\132\0002\000\190\000\227\000\216\000f\000\234\000.\001a\001\005\000\129\000\255\001;\001O\0019\001;\001M\001O\001c\000\196\001a\001\005\000)\000'\000h\000-\000}\000\255\000+\000@\000\139\000\129\000\255\000*\000B\000D\000L\000\250\001S\001\005\000\"\001\005\000P\001S\001\005\000f\000\016\000D\000\142\000\186\000^\000\142\000\186\000f\000D\000X\001S\001\005\000\016\000\018\000\219\000.\000\236\000X\000\020\000N\001\005\000f\000\014\001\005\000\\\000^\000b\001S\001\005\000d\001S\001\005\000h\000p\000j\001S\001\005\0000\000\135\000|\000\132\000\136\000h\000\227\000\216\000h\000\241\0004\001!\000\236\001Y\000\183\000\196\000\138\001S\001\005\000\142\000\166\000+\000\186\000\240\000\031\000E\000G\000K\000M\000\214\000M\001e\000\205\000\227\000\216\000f\000.\000\194\001S\001\005\000G\000\155\000\159\000\228\000\161\000\228\000\161\000\234\000\161\000\248\000\161\001\000\000\031\001\129\000\205\000\161\001Q\001a\000\161\000\161\000\161\000.\000\132\0002\000Y\0002\000\161\000,\000Y\000K\001a\000\161\000\177\000,\000\016\000,\000\187\000\241\000\244\000Y\000\244\000\031\000\030\000f\000h\000\236\001Y\001#\000.\000h\000:\000f\001#\000\196\000l\000\031\000J\000\016\000f\000\161\000\236\001Y\001\021\000\175\000.\000h\000\151\000f\000\020\000h\000\203\000\203\000.\000\140\000G\000\196\000n\000L\000\250\001S\001\005\000\176\001\005\000f\000.\000\219\000\236\000f\000\176\001\005\000{\001A\001?\000Z\000\211\000\215\000\004\000\020\000'\001!\000\196\000<\000\232\001\137\000\015\001\137\000}\000X\000\227\000\196\000\229\000\216\000\232\000\229\000\017\000o\001\004\000\017\000Z\000\215\001\129\000\229\000\216\000\018\0013\0013\001Q\001A\000\215\000.\000\215\000.\001?\000Z\000\169\000\221\000f\000.\000\221\000.\000\236\000\215\000.\000\169\001\129\000\227\001Q\000\221\000\160\000|\000\132\000\134\000h\000\196\000\136\000h\000\208\000\212\000\138\001S\001\005\000\242\001S\001\005\000\162\001S\001\005\000\178\001S\001\005\000\248\000\161\000\n\000\180\001S\001\005\000f\000\020\000\203\000.\000Z\000\182\001S\001\005\000\161\000\160\000\184\001S\001\005\000\161\000\196\000\250\000\029\000\031\000I\000\164\000I\000\166\000h\000\210\000f\000\254\001S\001\005\000I\000\216\000f\0009\000I\000\030\000h\000:\000h\000J\000I\000\205\000\227\000\216\000f\000.\000B\000D\000X\001S\001\005\000\221\000\236\000\215\000.\000\\\000^\000l\000G\000\236\001Y\000\196\000U\000c\000\228\000\205\000I\001Q\001a\001e\000\237\000\160\000U\000\239\001\025\000\160\000U\001U\000&\001U\000@\001U\000B\001U\000D\001U\000F\001U\000H\001U\000\\\001U\000^\001U\000r\001U\000\148\001U\000\150\001U\000\152\001U\000\154\001U\000\156\001U\000\174\001U\000\196\001U\000\228\001U\000\232\001U\000\234\001U\000\246\001U\001\006\001U\001\b\001U\001\129\001a\000I\001\139\001U\000,\000F\001\131\000U\000U\001\004\001\005\000E\000\236\001Y\000\196\000U\000\153\000\196\000U\000\228\000\161\000\234\000\161\000\248\000\161\001\000\000\031\001\129\000\155\000\157\000\228\000\161\001\027\000\255\001\135\001\135\001U\000\153\000\196\000U\001\017\000\160\000U\001\002\001\027\001\019\000\250\000U\000.\000|\000\244\000]\000\244\001U\000,\000]\000\132\0002\000]\0002\000\134\000[\000\170\000\136\000I\000\004\000W\001!\000\230\001Y\000\236\001Y\000\230\001Y\000/\000\173\000\181\000,\000W\000W\000\133\0004\000\227\000\216\000h\000\031\000\140\000I\000\210\000f\000]\000.\000p\001U\000\132\000]\0002\000p\001U\000\136\000]\0004\000p\001U\000\216\000f\000U\000.\000p\001U\000\132\000U\0002\000p\001U\000\136\001U\0004\000p\001U\000\227\000\210\000f\000]\000.\000p\001U\000\132\000]\0002\000p\001U\000\136\000]\0004\000p\001U\001!\000p\001U\000I\000y\001\031\001\031\001U\000U\000.\000\132\000U\0002\000\136\001U\0004\000\227\000\210\000f\000]\000.\000\132\000]\0002\000\136\000]\0004\001!\000]\000.\000\132\000]\0002\000\136\000]\0004\000U\000\028\000\206\001W\000U\000\222\000U\000\218\000U\000\222\000U\000\218\000\196\000U\001W\000U\000\222\000U\000\218\000U\000f\000\020\000\203\000.\000\236\001\133\000Z\000U\000G\001\029\001E\001E\000^\000\161\000.\000\236\001Y\000.\001E\001\029\001E\000U\000Z\000U\000Z\000\216\000U\000\235\000s\000\248\000\235\000\235\000U\000 \001U\000\204\001U\000\202\000U\000\202\000I\001U\000\172\000I\000\133\0004\001U\000\181\000,\000[\000\170\000[\000\170\000]\0002\000\244\000]\000\244\000U\001S\001\005\000\221\000\160\000U\000X\001S\001\005\000\219\000\196\000\221\000\236\000\215\000\196\000\221\000\225\000\160\000U\001A\000\225\000\194\001S\001\005\001c\001=\001\005\000\160\000U\001S\001\005\000\135\001\027\000\255\000U\000/\000\196\000U\000?\001\029\001G\001G\000?\000U\000\175\000.\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000u\000\216\001Y\000\196\000U\000/\000\196\000U\000?\001\027\000\255\001U\000U\000\004\000s\000U\000\004\000s\001U\000.\000\230\000\215\000.\000\236\000\215\000.\000\230\000\215\000.\000\221\000\215\000.\000\161\000.\000\236\001Y\000.\001u\000\014\000\250\001\005\000\209\000h\000\196\000U\000/\000\196\000U\000\027\000\255\001\005\000\012\000V\000V\000\012\000\021\000h\000\236\001Y\000\209\000h\000\196\000U\000/\000\196\000U\000`\000\250\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000u\000\216\001Y\000\147\000\196\000U\001Y\000?\000\231\000\255\001\005\000\012\000<\000<\000\012\000\019\000h\000\236\000\147\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\147\000\196\000U\000?\000t\001\131\000:\000\161\000\n\000U\000X\000\020\001S\001\005\0013\000\196\000\215\000\179\000\255\001S\001\005\0000\000\219\000\225\000\255\001\004\001\005\000\219\000\225\000\255\001\t\001\t\000\219\000\225\000\255\000~\001\131\000\158\001S\001\005\000\221\000\255\000\192\001S\001\005\000\031\000\236\001Y\000\196\000$\000\201\000\201\000\255\000\194\001S\001\005\001c\000\196\001a\001\005\000\255\001=\001\005\000\255\000\236\000*\000L\000\250\001S\001\005\000\229\000\255\001S\001\005\000\229\000\255\000X\001S\001\005\000\018\000\232\000\229\000\255\0000\000\219\000\236\000\215\000\255\001\004\001\005\000\219\000\236\000\215\000\255\001\007\001\007\000\219\000\196\000\227\000\255\000\236\000\215\000\223\000\255\001A\000\223\000\158\001S\001\005\000\215\000\255\000\194\001S\001\005\001c\000\238\000\020\001S\001\005\000\012\000\023\000\132\000i\0002\001I\000h\000\196\000P\001\005\000f\001Y\000.\001s\000\014\001\005\000\012\000V\000V\000\012\000\207\000h\000\236\001Y\000\255\000`\001\005\000\012\000<\000<\000\012\000\137\000h\000\236\000\147\000\255\000\146\001\005\000h\000n\000L\000\250\001\005\000\227\000\160\000\132\000k\0002\000\229\000\216\000h\001g\000\228\001Y\001Y\001Q\001g\001o\001\129\001\005\000\227\000\160\001o\001o\000\255\000\224\001\005\001Y\000\196\001Y\001_\000\255\000\249\000\202\001+\000\255\001K\001q\000\249\001o\000\255\001\004\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\001\011\001S\001\005\000\023\001I\000h\000\236\000h\000\236\0001\000Z\000\132\001Y\0001\000Z\000\171\0001\000Z\000\229\000\216\000h\001Q\001k\001o\001k\001k\001k\000\255\001\004\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001\r\000\025\000O\000S\000\141\000\195\000\213\000\217\000\253\001+\000\255\0015\001\004\001\005\000'\000h\000-\000}\000\255\001\003\001\003\0017\001\004\001\005\000'\000h\000\232\000\199\000}\000\255\001\001\001\001\001K\001i\000\253\000Q\000\253\001Y\000\238\001S\001\005\000\023\001I\000h\000\196\000P\001\005\001u\000\144\001\005\000U\000\255\000\146\000\250\001\005\000f\000n\000F\001\131\001\005\000\135\001\027\000\255\000L\000\250\001\005\000\227\000\160\000\132\000k\0002\001w\000\180\001\005\001\029\000Z\001\023\000\160\001Q\001m\000y\001w\001\127\001\129\001\135\001\127\001y\001y\001\127\001\005\000\227\000\160\001\127\001\005\000\135\001\027\000\255\001\127\000.\000\236\001k\000.\001\127\001\000\000h\000\185\000\255\001\005\001\127\000\185\000\255\000\224\001\005\001_\000\255\000\247\000\202\001+\000\255\001K\001}\000\247\001\127\000\236\001k\000\196\001\127\001\029\001{\001{\000\255\001\004\001\005\000\023\001I\000h\001{\000\255\001\015\001\015\000\025\000;\000n\000A\000S\000\141\000\197\000\213\000\237\000\251\001\025\001+\000\255\0015\001\003\001K\001i\000=\000U\000\255\000\251\000\149\0002\000\237\000\251\001\025\000\149\0002\000\247\000\202\000=\000\202\000\221\000\255\001S\001\005\000\221\000\255\000U\000\255\000\251\000\251\000\149\0002\000\255\000+\000@\000\139\000\127\000\255\001;\0019\001;\000'\000h\000\232\000\199\000}\000\255\000+\000@\000\139\000\127\000\255\000Q\000\202\000\215\000.\001Y\000\255\000\149\0002\000I\000X\001S\001\005\000\221\000.\000\236\000\215\000.\000U\000.\000/\000.\000U\000\004\000s\000U\000\004\000s\000\188\000U\000\188\000U\000U\000\222\000U\000\218\000\149\0002\001\005\000U\000\222\000U\000\218\000=\000\200\0011\000\000\000Q\000\200\001-\000\000\000\167\001Y\000\200\000\000\000U\000\200\000\165\000\000\000\161\000\200\000\163\000\000\000\166\0013\000\026\000$\000\142\000\190\000\029\000\227\000\216\000\200\0003\0005\000*\000;\000\245\000U\000\255\000*\000\245\000*\000\000\000*\0005\000;\000\243\000\243\000U\000\255\000\243\000\243\000!\000U\000\255\000\243\000\200\000\243\000\200")
+    
+    and rhs =
+      ((16, "\0011\001-\000\167\000\165\000\163\0003\000!\000D\000B\001C\001\137\001\000\0006\0013\001\004\001\005\001\027\000\255\000f\001Y\000.\000f\000X\001S\001\005\000\215\000.\0006\0013\000\016\000+\001\133\000+\000f\000e\000.\000+\000r\000\233\000\174\000r\000\174\000\166\001w\001\133\000\166\001w\000f\000e\000.\000\166\001w\000\132\0007\0002\000\132\000\248\000m\0002\000\132\000_\000\248\000m\0002\000z\000\189\000m\0002\000z\0002\000x\000\189\000m\0002\000x\000\189\000m\000\174\000w\0002\001Q\000C\000C\000\216\001\131\000\130\001\131\000\149\0002\001m\000\180\001\005\001y\001\023\000\160\001\127\000n\000L\001\005\000\227\000\160\001\127\000n\000L\000\250\001\005\000\227\000\160\001\127\001\127\001\129\001m\000y\001Q\000\146\001\005\001\127\000\185\000\255\000\146\000\250\001\005\001\127\000\185\000\255\000\014\000\027\000\255\000`\000\231\000\255\000\224\001\005\001_\000\255\000\144\001\005\000U\000\255\001+\000\255\001K\000\196\001\127\000\236\001k\000\196\001\127\001\029\001{\001\029\000Z\001\127\001\029\001y\000h\000\227\000\216\000h\000f\000\161\000.\000f\000\161\000\236\001Y\000.\000f\001Y\000.\000\146\001\005\001o\000\255\000\014\001\005\000\207\000h\000\236\001Y\000\255\000`\001\005\000\137\000h\000\236\000\147\000\255\000\224\001\005\001_\000\255\001+\000\255\001K\001g\000\132\000k\0002\001g\001Q\000P\001\005\001s\000\249\000\202\001o\001\129\000n\000L\001\005\000\227\000\160\001o\000n\000L\000\250\001\005\000\227\000\160\001o\000f\001\127\000.\001w\000\132\000k\0002\001w\000f\001\127\000\236\001k\000.\000P\001\005\001u\000\247\000\202\001o\000\171\0001\000Z\001k\000h\000\236\0001\000Z\001k\0001\000Z\001k\000\238\000\020\001S\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\000h\000\229\000\216\000h\000\142\000\240\000$\000\186\000\018\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\000\227\000\227\000\216\000f\000\234\000.\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\001Y\000\196\001Y\001\133\000g\000&\001\133\000\136\001%\0004\000\248\000\131\001\137\001Y\001\129\000\028\000\206\000\237\000\160\000U\000b\001S\001\005\000U\000\004\000s\000\022\001S\001\005\000U\000\022\001S\001\005\000U\000\004\000s\000\022\001S\001\005\000U\000\188\000U\000\022\001S\001\005\000U\000\004\000s\000\188\000U\000\006\001S\001\005\000U\000\222\000U\000\218\000\182\001S\001\005\000\161\000\196\000U\001W\000U\000\222\000U\000\218\000\182\001S\001\005\000\161\000\160\000U\000\222\000U\000\218\000I\000n\000X\001S\001\005\000\219\000\225\000\160\000U\000n\000\194\001S\001\005\001c\001=\001\005\000\160\000U\000n\000L\001S\001\005\000\221\000\160\000U\000n\000L\000\250\001S\001\005\000\221\000\160\000U\000\178\001S\001\005\000s\000\180\001S\001\005\001\029\001E\000\180\001S\001\005\000f\000\020\000\203\000.\001E\000d\001S\001\005\000U\000\004\000s\000\024\001S\001\005\000U\000\004\000s\000\162\001S\001\005\000U\000 \001U\000\204\001U\000\162\001S\001\005\000U\000 \001U\000\b\001S\001\005\000U\000\222\000U\000\218\000\184\001S\001\005\000\161\000\196\000U\001W\000U\000\222\000U\000\218\000\254\001S\001\005\000I\000\138\001S\001\005\000I\000P\001S\001\005\001u\000\247\000\202\000I\000y\000c\001a\000I\000\205\000I\001U\000\156\001U\001U\000\154\001U\001U\000\152\001U\001U\000\150\001U\001U\000\148\001U\001U\000D\001U\001U\000B\001U\001U\000@\001U\001U\000^\001U\001U\000\\\001U\001U\000&\001U\001U\000F\001U\001U\000\196\001U\001U\000r\001U\001U\000\174\001U\001U\000H\001U\001U\000\246\001U\001U\001\006\001U\001U\001\b\001U\001U\000\232\001U\0009\001U\001\139\001U\001\025\000\160\000U\000l\001\017\000\160\000U\001U\000\234\001U\000h\000p\001U\000I\000\216\001!\000p\001U\000I\000\216\000f\000U\000.\000p\001U\000I\000\216\000\132\000U\0002\000p\001U\000I\000\216\000\136\001U\0004\000p\001U\000I\000\210\000\132\000]\0002\000p\001U\000I\000\210\000f\000]\000.\000p\001U\000I\000\210\000\136\000]\0004\000p\001U\000I\000\216\000\227\000\210\000\132\000]\0002\000p\001U\000I\000\216\000\227\000\210\000f\000]\000.\000p\001U\000I\000\216\000\227\000\210\000\136\000]\0004\000p\001U\001U\001\129\000F\001\131\000v\001\131\000\149\0002\000\248\001c\000\196\001a\001\005\001c\000\196\001a\001\005\000~\001\131\000\149\0002\000\132\000i\0002\000?\000/\000\196\000U\000Z\000U\000\236\001\133\000Z\000U\001\029\001E\000f\000\020\000\203\000.\001E\0001\000\171\0001\000Z\001C\000h\000\236\0001\000Z\001C\0001\000Z\001C\000f\000.\000f\000\219\000\236\000\215\000.\000{\000N\001]\000\236\001]\000Z\001\133\000\236\001\133\000\248\001c\001=\001\005\001c\001=\001\005\000\020\001S\001\005\000'\000h\000\232\000\199\000}\000\255\000\020\001S\001\005\000R\000'\000h\000\232\000\199\000}\000\255\000\020\001S\001\005\000'\000h\000-\000}\000\255\000\020\001S\001\005\000R\000'\000h\000-\000}\000\255\000\018\000h\000=\000\200\000,\000\214\000Q\000\200\000t\001\131\000\149\0002\000\209\000h\000\236\000\145\001\005\000\209\000h\000\236\000\145\001\005\000,\001\005\001)\001'\001'\001%\000h\000h\000\236\001Y\000h\000\227\000\216\000h\000I\000\140\000I\000\030\000h\000:\000h\000J\000I\000:\000f\001#\000\175\000.\000:\000h\000J\000f\001\021\000\175\000.\000J\000\151\000\030\000f\001#\000.\000\030\000h\000\140\000G\000G\000\031\000?\000\031\000/\000\196\000U\000\031\000\236\000u\000\216\001Y\000\196\000U\000\031\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\153\000\196\000U\000E\000\236\001Y\000\196\000U\000n\001S\001\005\000\135\001\027\000\255\001\025\001\135\000n\001\005\000\135\001\027\000\255\000n\000F\001\131\001\005\000\135\001\027\000\255\001\023\001\135\000\161\000\161\000\236\001Y\000\031\000?\000G\000\236\001Y\000\196\000U\000\153\000\196\000U\001\019\001\017\001\002\001\027\001\004\001\005\000\023\001I\000h\001{\000\255\001\015\001\004\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001\004\001\005\000\023\001I\000h\000\196\001o\000\255\001\011\001\004\001\005\000\219\000\225\000\255\001\t\001\004\001\005\000\219\000\236\000\215\000\255\001\007\001\129\001\005\001\004\001\005\000'\000h\000-\000}\000\255\001\003\001\004\001\005\000'\000h\000\232\000\199\000}\000\255\001\001\000\143\000\255\000*\000\253\000O\000\253\000*\000\251\000*\000U\000\255\000\251\000;\000\251\001q\000\249\001}\000\247\000;\000\245\000*\000\243\000*\000U\000\255\000\243\000;\000\243\0005\000\243\001!\000\183\000\177\001!\000\183\000\177\000,\001!\000\183\000\177\000,\000\016\000\187\001!\000\183\000\177\000,\000\241\000j\001S\001\005\000\135\001\027\000\255\000\239\000\237\001\135\000\161\000Z\000U\000\161\000\n\000U\000Z\000U\000\161\000Z\000\216\000h\000\236\000\145\001\005\000,\001\005\000\233\001\133\000,\000\233\000h\000\236\000\145\001\005\000,\001\005\001\133\000,\000h\000\236\000\145\001\005\001\133\000\214\001\005\000\019\000h\000\236\000\147\001\005\000\139\000h\000?\000\250\001\005\000\139\000h\000?\001\005\000\139\000h\000\236\000\147\000\196\000U\000\250\001\005\000\139\000h\000\236\000\147\000\196\000U\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\250\001\005\000\139\000h\000\236\000\020\000\203\000\216\001Y\000\196\000U\000\018\000\229\000\216\000\018\000\229\000f\000\229\000.\000\018\000\227\000\216\000\018\000\196\000\221\000\236\000\215\000\196\000\221\001A\000\225\000\236\000\215\001A\000\223\000\"\001\005\000=\000\202\000\176\001\005\001?\000Z\000\221\000\169\000\221\001\129\000\227\000\221\000\169\000\221\000f\000.\001Q\000\018\000\016\000X\001S\001\005\000\018\000\232\000\229\000\255\000(\001\005\000Q\000\202\000\176\001\005\001?\000Z\000\215\000X\000\020\000N\001\005\000\221\000f\000\215\000.\000\215\001\129\000\211\000\215\000Z\000\215\000\215\000\004\000o\001Q\000X\000\020\001S\001\005\0013\000\179\000\255\0013\000\229\000\216\0013\000V\000V\000\012\000V\000\012\000\012\000V\000\252\0013\000h\000h\000\203\000$\000$\000\201\001Y\000<\001Y\001[\000<\001[\001Y\000\196\001[\001Y\000\196\000<\001[\000\214\000<\000\214\001Y\000\196\000\214\001Y\000\196\000<\000\214\000\136\001%\0004\000<\000\136\001%\0004\001Y\000\196\000\136\001%\0004\001Y\000\196\000<\000\136\001%\0004\000L\001S\001\005\000\221\000\255\000L\000\250\001S\001\005\000\221\000\255\000L\001S\001\005\000\229\000\255\000L\000\250\001S\001\005\000\229\000\255\000>\000l\001\002\000\210\000f\001/\000.\000\210\000f\001/\000.\000p\000\210\000\132\001/\0002\000\210\000\132\001/\0002\000p\000\210\000\136\001/\0004\000\210\000\136\001/\0004\000p\000\164\000\250\000\156\000\154\000\152\000\150\000\148\000D\000B\000@\000^\000\\\000&\000F\000\196\000r\000\174\000H\000\246\001\006\001\b\000\232\001\006\000\248\000,\001\000\000h\000\236\001Y\000\196\001U\000\196\000\215\000\196\000\161\000\196\000U\000/\000J\000:\000h\000\236\000f\000\221\000\236\000\215\000.\000f\000\221\000.\000f\000\014\001\005\001U\000.\000f\000\014\001\005\001U\000\236\000\215\000.\000f\000\014\001\005\001U\000\236\000\215\000\230\000\215\000.\000f\000\014\001\005\001U\000\230\000\215\000.\001Y\000\200\000U\000\200\000\161\000\200\000\161\000\234\000\161\000\161\001\129\000\155\000\161\001\000\000\031\000\159\000\161\000\248\000\161\000\194\001S\001\005\000\161\000\159\000\228\000\161\000\161\000\228\000\161\000\157\000\228\000\161\000\153\000\228\000\161\000G\001a\000\161\000\205\000\161\000\138\001S\001\005\000G\000\153\000\234\000\161\000\153\001\129\000\155\000\153\001\000\000\031\000\157\000\153\000\248\000\161\000h\000\016\000=\000\236\000Q\000\236\001Y\000:\000\161\000:\000\161\000\n\000U\001Y\000u\000\216\001Y\001\137\000u\000\216\001\137\000\128\001\131\000\149\0002\000\192\001S\001\005\000\031\000\236\001Y\000\196\000\201\000\255\000<\000<\000\012\000<\000\012\000\012\000<\0000\000W\000I\000\004\000W\0019\001;\000\131\001;\0019\001M\001;\001O\000\129\001;\000\129\001O\0019\001;\000\127\001;\000}\000\224\001Y\000\196\001Y\001A\000{\001A\001\031\000y\001\031\000\205\000w\000\205\0006\0013\000u\0006\0013\000\235\000\248\000\235\000s\000\248\000\235\001\137\000q\001\006\001\137\000\017\000o\001\004\000\017\000_\000m\000\248\000_\001Y\000k\000\228\001Y\000)\000i\000\228\000)\001\133\000g\000&\001\133\000e\000\228\001Y\001Y\000\228\001Y\000c\000\228\001U\001U\000\228\001U\000a\000&\001\133\001\133\000&\001\133\0007\001Y\001U\001U\000,\001U\000,\000]\000h\000\181\000h\000\181\000,\000h\000\181\000,\000[\000\161\000\161\000,\000\161\000,\000Y\001!\000\173\000\181\001!\000\173\000\181\000,\001!\000\173\000\181\000,\000W\001U\001U\000,\001U\000,\000U\001U\000,\000F\001\131\000U\000\194\001S\001\005\001c\001=\001\005\000\255\000\253\001+\000\255\001K\000\025\000\141\0015\001\003\0017\001\001\000\020\001S\001\005\000'\000+\000@\000\139\000\127\000\255\000\020\001S\001\005\000R\000'\000+\000@\000\139\000\127\000\255\000S\000X\001S\001\005\000\219\000\223\000\255\000X\001S\001\005\000\219\000\196\000\227\000\255\000\217\000X\001S\001\005\0000\000\219\000\236\000\215\000\255\001\007\000\213\000\195\000\158\001S\001\005\000\215\000\255\000\238\001S\001\005\000\023\001I\000h\000\236\001k\000\255\001\r\001i\001e\000^\000\142\000^\000\186\000D\000\142\000D\000\186\000\136\000\241\0004\000\132\000Y\0002\000|\000Y\000\244\000|\000\244\000\212\001U\000\172\000\208\000I\000f\000U\000.\000f\000U\000/\000.\000I\000\216\000f\000U\000.\000I\000\216\000\132\000U\0002\000I\000\210\000\132\000]\0002\000I\000\210\000f\000]\000.\000I\000\210\000\136\000]\0004\000I\000\216\000\227\000\210\000\132\000]\0002\000I\000\216\000\227\000\210\000f\000]\000.\000I\000\216\000\227\000\210\000\136\000]\0004\000I\000\216\000\136\001U\0004\000\242\001S\001\005\000U\000\202\000\242\001S\001\005\000\202\000T\001S\001\005\001w\000f\000X\001S\001\005\000\221\000.\000f\000X\001S\001\005\000\221\000\236\000\215\000.\000\029\001e\001a\000\205\000>\000I\000\250\000I\000\134\000[\000\170\000\134\000\170\000I\000\216\001!\000\227\000\216\000f\000U\000.\000\227\000\216\000\134\000[\000\170\000I\000\166\000h\000I\000\164\000I\001Q\0008\000\227\000\216\000f\000.\000\136\000\133\0004\000\227\000\216\000\136\000\133\0004\000|\000]\000\244\000|\000\244\000\227\000\216\000|\000]\000\244\000\227\000\216\000|\000\244\000\132\000]\0002\000\227\000\216\000\132\000]\0002\000\227\000\216\000\132\0002\000\227\000\216\000f\000X\001S\001\005\000\221\000\236\000\215\000.\000\031\000E\000f\000\161\000.\000K\000f\000X\001S\001\005\000\219\000.\000f\000X\001S\001\005\000\219\000\236\000\215\000.\000\016\000M\000M\000\214\000M\001a\000\205\000\166\000+\000\227\000\216\000K\000\227\000\216\000\132\0002\000\227\000\216\000f\000.\000\227\000\216\000f\000\161\000.\000f\000\161\000\236\001Y\000.\001Q\000h\000\018\001\004\001\000\000\254\000\242\000\238\000\224\000\222\000\218\000\206\000\204\000\202\000\194\000\192\000\190\000\184\000\180\000\178\000\176\000\162\000\160\000\158\000\146\000\144\000\138\000n\000d\000`\000X\000V\000T\000R\000P\000N\000L\000H\000<\0000\000(\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000S\000\194\001S\001\005\001c\000\196\001a\001\005\000\255\000\196\000U\001\029\001G\000f\000\020\000\203\000.\001G\000\251\000U\000\255\000\251\000\237\001\025\001+\000\255\001K\000\141\000\025\0015\001\003\000\020\001S\001\005\000'\000+\000@\000\139\000\129\000\255\000\020\001S\001\005\000R\000'\000+\000@\000\139\000\129\000\255\000A\000X\001S\001\005\000\219\000\225\000\255\000X\001S\001\005\0000\000\219\000\225\000\255\001\t\000\213\000\197\000\238\001S\001\005\000\023\001I\000h\001{\000\255\001\015\001i\000\158\001S\001\005\000\221\000\255\000^\000\\\000\205\000N\000\191\000q\001\005\000\205\001\005\000\166\0013\000\166\0013\000$\000\166\0013\000\142\000\166\0013\000\029\000\166\0013\000\227\000\166\0013\000\190\000\166\0013\000\026\000U\000\255\000*\000\245\000*\0005\000*\000\200\001\133\000a\000\236\001Y\000\236\001Y\000\230\001Y\000\230\001Y\000\196\000\199\000h\000\229\000\216\000h\000#\000%\000)\000f\000i\000.\0006\0013\000\016\000D\000^\000\243\000\200\000U\000\255\000\243\000\200\000h\000f\000\193\000.\000\031\000\227\000\216\000\031\001\005\000\021\000h\000\236\001Y\001\005\000\209\000h\000\196\000U\000\250\001\005\000\209\000h\000\196\000U\001\005\000\209\000h\000/\000\196\000U\000\250\001\005\000\209\000h\000/\000\196\000U\000\014\001S\001\005\000\031\000\236\001Y\000\255\000\012\000\012\000V\000\012\000\012\000V\000\012\000<\000\012\000\012\000<\000\020\000'\001!\000\015\001\137\000}\000\020\000'\001!\000\232\001\137\000X\000\227\000\196\000\229\000X\000\227\000\232\000\229\000\196\000\196\000<"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\014\000\018\000\021\000\027\000\029\000\030\000\031\000!\000%\000(\000*\000,\000/\0004\0007\000;\000@\000D\000F\000J\000P\000Q\000R\000U\000Y\000Z\000]\000`\000f\000m\000o\000q\000r\000w\000}\000\128\000\131\000\135\000\139\000\141\000\142\000\144\000\148\000\150\000\153\000\155\000\156\000\159\000\162\000\167\000\167\000\170\000\170\000\174\000\181\000\188\000\192\000\194\000\195\000\196\000\200\000\201\000\206\000\208\000\214\000\221\000\224\000\225\000\229\000\234\000\239\000\240\000\244\000\249\000\252\001\007\001\b\001\011\001\012\001\r\001\014\001\015\001\016\001\018\001\020\001\023\001\024\001\025\001\026\001\031\001!\001#\001&\001'\001(\001+\001,\001/\0012\0013\0014\0015\0017\0018\0019\001<\001B\001F\001L\001R\001Z\001a\001l\001u\001v\001~\001\135\001\142\001\150\001\154\001\159\001\167\001\173\001\179\001\187\001\193\001\200\001\211\001\215\001\219\001\225\001\227\001\228\001\230\001\232\001\235\001\238\001\241\001\244\001\247\001\250\001\253\002\000\002\003\002\006\002\t\002\012\002\015\002\018\002\021\002\024\002\027\002\030\002!\002$\002&\002(\002+\002/\0022\0025\002:\002A\002H\002O\002V\002]\002d\002m\002v\002\127\002\129\002\129\002\131\002\135\002\140\002\144\002\148\002\148\002\151\002\152\002\155\002\157\002\161\002\163\002\168\002\169\002\173\002\178\002\181\002\183\002\188\002\189\002\189\002\191\002\195\002\197\002\201\002\204\002\213\002\223\002\231\002\240\002\241\002\242\002\244\002\244\002\246\002\248\002\252\003\001\003\b\003\t\003\n\003\012\003\r\003\016\003\017\003\020\003\021\003\023\003\025\003\027\003\029\003\"\003$\003)\003+\003/\0031\0033\0034\0036\003:\003A\003I\003L\003Q\003W\003Y\003^\003e\003g\003h\003k\003m\003r\003u\003v\003y\003y\003\129\003\129\003\138\003\138\003\147\003\147\003\153\003\153\003\160\003\160\003\162\003\162\003\170\003\170\003\179\003\179\003\181\003\181\003\183\003\185\003\185\003\187\003\191\003\193\003\193\003\195\003\195\003\197\003\197\003\199\003\199\003\201\003\205\003\207\003\209\003\212\003\216\003\222\003\227\003\233\003\234\003\236\003\239\003\244\003\247\003\254\004\001\004\007\004\t\004\r\004\014\004\015\004\020\004\024\004\029\004$\004,\0046\004A\004B\004E\004I\004J\004M\004O\004S\004U\004W\004Y\004]\004b\004c\004e\004f\004h\004k\004l\004m\004n\004u\004y\004~\004\131\004\134\004\136\004\137\004\140\004\143\004\144\004\151\004\152\004\155\004\155\004\156\004\156\004\157\004\158\004\160\004\162\004\164\004\165\004\167\004\168\004\170\004\171\004\173\004\174\004\176\004\179\004\183\004\184\004\186\004\189\004\193\004\196\004\200\004\205\004\211\004\216\004\222\004\227\004\233\004\234\004\235\004\236\004\240\004\245\004\249\004\254\005\002\005\007\005\b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\030\005\030\005\031\005\031\005 \005 \005\"\005\"\005$\005$\005&\005&\005(\005(\005*\005*\005,\005,\005-\005.\0051\0056\0059\005>\005E\005N\005U\005W\005Y\005[\005^\005`\005a\005d\005e\005h\005l\005o\005r\005u\005x\005y\005{\005}t\006\012\006\015\006\016\006\017\006\018\006\020\006\023\006\025\006\028\006 \006!\006#\006&\006)\006-\0062\0063\0065\0068\006=\006D\006E\006G\006H\006I\006J\006L\006N\006W\006a\006b\006h\006o\006p\006y\006z\006{\006\128\006\138\006\139\006\140\006\142\006\144\006\146\006\148\006\151\006\154\006\157\006\159\006\162\006\164\006\167\006\171\006\176\006\181\006\186\006\191\006\196\006\203\006\210\006\217\006\222\006\227\006\231\006\235\006\241\006\249\006\250\006\251\006\252\006\253\006\255\007\001\007\004\007\006\007\t\007\014\007\019\007\022\007\025\007\026\007\027\007\031\007\"\007'\007*\007,\0071\0075\0078\007=\007A\007K\007L\007M\007P\007Q\007W\007_\007`\007a\007d\007e\007f\007h\007k\007o\007s\007x\007}\007~b\003\b\004\b\005\b\n\b\012\b\014\b\017\b\020\b\023\b\026\b\029\b \b#\b%\b'\b(\b)\b*\b,\b0\b2\b2\b4\b5\b8\b:\b:\b;\b>\b@\bA\bA\bB\bC\bE\bI\bJ\bM\bN\bQ\bV\b[\ba\bg\bn\bu\bu\bv\bw\by\b{\b|\b~\b\128\b\134\b\139\b\143\b\147\b\148\b\150"))
+    
+    and lr0_core =
+      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\t\001\n\001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~b\002\t\002\n\002\011\002\012\002\r\002\016\002\017\002\022\002\023\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\014\002\015\002\018\002\019\002\020\002\021\002\031\002 \002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\002.\002/\0020\0021\0022\0023\0024\0025\0026\0027\0028\0029\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002F\002G\002H\002I\002J\002K\002L\002M\002N\002O\002P\002Q\002R\002S\002T\002U\002V\002W\002X\002Y\002Z\002[\002\\\002]\002^\002_\002`\002a\002b\002c\002d\002e\002f\002g\002h\002i\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\002u\002v\002w\002x\002y\002z\002{\002|\002}\002~b\003\r\003\014\003\025\003\026\003\t\003\n\003\011\003\012\003\015\003\016\003\017\003\018\003\019\003\020\003\021\003\022\003\027\003\028\003\029\003\030\003)\003*\003\031\003 \003!\003\"\003#\003$\003+\003,\003-\003.\003/\0030\003%\003&\003'\003(\003;\003<\003=\003>\003?\003@\003A\003B\003C\003D\003E\003F\003G\003H\003I\003J\003K\003L\003M\003N\003O\003P\003Q\003R\003S\003T\003U\003V\003\197\003\198\003\199\003\200\003\201\003\202\003\203\003\204\003\205\003\206\003\207\003g\003h\003i`\003a\003b\003c\003d\003e\003f\003j\003k\003l\003m\003n\003o\003p\003q\003r\003s\003t\003u\003v\003w\003x\003y\003z\003{\003|\003}\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\135\003\223\003\224\003\225\003\226\003\227\003\228\003\229\003\230\003\231\003\232\003\233\003\234\003\235\003\236\003\237\003\238\003\239\003\240\003\241\003\242\003\243\003\244\003\245\003\246\003\247\003\248\003\249\003\250\003\251\003\252\003\253\003\254\003\255\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\b\004\t\004\n\004\011\004\012\004\r\004\014\004\015\004\016\004\017\004\018\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004#\004$\004%\004&\004'\004(\004)\004*\004+\004,\004-\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\0048\0049\004:\004;\004<\004=\004>\004?\004@\004A\004B\004C\004D\004E\004F\004G\004H\004I\004J\004K\004L\004M\004N\004O\004P\004Q\004R\004S\004T\004U\004V\004W\004X\004Y\004Z\004[\004\\\004]\004^\004_\004`\004a\004b\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004y\004z\004{\004|\004}\004~b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\031\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~\005\127\005\128\005\129\005\130\005\131\005\132\005\133\005\134\005\135\005\136\005\137\005\138\005\139\005\140\005\141\005\142\005\143\005\144\005\145\005\146\005\147\005\148\005\149\005\150\005\151\005\152\005\153\005\154\005\155\005\156\005\157\005\158\005\159\005\160\005\161\005\162\005\163\005\164\005\165\005\166\005\167\005\168\005\169\005\170\005\171\005\172\005\173\005\174\005\175\005\176\005\177\005\178\005\179\005\180\005\181\005\182\005\183\005\184\005\185\005\186\005\187\005\188\005\189\005\190\005\191\005\192\005\193\005\194\005\195\005\196\005\197\005\198\005\199\005\200\005\201\005\202\005\203\005\204\005\205\005\206\005\207\005\208\005\209\005\210\005\211\005\212\005\213\005\214\005\215\005\216\005\217\005\218\005\219\005\220\005\221\005\222\005\223\005\224\005\225\005\226\005\227\005\228\005\229\005\230\005\231\005\232\005\233\005\234\005\235\005\236\005\237\005\238\005\239\005\240\005\241\005\242\005\243\005\244\005\245\005\246\005\247\005\248\005\249\005\250\005\251\005\252\005\253\005\254\005\255\006\000\006\001\006\002\006\003\006\004\006\005\006\006\006\007\006\b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006c\006d\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~
+    
+    and lr0_items =
+      ((32, "\000\000\000\000\000\000<\129\000\000[\129\000\001Z\001\000\001Y\129\000\001Y\001\000\001X\129\000\001X\001\000\001A\129\000\001W\129\000\001W\001\000\001V\129\000\001V\001\000\001U\129\000\001U\001\000\001T\129\000\001T\001\000\001S\129\000\001S\001\000\001R\129\000\001R\001\000\001Q\129\000\001Q\001\000\001P\129\000\001P\001\000\001O\129\000\001O\001\000\001N\129\000\001A\001\000\001N\001\000\001M\129\000\001M\001\000\001L\129\000\001L\001\000\001K\129\000\001K\001\000\001J\129\000\001J\001\000\001I\129\000\001I\001\000\001H\129\000\001H\001\000\001G\129\000\001G\001\000\001F\129\000\001F\001\000\001E\129\000\001E\001\000\001D\129\000\001D\001\000\001C\129\000\001C\001\000\001B\129\000\001B\001\000\000\016\129\000\000\016\001\000\000\016\130\000\000\016\131\000\000[\130\000\000<\130\000\000\017\001\000\000\017\002\000\000D\001\000\000D\002\000\000D\003\000\000\161\129\000\000<\001\000\000;\129\000\000;\001\000\000:\129\000\000<\002\000\000;\130\000\000;\002\000\000:\130\000\000<\003\000\000;\131\000\000;\003\000\000:\131\000\000B\129\000\000B\130\000\000B\131\000\0004\001\000\000-\001\000\0012\001\000\001-\001\000\001)\129\000\001)\130\000\001)\131\000\000\028\001\000\000\162\001\000\000\028\129\000\000\162\002\000\000\028\130\000\000\162\003\000\000\028\131\000\001)\132\000\000\135\129\000\000\135\130\000\001x\129\000\001*\129\000\001*\001\000\001#\129\000\001#\001\000\0003\001\000\0002\129\000\000\202\001\000\0002\130\000\001-\001\000\000\191\129\000\001x\001\000\000\\\001\000\000\\\002\000\001|\129\000\001|\130\000\001|\131\000\001x\129\000\000\191\129\000\000\200\129\000\000\200\001\000\000\199\129\000\000\202\129\000\000\204\129\000\000\201\129\000\000\201\001\000\000\192\001\000\000\203\129\000\000\199\001\000\000\198\129\000\000\198\001\000\000\197\129\000\000\197\001\000\000\196\001\000\000\204\001\000\000\203\001\000\000\195\129\000\000\195\001\000\000\194\129\000\000\194\001\000\000\193\129\000\000\193\001\000\000\193\130\000\000\193\002\000\000l\129\000\000l\130\000\000\193\131\000\000\193\003\000\000\193\132\000\000\193\004\000\000\193\133\000\000\194\130\000\000\194\002\000\000\194\131\000\000\194\003\000\000\194\132\000\000\194\004\000\000\194\133\000\000\195\130\000\000\195\002\000\000\195\131\000\000\195\003\000\000\195\132\000\000\195\004\000\000\195\133\000\000\206\129\000\000\205\001\000\000\196\129\000\000\192\129\000\000\205\129\000\000\206\001\000\001x\130\000\001x\131\000\001|\132\000\001|\133\000\000\007\129\000\000\160\001\000\000\007\001\000\000j\129\000\000k\001\000\000\007\002\000\000\217\129\000\000\217\130\000\000\217\131\000\000\217\001\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\000\006\130\000\000\006\131\000\000\006\132\000\000\160\001\000\000j\129\000\000\170\129\000\000\170\130\000\001\024\001\000\001\023\129\000\000j\001\000\000i\129\000\000i\001\000\000h\129\000\001\024\002\000\001\023\130\000\000j\002\000\000i\130\000\000i\002\000\000h\130\000\001\024\003\000\001\023\131\000\000j\003\000\000i\131\000\000i\003\000\000h\131\000\001v\001\000\001\024\004\000\000j\004\000\000i\004\000\001v\129\000\001t\001\000\001r\129\000\001u\001\000\001t\129\000\001t\130\000\001r\130\000\001\005\129\000\001t\002\000\001\006\001\000\001t\003\000\001\006\002\000\001\006\003\000\001\024\005\000\000j\005\000\000i\005\000\001q\129\000\000j\006\000\000i\006\000\001q\001\000\000\160\001\000\000.\001\000\0000\129\000\000\188\001\000\000\186\001\000\000\184\001\000\000\183\001\000\000/\129\000\000/\001\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\000/\002\000\001q\129\000\000c\001\000\000c\002\000\001q\129\000\000\n\001\000\000\t\129\000\001q\129\000\000\155\001\000\000\154\001\000\000\153\001\000\000\155\002\000\000\154\002\000\000\153\002\000\000\255\001\000\000\007\001\000\000\255\002\000\000\007\002\000\000\015\001\000\000\014\129\000\000\208\129\000\000\015\002\000\000\014\130\000\000\014\001\000\000\r\129\000\000\014\002\000\000\r\130\000\000\r\001\000\000\012\129\000\000\012\001\000\000\n\129\000\000\n\130\000\000\012\130\000\000\180\001\000\000\180\002\000\000\b\001\000\000c\129\000\000b\001\000\000c\130\000\001n\129\000\001\t\129\000\001\t\130\000\001r\001\000\000\161\001\000\000\160\129\000\000\161\002\000\000\161\003\000\000\161\001\000\000\160\129\000\000\161\004\000\000\160\130\000\000\160\131\000\001r\002\000\000\160\130\000\001r\003\000\000\015\129\000\001\t\131\000\000\011\001\000\000\b\129\000\000\011\002\000\000\011\003\000\000\b\130\000\000b\129\000\000b\130\000\000b\131\000\000b\132\000\001n\001\000\001\n\001\000\000\011\001\000\000\b\129\000\001\n\002\000\001\n\003\000\000\011\001\000\000\b\129\000\000c\131\000\001\n\129\000\001\003\129\000\001\004\001\000\000\012\131\000\000\012\132\000\001\004\002\000\001\004\003\000\001h\001\000\001g\129\000\001g\130\000\000\207\001\000\001g\131\000\001g\132\000\001\002\001\000\001\002\002\000\000\004\129\000\001\002\003\000\000\005\001\000\000\005\002\000\000\005\003\000\000\005\004\000\001g\133\000\001\001\129\000\000\005\001\000\001h\002\000\001\011\001\000\0008\001\000\0008\002\000\0007\129\000\000\005\001\000\001\n\129\000\000\012\002\000\000\012\003\000\000\r\002\000\000\r\003\000\001\004\001\000\000\r\004\000\000\r\005\000\001\004\001\000\000\r\131\000\000\rb\129\000\000\154\130\000\000\153\130\000\000\153\131\000\000\237\129\000\000\005\001\000\000\n\002\000\000\t\130\000\000\t\131\000\000c\003\000\000c\004\000\000c\005\000\000/\130\000\000/\131\000\001\007\129\000\000\011\130\000\000\t\002\000\000\011\131\000\000\t\003\000\000\011\132\000\000\011\133\000\000\t\004\000\001\007\130\000\001\007\131\000\0008\001\000\001\b\001\000\0008\001\000\000\006\002\000\000\006\003\000\001\b\002\000\001\b\003\000\0008\001\000\000.\129\000\000\r\001\000\000\012\129\000\000\012\001\000\000.\130\000\000\188\002\000\000\177\001\000\000n\129\000\000n\001\000\000n\130\000\000n\002\000\000n\131\000\000n\003\000\000n\132\000\000n\004\000\000n\133\000\000n\005\000\000n\134\000\000n\135\000\000\188\003\000\000\188\004\000\000p\001\000\000o\129\000\000p\002\000\000o\001\000\0000\001\000\000\186\002\000\000g\129\000\0006\129\000\000.\001\000\000/\129\000\000/\001\000\000.\129\000\000g\130\000\000f\001\000\0006\001\000\0006\002\000\0006\003\000\001\007\001\000\0005\129\000\001\007\002\000\0005\130\000\001\007\003\000\0005\131\000\000\011\001\000\000\b\129\000\000f\002\000\001\006\129\000\0005\001\000\000\011\001\000\000\b\129\000\000g\001\000\000f\129\000\000f\130\000\000f\131\000\000f\132\000\000\011\001\000\000\b\129\000\001\006\129\000\000g\002\000\0005\001\000\000\011\001\000\000\b\129\000\000g\131\000\000g\132\000\000\246\001\000\0007\001\000\000g\129\000\000\246\002\000\000\245\001\000\000\245\129\000\000\183\002\000\0008\001\000\000\184\002\000\000h\001\000\000h\002\000\000h\003\000\000\187\129\000\000\187\130\000\000\187\131\000\000\185\129\000\001q\002\000\000\189\001\000\000\188\129\000\000\187\001\000\000\186\129\000\000\185\001\000\000\184\129\000\000\182\129\000\0008\001\000\000\189\002\000\000\188\130\000\000\187\002\000\000\186\130\000\000\185\002\000\000\184\130\000\000\189\003\000\000\187\003\000\000\185\003\000\000\189\004\000\000\189\005\000\000\189\006\000\000\187\004\000\000\185\004\000\000\188\131\000\000\188\132\000\000\188\133\000\000\186\131\000\000\184\131\000\000\183\129\000\000i\007\000\000i\b\000\000\251\129\000\000i\t\000\000\238\129\000\000\238\130\000\001b\001\000\001a\129\000\000j\001\000\000i\129\000\001b\002\000\001a\130\000\000j\002\000\000i\130\000\001b\003\000\001a\131\000\000j\003\000\000i\131\000\001b\004\000\000j\004\000\001b\005\000\000j\005\000\001q\129\000\000j\006\000\000j\007\000\000\251\129\000\000j\b\000\000\251\130\000\000\251\131\000\0008\001\000\000\251\132\000\000\251\133\000\0008\001\000\000\138\129\000\000\138\130\000\000j\t\000\001b\006\000\001b\007\000\000\240\001\000\001b\b\000\000g\129\000\000\\\129\000\000g\130\000\000\\\130\000\000\\\131\000\0003\001\000\0002\129\000\0003\002\000\0003\003\000\0002\001\000\0002\002\000\0003\129\000\000\162\001\000\0001\129\000\0001\001\000\000\162\002\000\0001\130\000\0001\131\000\0001\132\000\0001\133\000\000\\\132\000\000\\\133\000\001b\t\000\000\249\001\000\000\248\129\000\001b\n\000\000\248\130\000\000\249\002\000\000\246\129\000\000\247\129\000\000\247\001\000\000\248\001\000\000h\001\000\000]\001\000\000]\002\000\000]\003\000\000]\004\000\001s\129\000\001a\132\000\000i\132\000\001q\129\000\000i\133\000\000i\134\000\000\251\129\000\000i\135\000\000i\136\000\001a\133\000\001a\134\000\001a\135\000\001a\136\000\000\249\001\000\000\248\129\000\001a\137\000\000\141\129\000\000\141\001\000\000\004\001\000\000\003\129\000\000\190\001\000\000\189\129\000\000\190\002\000\000\190\003\000\000\190\004\000\000\165\001\000\000\165\002\000\000F\001\000\000F\002\000\000F\003\000\000\029\129\000\000\029\001\000\001;\001\000\001\031\129\000\001\031\001\000\001\031\002\000\001\031\130\000\001\030\129\000\001\030\001\000\001\030\002\000\001\030\130\000\001xg\001\000\001f\129\000\000:\001\000\000:\002\000\000:\003\000\000B\001\000\000B\002\000\000B\003\000\001x\001\000\000U\001\000\000U\002\000\000\150\001\000\000\150\002\000\000\150\003\000\000\243\129\000\000\150\004\000\001!\129\000\001!\001\000\001 \129\000\0002\001\000\001 \001\000\000q\129\000\000\162\001\000\000r\001\000\000\162\002\000\000r\002\000\000rz\129\000\000z\001\000\000y\129\000\000y\001\000\000w\129\000\000w\001\000\000w\002\000\000q\001\000\000p\129\000\000q\002\000\000q\003\000\0008\001\000\000w\003\000\000w\004\000\000w\130\000\000u\129\000\000u\001\000\000u\002\000\000u\003\000\000\215\129\000\000T\001\000\0018\001\000\000\127\129\000\000v\129\000\000v\001\000\000\233\129\000\000v\002\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000\127\001\000\000~\129\000\000\127\002\000\000\127\003\000\0008\001\000\000v\003\000\000v\004\000\000v\005\000\000\233\001\000\000v\130\000\001x\129\000\001\\\129\000\001@\001\000\001:\129\000\001:\001\000\0019\001\000\0003\001\000\0002\129\000\001\\\130\000\000\181\001\000\000\180\129\000\000\181\002\000\001\\\131\000\001\\\132\000\000x\001\000\000x\002\000\001[\129\000\000|\001\000\000@\001\000\000?\129\000\000?\001\000\000>\129\000\000@\002\000\000?\130\000\000@\003\000\000@\004\000\000@\005\000\000\165\129\000\000\165\130\000\000d\129\000\000d\001\000\000d\002\000\000d\130\000\000d\131\000\000\172\001\000\000\171\001\000\000\171\002\000\000\252\129\000\000ej\129\000\000\176\003\000\000\175\129\000\000\174\129\000\000\252\001\000\000\174\001\000\000\173\129\000\000\172\129\000\000\172\002\000\000\172\003\000\000\174\001\000\000\173\129\000\000\172\129\000\000d\132\000\000dr\129\000\001\r\001\000\000\212\129\000\0013\001\000\001x\001\000\000q\129\000\001\"\129\000\001\"\001\000\000E\129\000\000E\130\000\000E\131\000\001)\001\000\001(\129\000\001)\002\000\001(\130\000\001)\003\000\001(\131\000\000C\129\000\000C\001\000\000C\130\000\000C\002\000\000C\131\000\000C\003\000\000@\129\000\000@\130\000\000@\131\000\001\000\129\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000\152\129\000\000\152\001\000\000\151\129\000\000\152\002\000\000A\129\000\000A\001\000\000A\130\000\000A\002\000\000A\131\000\000A\003\000\001x\129\000\001@\001\000\001:\129\000\001:\001\000\0019\001\000\000A\132\000\0003\001\000\0002\129\000\000A\133\000\000A\134\000\000A\135\000\000`\001\000\000=\129\000\000=\001\000\000=\130\000\000=\002\000\000=\131\000\000=\003\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000=\132\000\000=\004\000\000=\133\000\000D\129\000\000D\130\000\000D\131\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000D\132\000\000D\133\000\001-\129\000\001+\001\000\001ys\129\000\000s\130\000\000t\001\000\000t\002\000\000t\129\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\000t\130\000\001,\129\000\001y\129\000\0017\129\000\0017\001\000\0016\129\000\0015\129\000\0015\001\000\0013\129\000\0012\129\000\0010\001\000\001/\129\000\000\162\001\000\0001\129\000\0001\001\000\001y\130\000\0017\130\000\0017\002\000\0016\130\000\0015\130\000\0015\002\000\0013\130\000\0012\130\000\0010\002\000\001/\130\000\000\162\002\000\0001\130\000\001x\129\000\0017\131\000\0012\131\000\001/\131\000\0001\131\000\0012\132\000\000\200\001\000\000\004\001\000\000\199\129\000\000\003\129\000\0017\132\000\0017\133\000\0017\134\000\0017\135\000\000\168\001\000\000\167\129\000\000\166\129\000\0017\136\000\0017\137\000\000\174\001\000\000\173\129\000\000\172\129\000\0017\138\000\001g\001\000\000\201\129\000\001f\129\000\000\201\001\000\000\192\001\000\000T\001\000\000\228\001\000\000\128\001\000\000\128\002\000\000\128\003\000\0008\001\000\000\128\004\000\000\128\005\000\001\b\129\000\000G\001\000\001\b\130\000\001,\129\000\000H\001\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\000H\002\000\0011\129\000\001,\001\000\001+\129\000\000\151\001\000\0009\129\000\0009\130\000\0009\131\000\000\150\129\000\000|\129\000\000S\129\000\000S\130\000\000S\131\000\001\019\001\000\001\018\129\000\001\018\001\000\001\017\129\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000M\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\131\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000L\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\003\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000K\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\131\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000K\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\003\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000N\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\003\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000P\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\003\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000M\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\003\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000L\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\131\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000O\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\003\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000J\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\131\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000J\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\003\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000I\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\131\000\000I\129\000\000I\001\000\000H\129\000\000I\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\003\000\000I\001\000\000H\129\000\000H\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\131\000\000H\129\000\000O\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\131\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000N\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\131\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\t\002\000\001\t\003\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000R\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\003\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000T\130\000\001\t\001\000\000Z\129\000\000T\131\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000P\130\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\131\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000Q\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\003\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000Q\130\000\001\tt\001\000\000Z\129\000\000T\129\000\000S\002\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\019\002\000\001\018\130\000\001\018\002\000\001\019\003\000\001\019\004\000\001\019\005\000\001\018\131\000\000\005\129\000\000\005\130\000\0018\129\000\000{\129\000\000{\130\000\000{\131\000\0008\001\000\000{\132\000\000{\133\000\000\232\129\000\000\231\129\000\000\230\129\000\000\230\001\000\000\227\129\000\000{\001\000\000{\002\000\000{|\130\000\000\151\002\000\001\t\001\000\001\btp\001\000\001p\002\000\0008\001\000\001o\129\000\001o\001\000\001o\130\000\001o\002\000\0008\001\000\001o\131\000\001o\132\000\0008\001\000\000\216\129\000\001\017\002\000\001\016\130\000\001\016\002\000\001\017\003\000\001\016\131\000\001\016\003\000\001\017\004\000\001\016\132\000\001\017\005\000\000\244\001\000\0013\132\000\0013\133\000\001y\129\000\0017\129\000\0017\001\000\0016\129\000\0015\129\000\0015\001\000\0013\129\000\0012\129\000\0010\001\000\001/\129\000\000\162\001\000\000r\001\000\0001\129\000\0001\001\000\001y\130\000\0017\130\000\0017\002\000\0016\130\000\0015\130\000\0015\002\000\0013\130\000\0012\130\000\0010\002\000\001/\130\000\000\162\002\000\000r\002\000\0001\130\000\001x\001\000\000r\003\000\001y\131\000\000s\001\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\000s\002\000\001&\002\000\001%\130\000\001%\002\000\000X\130\000\000X\002\000\000W\130\000\001%\131\000\000X\003\000\001%\132\000\000X\004\000\001%\133\000\000X\005\000\000X\006\000\001\t\001\000\000Z\129\000\000X\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\003\000\000W\131\000\001%\004\000\000W\132\000\001%\005\000\000W\133\000\000W\134\000\001\t\001\000\000Z\129\000\000W\135\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\003\000\000X\131\000\001&\004\000\000X\132\000\001&\005\000\000X\133\000\000X\134\000\001\tt\001\000\000Z\129\000\000V\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\131\000\000V\131\000\001$\132\000\000V\132\000\001$\133\000\000V\133\000\000V\134\000\001\t\001\000\000Z\129\000\000V\135\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001(\003\000\000W\003\000\001(\004\000\001\t\001\000\000Z\129\000\000W\004\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001(\005\000\000W\005\000\000W\006\000\001\t\001\000\000Z\129\000\000W\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001'\131\000\001'\003\000\001&\131\000\000\162\001\000\000r\001\000\000Z\003\000\000Y\131\000\000Y\003\000\001'\132\000\001'\004\000\001&\132\000\000Z\004\000\000Y\132\000\000Y\004\000\001'\005\000\000Y\133\000\001'\006\000\000Y\134\000\001'\007\000\000Y\135\000\000Y\136\000\001\t\001\000\000Z\129\000\000Y\137\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\133\000\000Y\005\000\001&\134\000\000Y\006\000\001&\135\000\000Y\007\000\000Y\b\000\001\t\001\000\000Z\129\000\000Y\t\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001'\133\000\000Z\005\000\001'\134\000\000Z\006\000\001'\135\000\000Z\007\000\000Z\b\000\001\t\001\000\000Z\129\000\000Z\t\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001/\003\000\000U\131\000\000U\132\000\001\t\001\000\000Z\129\000\000U\133\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\000r\129\000\000\253\129\000\000F\130\000\000\253\130\000\000\253\001\000\001\t\001\000\000Z\129\000\000T\129\000\000R\130\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\004\000\001$\005\000\001$\131\000\001$\132\000\001$\133\000\001(\003\000\001(\004\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001(\005\000\001'\131\000\001'\003\000\001&\131\000\000\162\001\000\000r\001\000\001'\132\000\001'\004\000\001&\132\000\001'\005\000\001'\006\000\001'\007\000\001&\133\000\001&\134\000\001&\135\000\001'\133\000\001'\134\000\001'\135\000\001/\003\000\001%\132\000\001%\133\000\001%\003\000\001%\004\000\001%\005\000\001&\003\000\001&\004\000\001&\005\000\000D\134\000\0008\129\000\0009\001\000\000D\135\000\000D\136\000\000D\137\000\000D\138\000\000D\139\000\000=\134\000\000=\135\000\000=\136\000\000=\137\000\000=\005\000\000=\006\000\000=\007\000\000=\b\000\000=\t\000\000=\n\000\000=\011\000\000`\002\000\001x\129\000\001@\001\000\001:\129\000\001:\001\000\0019\001\000\000a\129\000\0003\001\000\0002\129\000\000a\130\000\000a\131\000\000a\132\000\000`\129\000\000`\130\000\000\011\001\000\000\b\129\000\000`\131\000\000`\132\000\000x\129\000\000a\001\000\000a\002\000\000at\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000C\134\000\000C\006\000\000C\007\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000C\b\000\001)\004\000\001(\132\000\001(\133\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\000E\132\000\001\"\002\000\001\t\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\"\003\000\0011\001\000\0010\129\000\001/\001\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001\"\130\000\0013\002\000\0013\003\000\001\t\001\000\000\212\130\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\014\002\000\001\r\130\000\001\r\002\000\001\014\003\000\001\r\131\000\001\014\004\000\001.\130\000\001.\002\000\001.\003\000\0016\002\000\0016\003\000\0014\130\000\0014\002\000\0014\003\000\000@\bb\000\000?\t\000\000|\002\000\000|\003\000\000|\004\000\000|\005\000\000|\006\000\001[\130\000\000_\129\000\000_\130\000\000_\131\000\000_\001\000\001\\\001\000\001\\\002\000\001\\\133\000\000\127\130\000\000\215\130\000\000u\004\000\000u\005\000\000u\130\000\001o\129\000\001o\001\000\000z\130\000\000z\002\000\000z\131\000\000z\132\000\000z\133\000\000z\134\000\0008\001\000\000z\135\000\000z\136\000\000\255\129\000\000z\003\000\000z\004\000\000z\005\000\0008\001\000\000z\006\000\000z\007\000\000y\130\000\000y\131\000\000y\132\000\000y\002\000\000\150\005\000\000\150\006\000\001\t\001\000\000Z\129\000\000U\003\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000B\004\000\000B\005\000\001\001\001\000\000B\006\000\000:\004\000\000:\005\000\001\001\001\000\000:\006\000\001\tb\000\000\174\001\000\000\173\129\000\000\172\129\000\000\220\t\000\000\171\133\000\000\168\001\000\000\167\129\000\000\166\129\000\001:\135\000\000\174\001\000\000\173\129\000\000\172\129\000\001:\136\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000\029\130\000\000\029\002\000\000\029\003\000\000\029\131\000\0008\001\000\000\029\132\000\000\029\133\000\000F\004\000\000\022\129\000\001|\001\000\001{\001\000\001|\002\000\001{\002\000\001|\003\000\001{\003\000\001|\004\000\001{\004\000\001{\005\000\001{\006\000\001|\005\000\001|\006\000\001|\007\000\000\022\130\000\000\022\131\000\001{\129\000\001z\129\000\001z\001\000\001\127\001\000\001~\001\000\001\127\002\000\001~\129\000\000\177\001\000\001~\130\000\001z\002\000\001z\003\000\001z\004\000\001z\005\000\0008\001\000\001{\130\000\001z\130\000\001{\131\000\001z\131\000\001z\132\000\001z\133\000\001{\132\000\001{\133\000\001{b\000\0008\001\000\000\159\t\000\000\159\n\000\000\158\005\000\000\158\006\000\000\158\007\000\000\157\004\000\000m\129\000\000m\130\000\000\236\001\000\000\235\129\000\000\236\002\000\000\235\130\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000\236\003\000\000\236\004\000\001c\129\000\001c\001\000\000\175\001\000\000\175\002\000\000\175\003\000\000\175\004\000\000\175\005\000\000\213\129\000\000\213\130\000\000\174\001\000\000\173\129\000\000\172\129\000\000\175\006\000\000\175\007\000\001c\130\000\001c\002\000\001c\131\000\001c\003\000\001c\132\000\001c\133\000\001c\134\000\001c\135\000\000\133\129\000\000\133\130\000\000\133\131\000\000\133\132\000\000\133\133\000\000\133\134\000\001c\136\000\001c\004\000\001c\005\000\001c\006\000\000]\129\000\000]\130\000\001f\001\000\001f\002\000\001f\003\000\001f\004\000\000\168\001\000\000\167\129\000\000\166\129\000\001f\005\000\000\239\001\000\000\239\002\000\000\239\003\000\000\239\004\000\000\239\005\000\000\239\006\000\0008\001\000\000\239\007\000\000\182\001\000\000\181\129\000\000\182\002\000\000\239\b\000\000\239\t\000\001[\001\000\001\019\129\000\001[\002\000\001\019\130\000\001[\003\000\001\019\131\000\001[\004\000\001\019\132\000\001[\005\000\001[\006\000\001[\007\000\001[\b}q\129\000\000+\001\000\000)\129\000\000)\130\000\000)\131\000\000)\132\000\000#\001\000\000\r\001\000\000\012\129\000\000\012\001\000\001\011\001\000\001\004\129\000\0008\001\000\000*\001\000\000*\002\000\000)\001\000\000)\002\000\000)\003\000\001r\001\000\000\161\001\000\000\160\129\000\000+\129\000\001r\002\000\000\160\130\000\000+\130\000\001r\003\000\000+\131\000\000#\129\000\000\015\129\000\000)\004\000\000(\129\000\000$\129\000\000*\003\000\000)\133\000\001\028\136\000\001\028\137\000\000\131\129\000\000\131\130\000\000\131\131\000\000\131\132\000\000\131\133\000\000\131\134\000\000\131\135\000\000\131\136\000\000\131\137\000\001\028\138\000\001\021\129\000\000\140\001\000\001\024\129\000\001\022\001\000\001\027\129\000\001\027\001\000\001\026\001\000\000\140\002\000\001\020\129\000\001\020\130\000\001\022\129\000\000\136\129\000\000\136\130\000\000\136\131\000\000\136\132\000\000\136\133\000\000\251\129\000\000\136\134\000\000\136\135\000\000\136\136\000\001\022\130\000\001\023\001\000\000\137\129\000\000\137\130\000\000\137\131\000\000\137\132\000\000\137\133\000\000\137\134\000\000\251\129\000\000\137\135\000\000\137\136\000\000\137\137\000\001\023\002\000\001\021\001\000\001\029\001\000\000\139\130\000\000\234\130\000\001\020\001\000\000\235\002\000\0008\001\000\001e\001\000\000*\129\000\001e\002\000\001e\003\000\001e\004\000\001e\005\000\001e\006\000\000\025\129\000\000(\001\000\000(\002\000\000(\003\000\000\024\001\000\000\024\002\000\000\024\003\000\000\024\004\000\000\022\001\000\000\021\129\000\000\022\002\000\000\022\003\000\000'\129\000\000&\001\000\000}\129\000\000}\001\000\000\019\129\000\000\019\001\000\000}\130\000\000}\131\000\000}\132\000\000}\133\000\000}\134\000\000}\135\000\000\019\130\000\000\019\002\000\000\019\131\000\000\019\132\000\000\162\001\000\000\019\133\000\000\019\134\000\000'\001\000\001\005\001\000\000'\002\000\000'\003\000\000'\004\000\000\018\001\000\000\018\002\000\000\027\129\000\000\027\001\000\000\027\002\000\000~\001\000\000\018\129\000\000\018\130\000\000\021\001\000\000\020\129\000\000\017\129\000\000\253\129\000\000\020\130\000\000&\129\000\000\020\001\000\000\018\131\000\000\020\002\000\000~\002\000\000\027\003\000\000\020\001\000\000\027\130\000\000\018\003\000\000\020\001\000\000\019\135\000\000\019\003\000\000\162\001\000\000\019\004\000\000\019\005\000\000\020\001\000\000\019\006\000\000}\002\000\000}\003\000\000}\004\000\000}e\007\000\001e\b\000\000\130\129\000\000\130\130\000\000\130\131\000\000\130\132\000\000\130\133\000\000\130\134\000\000\130\135\000\000\130\136\000\001e\t\000\001`\129\000\000\142\001\000\000|\001\000\001b\129\000\001Z\129\000\001`\001\000\001d\129\000\001d\001\000\001^\001\000\000\151\001\000\000\142\002\000\001^\129\000\000|\129\000\001_\001\000\001_\002\000\001a\001\000\001a\002\000\001_\129\000\001e\129\000\000\234\001\000\001]\129\000\001]\130\000\001]\131\000\000]\131\000\000]\132\000\001^\001\000\000\151\001\000\0009\129\000\001]\001\000\001^\129\000\000|\129\000\000S\129\000\000m\131\000\000m\132\000\000F\005\000\000F\006\000\000\165\003\000\000\165\004\000\000\190\005\000\000\168\001\000\000\167\129\000\000\166\129\000\000\190\006\000\000\189\130\000\000\189\131\000\000\189\132\000\000\168\001\000\000\167\129\000\000\166\129\000\000\189\133\000\000\141\130\000\000\141\131\000\000\141\132\000\000\141\002\000\000\238\131\000\000\238\132\000\000i\n\000\001\024\006\000\001\024\007\000\001\024\b\000\001\024\t\000\000\250\129\000\001\024\n\000\000\250\130\000\000\249\129\000\000\250\001\000\001\023\132\000\000i\132\000\000h\132\000\001q\129\000\000i\133\000\000h\133\000\000h\134\000\000h\135\000\000\251\129\000\000h\136\000\000h\137\000\001\023\133\000\001\023\134\000\001\023\135\000\001\023\136\000\000\250\129\000\001\023\137\000\000\170\131\000\000\170\132\000\000\174\001\000\000\173\129\000\000\172\129\000\000\006\133\000\000\006\134\000\001|\134\000\0008\001\000\001|\135\000\000\\\003\000\000\\\004\000\0011\001\000\0010\129\000\001/\001\000\001-\002\000\001(\001\000\001'\129\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001*\130\000\001*\002\000\001*\131\000\001*\003\000\001*\132\000\001*\004\000\001*\133\000\001*\005\000\000\168\001\000\000\167\129\000\000\166\129\000\001*\006\000\001*\134\000\001*\135\000\000\174\001\000\000\173\129\000\000\172\129\000\001*\136\000\001#\130\000\001#\002\000\001#\003\000\001#\131\000\001#\132\000\000B\132\000\000B\133\000\001\001\001\000\000B\134\000\000<\004\000\000;\132\000\000;\004\000\000:\132\000\000<\005\000\000;\005\000\001\001\001\000\000<\006\000\000;\006\000\000<\007\000\000<\b\000\000;\133\000\000;\134\000\000D\004\000\000D\005\000\000D\006\000\000D\007\000\000\017\003\000\000\017\004\000\000<\131\000\000<\132\000\000<\133\000\000<\134\000\000<\135\000\000k\129\000\000k\130\000\000\000\001\000\000\000\128\000\000m\001\000\000m\002\000\000\000\129\000\000\001\000\000\000\001\001\000\000\221\001\000\0008\001\000\000\221\002\000\000\001\128\000\000\221\129\000\000\221\130\000\000\001\129\000\000\002\000\000\000\226\129\000\000\225\001\000\000\224\001\000\000\223\001\000\000\222\129\000\000\222\001\000\000\222\002\000\000\002\001\000\000\002\128\000\001k\129\000\001k\001\000\001j\129\000\001j\001\000\001i\129\000\001i\001\000\001h\129\000\001k\130\000\001k\002\000\001j\130\000\001j\002\000\001i\130\000\001i\002\000\001h\130\000\001k\131\000\001i\003\000\001i\131\000\001k\003\000\001j\003\000\001y\129\000\001j\131\000\000\162\001\000\001y\130\000\000\162\002\000\001m\129\000\000\002\129\000\001m\001\000\001m\002\000\000\145\001\000\000\145\002\000\001l\001\000\001l\002\000\001l\003\000\001l\129\000\001l\130\000\000\003\000\000\000\146\129\000\000\146\001\000\000\147\129\000\000\147\001\000\000\147\002\000\000\147\130\000\000\146\130\000\000\146\131\000\000\146\132\000\000\146\002\000\000\003\001\000\001w\129\000\001w\130\000\001w\131\000\001w\132\000\001w\001\000\001w\002"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000F\000J\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000[\000]\000^\000_\000`\000a\000b\000i\000j\000k\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~t\001\011\001\r\001\014\001\016\001\018\001\019\001\020\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\031\001 \001\"\001#\001&\001'\001*\001+\001,\001-\001/\0010\0011\0014\0015\0016\0017\0018\0019\001:\001;\001?\001@\001C\001D\001E\001F\001H\001I\001J\001K\001M\001N\001O\001P\001R\001S\001T\001V\001W\001X\001Y\001Z\001\\\001]\001_\001`\001b\001d\001e\001f\001g\001i\001j\001l\001m\001p\001q\001r\001t\001u\001v\001w\001y\001z\001{\001|\001~b\002\014\002\017\002\018\002\019\002\020\002\021\002\022\002\023\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002 \002!\002\"\002&\002*\002.\0020\0022\0024\0025\0027\0028\002:\002;\002=\002>\002?\002@\002A\002B\002C\002D\002F\002H\002I\002K\002L\002M\002N\002O\002P\002S\002U\002V\002W\002X\002Y\002Z\002]\002^\002_\002`\002a\002b\002c\002d\002f\002g\002h\002i\002j\002l\002n\002o\002q\002r\002s\002t\002u\002x\002y\002{\002|\002}b\003\t\003\n\003\011\003\r\003\014\003\020\003\021\003\027\003\028\003\"\003#\003)\003*\003+\003,\003.\0034\0035\0037\003=\003C\003I\003J\003L\003M\003N\003O\003W\003Y\003Z\003[\003\\\003b\003f\003i\003j\003k\003l\003m\003n\003o\003p\003u\003w\003x\003z\003{\003}\003~t\004\n\004\011\004\012\004\r\004\017\004\024\004\025\004\030\004\031\004 \004$\004%\004&\004'\004)\004*\004.\004/\0041\0043\0045\0048\0049\004:\004<\004=\004>\004?\004@\004A\004C\004E\004G\004I\004K\004M\004N\004O\004P\004Q\004Y\004Z\004\\\004^\004`\004h\004i\004j\004k\004l\004n\004p\004r\004y\004z\004{\004|\004}\004\131\004\132\004\133\004\134\004\135\004\148\004\149\004\162\004\163\004\164\004\167\004\168\004\169\004\170\004\171\004\184\004\191\004\192\004\193\004\217\004\218\004\219\004\220\004\221\004\222\004\235\004\236\004\249\005\005\005\n\005\011\005\r\005\015\005\016\005\017\005\018\005\022\005\023\005\027\005\028\005\030\005 \005\"\005$\005%\005'\005(\005)\005+\005,\005.\005;\005<\005=\005>\005@\005A\005B\005C\005E\005F\005G\005b\005c\005{\005|\005\148\005\149\005\173\005\174\005\198\005\199\005\223\005\224\005\248\005\249\006\017\006\018\006*\006+\006C\006D\006\\\006]\006u\006v\006\142\006\143\006\167\006\168\006\192\006\193\006\217\006\218\006\242\006\243\007\011\007\012\007$\007%\007=\007>\007V\007W\007o\007p\007\136\007\137\007\139\007\152\007\153\007\177\007\180\007\181\007\182\007\183\007\184\007\185\007\186\007\188\007\189\007\191\007\192\007\193\007\199\007\200\007\201\007\202\007\208\007\209\007\215\007\216\007\222\007\223\007\224\007\225\007\226\007\228\007\229\007\235\007\236\007\237\007\238\007\239\b\007\b\r\b\014\b\015\b\017\b\018\b\019\b\020\b\021\b\022\b\024\b\025\b\026\b\028\b\029\b\030\b\031\b9\b;\b<\b>\b?\b@\bA\bB\bC\bD\bE\bR\bS\bT\bW\bX\bZ\b\\\b_\b`\bb\bc\bf\bi\bk\bl\bm\bn\bo\b}\b\138\b\140\b\141\b\142\b\155\b\161\b\163\b\165\b\167\b\168\b\192\b\194\b\196\b\198\b\199\b\223\b\225\b\227\b\229\b\230\b\254\t\012\t\014\t\016\t\018\t\019\t+\t-\t/\t1\t2\tJ\tL\te\tg\th\t\128\t\136\t\142\t\144\t\146\t\148\t\149\t\173\t\175\t\177\t\179\t\180\t\204\t\206\t\208\t\210\t\211\t\235\t\237\t\238\n\006\n\019\n\021\n\022\n\023\n/\n0\n1\n2\n3\n4\n5\nM\nN\nS\nV\nW\nX\nY\nZ\n[\n\\\n]\n^\n_\n`\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n{\n|\n\132\n\133\n\134\n\135\n\136\n\139\n\140\n\141\n\142\n\143\n\144\n\145\n\148\n\155\n\156\n\157\n\159\n\160\n\161\n\162\n\163\n\164\n\165\n\166\n\168\n\169\n\170\n\171\n\173\n\174\n\175\n\176\n\178\n\180\n\205\n\206\n\230\n\231\n\232\n\233\n\246\011\014\011\015\011\028\011\029\011\030\0116\0119\011;\011<\011=\011>\011?\011@\011A\011B\011C\011D\011E\011F\011G\011K\011L\011M\011N\011O\011P\011Q\011R\011V\011W\011[\011\\\011`\011a\011b\011c\011d\011e\011f\011g\011h\011i\011j\011k\011l\011m\011n\011o\011p\011q\011r\011s\011t\011u\011v\011w\011x\011y\011z\011{\011|\011}\011~\011\127\011\131\011\132\011\133\011\134\011\136\011\137\011\138\011\140\011\141\011\143\011\144\011\145\011\146\011\147\011\148\011\149\011\150\011\151\011\175\011\176\011\177\011\179\011\180\011\181\011\183\011\210\011\211\011\212\011\216\011\217\011\219\011\224\011\225\011\226\011\230\011\231\011\235\011\239\011\240\011\247\011\248\011\249\011\251\011\252\011\253\011\254\012\000\012\002\012\004\012\006\012\007\012\b\012\t\012\n\012\011\012\012\012\r\012\016\012\018\012\019\012\021\012\022\012\023\012\024\012\025\012\027\012\029\012\031\012 \012!\012\"\012#\012$\012%\012(\012+\012.\0121\0123\0124\0125\0126\0128\0129\012:\012<\012=\012?\012@\012A\012B\012D\012E\012F\012G\012K\012M\012N\012P\012Q\012R\012S\012T\012U\012X\012[\012]\012^\012_\012`\012b\012c\012d\012e\012f\012g\012h\012i\012j\012l\012s\012t\012u\012x\012y\012z\012{\012|\012}r\000\r\001\r\002\r\003\r\004\r\005\r\006\r\n\r\011\r\012\r\r\r\014\r\015\r\017\r\018\r\019\r\020\r\021\r\022\r\023\r\025\r\026\r\027\r\028\r\029\r\030\r\031\r \r\"\r#\r$\r%\r&\r(\r)\r+\r,\r-\r.\r/\r1\r2\r3\r4\r6\r7\r9\r:\r;\r<\r=\r>\r?\r@\rA\rB\rD\rF\rG\rH\rJ\rK\rL\rN\rO\rR\rT\rU\rV\rW\rY\r[\r\\\r]\r_\r`\ra\rc\rd\rf\rh\ri\rj\rk\rm\rn\rp\rq\rr\rs\rt\ru\rv\rw\rx\ry\r{\r|\r}\r~\r\127\r\128\r\129\r\130\r\132\r\133\r\134\r\135\r\136\r\137\r\138\r\139\r\140\r\141\r\144\r\145\r\146\r\147\r\151\r\154\r\155\r\156\r\157\r\158\r\159\r\163\r\166\r\168\r\170\r\171\r\173\r\174\r\175\r\176\r\177\r\178\r\179\r\180\r\181\r\182\r\183\r\184\r\185\r\186\r\187\r\188\r\189\r\190\r\191\r\192\r\193\r\194\r\195\r\196\r\197\r\198\r\199\r\200\r\201\r\202\r\203\r\205\r\206\r\207\r\208\r\209\r\210\r\211\r\212\r\213\r\214\r\215\r\217\r\218\r\219\r\220\r\221\r\222\r\223\r\224\r\225\r\227\r\229\r\230\r\231\r\232\r\233\r\234\r\235\r\236\r\237\r\238\r\239\r\240\r\241\r\242\r\244\r\245\r\246\r\248\r\252\r\253\r\254\r\255\014\000\014\001\014\002\014\004\014\005\014\006\014\b\014\t\014\n\014\012\014\r\014\014\014\015\014\016\014\018\014\019\014\021\014\022\014\023\014\025\014\027\014\028\014\030\014\031\014 \014\"\014#\014$\014&\014'\014)\014*\014,\014-\014.\014/\0140\0143\0144\0145\0146\0147\0149\014:\014;\014<\014=\014>\014@\014A\014B\014C\014D\014E\014F\014G\014H\014I\014J\014K\014L\014M\014O\014P\014Q\014R\014T\014U\014V\014W\014X\014Y\014Z\014[\014\\\014]\014^\014_\014`\014a\014b\014c\014d\014e\014f\014g\014h\014i\014k\014l\014n\014o\014p\014q\014r\014s\014t\014u\014v\014w\014x\014y\014z\014}\014~b\015\t\015\011\015\012\015\r\015\014\015\015\015\016\015\017\015\023\015\024\015\025\015\026\015!\015(\015)\015*\015+\015,\015-\0150\0152\0153\0154\0155\0156\0157\0158\0159\015:\015;\015<\015=\015>\015@\015A\015B\015C\015D\015E\015F\015G\015H\015I\015J\015K\015L\015M\015N\015O"))
+    
+    and nullable =
+      "\000\016R\002\000\128\000\002\028 \003\255\001\128\000\127\255\000\001\002\b@\000`\000"
+    
+    and first =
+      (132, "2\248H\018\197V\254fz\002\160\251\145@\003\142\003/\132\129,Uo\230g\160*\015\185\020\0008\224\001\136@\000@\0020$Z\000 \n\128\000\001\004\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000$\000\128\000A\000\004 \000 \000\025\000\000 \0002\248H\018\197V\254fz\002\128\251\145@\003\142\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\002\001\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\0002\248H\018\197V\254fz\002\160\251\145@\003\142\000\000\000\000\004\000 \000\000\000\000\000\000\000\000\000\000\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\002\004\000\"\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003/\132\129,Uo\230g\160*\015\185\020\0008\224\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000$\000\000\000A\000\164 \000 \000\024\000\000 \0002\248H\018\197V\254fz\002\128\251\129@\003\142\000\024\164\000\132\128#\002E`\002\000\164\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\136@\000@\002 $R\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\136@\018\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\000\000@\000@\002\000\000\002\000\000\b\000\000\001\000\000$\000\000\000A\000\004 \000 \000\024\000\000 \000\002@\b\000\004\016\000B\000\002\000\001\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\138@\026\b@0$v\000\000\n\001@\001\140\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136@\018\000@0$r\000\000\n\001@\001\140\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\0002\248H\026\197V\254fz\002\128\251\129@\007\142\000\016\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@0\184@\018\193F\254$z|b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\b\000\000\000\000\000\000\000\128\001\128\000 \000\0000\184@\000 \000\000 \000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\128\000A\000\164 \000\"\000\024\000\000 \000\002@\000\000\004\016\nB\000\002\000\001\128\000\002\000\000 \000\000\000\000\016\004 \024\000\000\000\000\016\000\000\002\000\000\000\000\001\000B\000\128\000\000\000\001\000\000\000$\000\128\000A\000\164 \000 \000\024\000\000 \000\002@\bn\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\b\164\001\160\132\003\002G`\000\000\160\020\000\024\192\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\000B\000\002\000\001\144\000\002\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\0002\248H\018\197V\254fz\002\128\251\145@\003\142\000\bbH\n0$V\000 \n\000\000\005\004\000\024\164\000\132\128#\002E`\002\000\164\000\002P@\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\001\128\000 \000\0000\184P\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000@\000\000\000\000\000\002\000\000\b\000\000\001\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\128\000\000\001\0000\000@\000\000\000\000\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000B\000\128\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\164\000\000P@\002\000\000\000\000\001\000B\001\128\000\000\000\001\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000")
+    
+  end) (ET) (TI)
+  
+end
+
+let use_file =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1761 lexer lexbuf) : (
+# 866 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase list)
+# 44222 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and toplevel_phrase =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1740 lexer lexbuf) : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 44230 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and parse_pattern =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1736 lexer lexbuf) : (
+# 872 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.pattern)
+# 44238 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and parse_expression =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1732 lexer lexbuf) : (
+# 870 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.expression)
+# 44246 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and parse_core_type =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1728 lexer lexbuf) : (
+# 868 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.core_type)
+# 44254 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and interface =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 1724 lexer lexbuf) : (
+# 862 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.signature)
+# 44262 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+and implementation =
+  fun lexer lexbuf ->
+    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
+# 860 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.structure)
+# 44270 "src/ocaml/preprocess/parser_raw.ml"
+    ))
+
+module Incremental = struct
+  
+  let use_file =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1761 initial_position) : (
+# 866 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase list)
+# 44280 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and toplevel_phrase =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1740 initial_position) : (
+# 864 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.toplevel_phrase)
+# 44288 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and parse_pattern =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1736 initial_position) : (
+# 872 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.pattern)
+# 44296 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and parse_expression =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1732 initial_position) : (
+# 870 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.expression)
+# 44304 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and parse_core_type =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1728 initial_position) : (
+# 868 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.core_type)
+# 44312 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and interface =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 1724 initial_position) : (
+# 862 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.signature)
+# 44320 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+  and implementation =
+    fun initial_position ->
+      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
+# 860 "src/ocaml/preprocess/parser_raw.mly"
+      (Parsetree.structure)
+# 44328 "src/ocaml/preprocess/parser_raw.ml"
+      ) MenhirInterpreter.checkpoint)
+  
+end
+
+# 3927 "src/ocaml/preprocess/parser_raw.mly"
+  
+
+# 44336 "src/ocaml/preprocess/parser_raw.ml"
+
+# 269 "<standard.mly>"
+  
+
+# 44341 "src/ocaml/preprocess/parser_raw.ml"
diff --git a/src/ocaml/preprocess/410+multicore/parser_raw.mli b/src/ocaml/preprocess/410+multicore/parser_raw.mli
new file mode 100644
index 00000000..d38c1c10
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_raw.mli
@@ -0,0 +1,533 @@
+
+(* The type of tokens. *)
+
+type token = 
+  | WITH
+  | WHILE_LWT
+  | WHILE
+  | WHEN
+  | VIRTUAL
+  | VAL
+  | UNDERSCORE
+  | UIDENT of (string)
+  | TYPE
+  | TRY_LWT
+  | TRY
+  | TRUE
+  | TO
+  | TILDE
+  | THEN
+  | STRUCT
+  | STRING of (string * string option)
+  | STAR
+  | SIG
+  | SEMISEMI
+  | SEMI
+  | RPAREN
+  | REC
+  | RBRACKET
+  | RBRACE
+  | QUOTE
+  | QUESTIONQUESTION
+  | QUESTION
+  | PRIVATE
+  | PREFIXOP of (string)
+  | PLUSEQ
+  | PLUSDOT
+  | PLUS
+  | PERCENT
+  | OR
+  | OPTLABEL of (string)
+  | OPEN
+  | OF
+  | OBJECT
+  | NONREC
+  | NEW
+  | MUTABLE
+  | MODULE
+  | MINUSGREATER
+  | MINUSDOT
+  | MINUS
+  | METHOD
+  | MATCH_LWT
+  | MATCH
+  | LPAREN
+  | LIDENT of (string)
+  | LET_LWT
+  | LETOP of (string)
+  | LET
+  | LESSMINUS
+  | LESS
+  | LBRACKETPERCENTPERCENT
+  | LBRACKETPERCENT
+  | LBRACKETLESS
+  | LBRACKETGREATER
+  | LBRACKETBAR
+  | LBRACKETATATAT
+  | LBRACKETATAT
+  | LBRACKETAT
+  | LBRACKET
+  | LBRACELESS
+  | LBRACE
+  | LAZY
+  | LABEL of (string)
+  | INT of (string * char option)
+  | INITIALIZER
+  | INHERIT
+  | INFIXOP4 of (string)
+  | INFIXOP3 of (string)
+  | INFIXOP2 of (string)
+  | INFIXOP1 of (string)
+  | INFIXOP0 of (string)
+  | INCLUDE
+  | IN
+  | IF
+  | HASHOP of (string)
+  | HASH
+  | GREATERRBRACKET
+  | GREATERRBRACE
+  | GREATERDOT
+  | GREATER
+  | FUNCTOR
+  | FUNCTION
+  | FUN
+  | FOR_LWT
+  | FOR
+  | FLOAT of (string * char option)
+  | FINALLY_LWT
+  | FALSE
+  | EXTERNAL
+  | EXCEPTION
+  | EQUAL
+  | EOL
+  | EOF
+  | END
+  | ELSE
+  | DOWNTO
+  | DOTTILDE
+  | DOTOP of (string)
+  | DOTLESS
+  | DOTDOT
+  | DOT
+  | DONE
+  | DOCSTRING of (Docstrings.docstring)
+  | DO
+  | CONSTRAINT
+  | COMMENT of (string * Location.t)
+  | COMMA
+  | COLONGREATER
+  | COLONEQUAL
+  | COLONCOLON
+  | COLON
+  | CLASS
+  | CHAR of (char)
+  | BEGIN
+  | BARRBRACKET
+  | BARBAR
+  | BAR
+  | BANG
+  | BACKQUOTE
+  | ASSERT
+  | AS
+  | ANDOP of (string)
+  | AND
+  | AMPERSAND
+  | AMPERAMPER
+
+(* This exception is raised by the monolithic API functions. *)
+
+exception Error
+
+(* The monolithic API. *)
+
+val use_file: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.toplevel_phrase list)
+
+val toplevel_phrase: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.toplevel_phrase)
+
+val parse_pattern: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.pattern)
+
+val parse_expression: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.expression)
+
+val parse_core_type: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.core_type)
+
+val interface: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.signature)
+
+val implementation: (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Parsetree.structure)
+
+module MenhirInterpreter : sig
+  
+  (* The incremental API. *)
+  
+  include MenhirLib.IncrementalEngine.INCREMENTAL_ENGINE
+    with type token = token
+  
+  (* The indexed type of terminal symbols. *)
+  
+  type _ terminal = 
+    | T_error : unit terminal
+    | T_WITH : unit terminal
+    | T_WHILE_LWT : unit terminal
+    | T_WHILE : unit terminal
+    | T_WHEN : unit terminal
+    | T_VIRTUAL : unit terminal
+    | T_VAL : unit terminal
+    | T_UNDERSCORE : unit terminal
+    | T_UIDENT : (string) terminal
+    | T_TYPE : unit terminal
+    | T_TRY_LWT : unit terminal
+    | T_TRY : unit terminal
+    | T_TRUE : unit terminal
+    | T_TO : unit terminal
+    | T_TILDE : unit terminal
+    | T_THEN : unit terminal
+    | T_STRUCT : unit terminal
+    | T_STRING : (string * string option) terminal
+    | T_STAR : unit terminal
+    | T_SIG : unit terminal
+    | T_SEMISEMI : unit terminal
+    | T_SEMI : unit terminal
+    | T_RPAREN : unit terminal
+    | T_REC : unit terminal
+    | T_RBRACKET : unit terminal
+    | T_RBRACE : unit terminal
+    | T_QUOTE : unit terminal
+    | T_QUESTIONQUESTION : unit terminal
+    | T_QUESTION : unit terminal
+    | T_PRIVATE : unit terminal
+    | T_PREFIXOP : (string) terminal
+    | T_PLUSEQ : unit terminal
+    | T_PLUSDOT : unit terminal
+    | T_PLUS : unit terminal
+    | T_PERCENT : unit terminal
+    | T_OR : unit terminal
+    | T_OPTLABEL : (string) terminal
+    | T_OPEN : unit terminal
+    | T_OF : unit terminal
+    | T_OBJECT : unit terminal
+    | T_NONREC : unit terminal
+    | T_NEW : unit terminal
+    | T_MUTABLE : unit terminal
+    | T_MODULE : unit terminal
+    | T_MINUSGREATER : unit terminal
+    | T_MINUSDOT : unit terminal
+    | T_MINUS : unit terminal
+    | T_METHOD : unit terminal
+    | T_MATCH_LWT : unit terminal
+    | T_MATCH : unit terminal
+    | T_LPAREN : unit terminal
+    | T_LIDENT : (string) terminal
+    | T_LET_LWT : unit terminal
+    | T_LETOP : (string) terminal
+    | T_LET : unit terminal
+    | T_LESSMINUS : unit terminal
+    | T_LESS : unit terminal
+    | T_LBRACKETPERCENTPERCENT : unit terminal
+    | T_LBRACKETPERCENT : unit terminal
+    | T_LBRACKETLESS : unit terminal
+    | T_LBRACKETGREATER : unit terminal
+    | T_LBRACKETBAR : unit terminal
+    | T_LBRACKETATATAT : unit terminal
+    | T_LBRACKETATAT : unit terminal
+    | T_LBRACKETAT : unit terminal
+    | T_LBRACKET : unit terminal
+    | T_LBRACELESS : unit terminal
+    | T_LBRACE : unit terminal
+    | T_LAZY : unit terminal
+    | T_LABEL : (string) terminal
+    | T_INT : (string * char option) terminal
+    | T_INITIALIZER : unit terminal
+    | T_INHERIT : unit terminal
+    | T_INFIXOP4 : (string) terminal
+    | T_INFIXOP3 : (string) terminal
+    | T_INFIXOP2 : (string) terminal
+    | T_INFIXOP1 : (string) terminal
+    | T_INFIXOP0 : (string) terminal
+    | T_INCLUDE : unit terminal
+    | T_IN : unit terminal
+    | T_IF : unit terminal
+    | T_HASHOP : (string) terminal
+    | T_HASH : unit terminal
+    | T_GREATERRBRACKET : unit terminal
+    | T_GREATERRBRACE : unit terminal
+    | T_GREATERDOT : unit terminal
+    | T_GREATER : unit terminal
+    | T_FUNCTOR : unit terminal
+    | T_FUNCTION : unit terminal
+    | T_FUN : unit terminal
+    | T_FOR_LWT : unit terminal
+    | T_FOR : unit terminal
+    | T_FLOAT : (string * char option) terminal
+    | T_FINALLY_LWT : unit terminal
+    | T_FALSE : unit terminal
+    | T_EXTERNAL : unit terminal
+    | T_EXCEPTION : unit terminal
+    | T_EQUAL : unit terminal
+    | T_EOL : unit terminal
+    | T_EOF : unit terminal
+    | T_END : unit terminal
+    | T_ELSE : unit terminal
+    | T_DOWNTO : unit terminal
+    | T_DOTTILDE : unit terminal
+    | T_DOTOP : (string) terminal
+    | T_DOTLESS : unit terminal
+    | T_DOTDOT : unit terminal
+    | T_DOT : unit terminal
+    | T_DONE : unit terminal
+    | T_DOCSTRING : (Docstrings.docstring) terminal
+    | T_DO : unit terminal
+    | T_CONSTRAINT : unit terminal
+    | T_COMMENT : (string * Location.t) terminal
+    | T_COMMA : unit terminal
+    | T_COLONGREATER : unit terminal
+    | T_COLONEQUAL : unit terminal
+    | T_COLONCOLON : unit terminal
+    | T_COLON : unit terminal
+    | T_CLASS : unit terminal
+    | T_CHAR : (char) terminal
+    | T_BEGIN : unit terminal
+    | T_BARRBRACKET : unit terminal
+    | T_BARBAR : unit terminal
+    | T_BAR : unit terminal
+    | T_BANG : unit terminal
+    | T_BACKQUOTE : unit terminal
+    | T_ASSERT : unit terminal
+    | T_AS : unit terminal
+    | T_ANDOP : (string) terminal
+    | T_AND : unit terminal
+    | T_AMPERSAND : unit terminal
+    | T_AMPERAMPER : unit terminal
+  
+  (* The indexed type of nonterminal symbols. *)
+  
+  type _ nonterminal = 
+    | N_with_type_binder : (Asttypes.private_flag) nonterminal
+    | N_with_constraint : (Parsetree.with_constraint) nonterminal
+    | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
+    | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
+    | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
+    | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
+    | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) nonterminal
+    | N_val_longident : (Longident.t) nonterminal
+    | N_val_ident : (string) nonterminal
+    | N_use_file : (Parsetree.toplevel_phrase list) nonterminal
+    | N_type_variance : (Asttypes.variance) nonterminal
+    | N_type_variable : (Parsetree.core_type) nonterminal
+    | N_type_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+    | N_type_parameter : (Parsetree.core_type * Asttypes.variance) nonterminal
+    | N_type_longident : (Longident.t) nonterminal
+    | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
+    | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
+    | N_tuple_type : (Parsetree.core_type) nonterminal
+    | N_toplevel_phrase : (Parsetree.toplevel_phrase) nonterminal
+    | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
+    | N_tag_field : (Parsetree.row_field) nonterminal
+    | N_subtractive : (string) nonterminal
+    | N_structure_item : (Parsetree.structure_item) nonterminal
+    | N_structure : (Parsetree.structure) nonterminal
+    | N_strict_binding : (Parsetree.expression) nonterminal
+    | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
+    | N_single_attr_id : (string) nonterminal
+    | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
+    | N_simple_pattern : (Parsetree.pattern) nonterminal
+    | N_simple_expr : (Parsetree.expression) nonterminal
+    | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
+    | N_signed_constant : (Parsetree.constant) nonterminal
+    | N_signature_item : (Parsetree.signature_item) nonterminal
+    | N_signature : (Parsetree.signature) nonterminal
+    | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
+    | N_seq_expr : (Parsetree.expression) nonterminal
+    | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
+    | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
+    | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
+    | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
+    | N_row_field : (Parsetree.row_field) nonterminal
+    | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
+    | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
+    | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
+    | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
+    | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+    | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
+    | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
+    | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
+    | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
+    | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
+    | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
+    | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
+    | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
+    | N_reversed_nonempty_llist_functor_arg_ : (Parsetree.functor_parameter list) nonterminal
+    | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
+    | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
+    | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
+    | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
+    | N_record_expr_content : (Parsetree.expression option *
+  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
+    | N_rec_flag : (Asttypes.rec_flag) nonterminal
+    | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
+    | N_private_flag : (Asttypes.private_flag) nonterminal
+    | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
+    | N_post_item_attribute : (Parsetree.attribute) nonterminal
+    | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
+    | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
+    | N_payload : (Parsetree.payload) nonterminal
+    | N_pattern_var : (Parsetree.pattern) nonterminal
+    | N_pattern_no_exn : (Parsetree.pattern) nonterminal
+    | N_pattern_gen : (Parsetree.pattern) nonterminal
+    | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
+    | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
+    | N_pattern : (Parsetree.pattern) nonterminal
+    | N_parse_pattern : (Parsetree.pattern) nonterminal
+    | N_parse_expression : (Parsetree.expression) nonterminal
+    | N_parse_core_type : (Parsetree.core_type) nonterminal
+    | N_paren_module_expr : (Parsetree.module_expr) nonterminal
+    | N_optlabel : (string) nonterminal
+    | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
+    | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
+    | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
+    | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
+    | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
+    | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
+    | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
+    | N_option_SEMI_ : (unit option) nonterminal
+    | N_option_BAR_ : (unit option) nonterminal
+    | N_opt_ampersand : (bool) nonterminal
+    | N_operator : (string) nonterminal
+    | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
+    | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
+    | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
+    | N_nonempty_list_raw_string_ : (string list) nonterminal
+    | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
+    | N_name_tag : (string) nonterminal
+    | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
+    | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
+    | N_mty_longident : (Longident.t) nonterminal
+    | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
+    | N_module_type : (Parsetree.module_type) nonterminal
+    | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
+    | N_module_name : (string option) nonterminal
+    | N_module_expr : (Parsetree.module_expr) nonterminal
+    | N_module_declaration_body : (Parsetree.module_type) nonterminal
+    | N_module_binding_body : (Parsetree.module_expr) nonterminal
+    | N_mod_longident : (Longident.t) nonterminal
+    | N_mod_ext_longident : (Longident.t) nonterminal
+    | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
+  Parsetree.attributes) nonterminal
+    | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
+    | N_match_case : (Parsetree.case) nonterminal
+    | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
+    | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
+    | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
+    | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
+    | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
+    | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
+    | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
+    | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
+    | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
+    | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
+    | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
+    | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
+    | N_list_attribute_ : (Parsetree.attributes) nonterminal
+    | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
+    | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
+    | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
+    | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
+    | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
+    | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
+    | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
+    | N_let_pattern : (Parsetree.pattern) nonterminal
+    | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
+    | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
+    | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
+    | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
+    | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
+    | N_label_longident : (Longident.t) nonterminal
+    | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
+    | N_label_declarations : (Parsetree.label_declaration list) nonterminal
+    | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
+    | N_label_declaration : (Parsetree.label_declaration) nonterminal
+    | N_item_extension : (Parsetree.extension) nonterminal
+    | N_interface : (Parsetree.signature) nonterminal
+    | N_index_mod : (string) nonterminal
+    | N_implementation : (Parsetree.structure) nonterminal
+    | N_ident : (string) nonterminal
+    | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) nonterminal
+    | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
+  Parsetree.type_declaration) nonterminal
+    | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) nonterminal
+    | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
+  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
+  Docstrings.info) nonterminal
+    | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
+    | N_functor_args : (Parsetree.functor_parameter list) nonterminal
+    | N_functor_arg : (Parsetree.functor_parameter) nonterminal
+    | N_function_type : (Parsetree.core_type) nonterminal
+    | N_fun_def : (Parsetree.expression) nonterminal
+    | N_fun_binding : (Parsetree.expression) nonterminal
+    | N_formal_class_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
+    | N_floating_attribute : (Parsetree.attribute) nonterminal
+    | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
+    | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
+    | N_extension : (Parsetree.extension) nonterminal
+    | N_ext : (string Location.loc option) nonterminal
+    | N_expr : (Parsetree.expression) nonterminal
+    | N_direction_flag : (Asttypes.direction_flag) nonterminal
+    | N_core_type : (Parsetree.core_type) nonterminal
+    | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
+    | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
+    | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
+    | N_constr_longident : (Longident.t) nonterminal
+    | N_constr_ident : (string) nonterminal
+    | N_constant : (Parsetree.constant) nonterminal
+    | N_clty_longident : (Longident.t) nonterminal
+    | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
+    | N_class_type : (Parsetree.class_type) nonterminal
+    | N_class_simple_expr : (Parsetree.class_expr) nonterminal
+    | N_class_signature : (Parsetree.class_type) nonterminal
+    | N_class_sig_field : (Parsetree.class_type_field) nonterminal
+    | N_class_self_type : (Parsetree.core_type) nonterminal
+    | N_class_self_pattern : (Parsetree.pattern) nonterminal
+    | N_class_longident : (Longident.t) nonterminal
+    | N_class_fun_def : (Parsetree.class_expr) nonterminal
+    | N_class_fun_binding : (Parsetree.class_expr) nonterminal
+    | N_class_field : (Parsetree.class_field) nonterminal
+    | N_class_expr : (Parsetree.class_expr) nonterminal
+    | N_attribute : (Parsetree.attribute) nonterminal
+    | N_attr_id : (string Location.loc) nonterminal
+    | N_atomic_type : (Parsetree.core_type) nonterminal
+    | N_and_let_binding : (Ast_helper.let_binding) nonterminal
+    | N_alias_type : (Parsetree.core_type) nonterminal
+    | N_additive : (string) nonterminal
+  
+  (* The inspection API. *)
+  
+  include MenhirLib.IncrementalEngine.INSPECTION
+    with type 'a lr1state := 'a lr1state
+    with type production := production
+    with type 'a terminal := 'a terminal
+    with type 'a nonterminal := 'a nonterminal
+    with type 'a env := 'a env
+  
+end
+
+(* The entry point(s) to the incremental API. *)
+
+module Incremental : sig
+  
+  val use_file: Lexing.position -> (Parsetree.toplevel_phrase list) MenhirInterpreter.checkpoint
+  
+  val toplevel_phrase: Lexing.position -> (Parsetree.toplevel_phrase) MenhirInterpreter.checkpoint
+  
+  val parse_pattern: Lexing.position -> (Parsetree.pattern) MenhirInterpreter.checkpoint
+  
+  val parse_expression: Lexing.position -> (Parsetree.expression) MenhirInterpreter.checkpoint
+  
+  val parse_core_type: Lexing.position -> (Parsetree.core_type) MenhirInterpreter.checkpoint
+  
+  val interface: Lexing.position -> (Parsetree.signature) MenhirInterpreter.checkpoint
+  
+  val implementation: Lexing.position -> (Parsetree.structure) MenhirInterpreter.checkpoint
+  
+end
diff --git a/src/ocaml/preprocess/410+multicore/parser_raw.mly b/src/ocaml/preprocess/410+multicore/parser_raw.mly
new file mode 100644
index 00000000..9c691725
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_raw.mly
@@ -0,0 +1,3927 @@
+/**************************************************************************/
+/*                                                                        */
+/*                                 OCaml                                  */
+/*                                                                        */
+/*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           */
+/*                                                                        */
+/*   Copyright 1996 Institut National de Recherche en Informatique et     */
+/*     en Automatique.                                                    */
+/*                                                                        */
+/*   All rights reserved.  This file is distributed under the terms of    */
+/*   the GNU Lesser General Public License version 2.1, with the          */
+/*   special exception on linking described in the file LICENSE.          */
+/*                                                                        */
+/**************************************************************************/
+
+/* The parser definition */
+
+%{
+
+[@@@ocaml.warning "-9"]
+
+open Asttypes
+open Longident
+open Parsetree
+open Ast_helper
+open Docstrings
+open Docstrings.WithMenhir
+open Msupport_parsing
+
+let mkloc = Location.mkloc
+let mknoloc = Location.mknoloc
+
+let make_loc (startpos, endpos) = {
+  Location.loc_start = startpos;
+  Location.loc_end = endpos;
+  Location.loc_ghost = false;
+}
+
+let ghost_loc (startpos, endpos) = {
+  Location.loc_start = startpos;
+  Location.loc_end = endpos;
+  Location.loc_ghost = true;
+}
+
+let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
+let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
+let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
+let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
+let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
+let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
+let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
+let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
+let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d
+
+let pstr_typext (te, ext) =
+  (Pstr_typext te, ext)
+let pstr_primitive (vd, ext) =
+  (Pstr_primitive vd, ext)
+let pstr_type ((nr, ext), tys) =
+  (Pstr_type (nr, tys), ext)
+let pstr_exception (te, ext) =
+  (Pstr_exception te, ext)
+let pstr_include (body, ext) =
+  (Pstr_include body, ext)
+let pstr_recmodule (ext, bindings) =
+  (Pstr_recmodule bindings, ext)
+
+let psig_typext (te, ext) =
+  (Psig_typext te, ext)
+let psig_value (vd, ext) =
+  (Psig_value vd, ext)
+let psig_type ((nr, ext), tys) =
+  (Psig_type (nr, tys), ext)
+let psig_typesubst ((nr, ext), tys) =
+  assert (nr = Recursive); (* see [no_nonrec_flag] *)
+  (Psig_typesubst tys, ext)
+let psig_exception (te, ext) =
+  (Psig_exception te, ext)
+let psig_include (body, ext) =
+  (Psig_include body, ext)
+
+let mkctf ~loc ?attrs ?docs d =
+  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
+let mkcf ~loc ?attrs ?docs d =
+  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d
+
+let mkrhs rhs loc = mkloc rhs (make_loc loc)
+let ghrhs rhs loc = mkloc rhs (ghost_loc loc)
+
+let push_loc x acc =
+  if x.Location.loc_ghost
+  then acc
+  else x :: acc
+
+let reloc_pat ~loc x =
+  { x with ppat_loc = make_loc loc;
+           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
+let reloc_exp ~loc x =
+  { x with pexp_loc = make_loc loc;
+           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
+let reloc_typ ~loc x =
+  { x with ptyp_loc = make_loc loc;
+           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;
+
+let mkexpvar ~loc (name : string) =
+  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))
+
+let mkoperator =
+  mkexpvar
+
+let mkpatvar ~loc name =
+  mkpat ~loc (Ppat_var (mkrhs name loc))
+
+(*
+  Ghost expressions and patterns:
+  expressions and patterns that do not appear explicitly in the
+  source file they have the loc_ghost flag set to true.
+  Then the profiler will not try to instrument them and the
+  -annot option will not try to display their type.
+
+  Every grammar rule that generates an element with a location must
+  make at most one non-ghost element, the topmost one.
+
+  How to tell whether your location must be ghost:
+  A location corresponds to a range of characters in the source file.
+  If the location contains a piece of code that is syntactically
+  valid (according to the documentation), and corresponds to the
+  AST node, then the location must be real; in all other cases,
+  it must be ghost.
+*)
+let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
+let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
+let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
+let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
+let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
+let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d
+
+let mkinfix arg1 op arg2 =
+  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])
+
+let neg_string f =
+  if String.length f > 0 && f.[0] = '-'
+  then String.sub f 1 (String.length f - 1)
+  else "-" ^ f
+
+let mkuminus ~oploc name arg =
+  match name, arg.pexp_desc with
+  | "-", Pexp_constant(Pconst_integer (n,m)) ->
+      Pexp_constant(Pconst_integer(neg_string n,m))
+  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
+      Pexp_constant(Pconst_float(neg_string f, m))
+  | _ ->
+      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
+
+let mkuplus ~oploc name arg =
+  let desc = arg.pexp_desc in
+  match name, desc with
+  | "+", Pexp_constant(Pconst_integer _)
+  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
+  | _ ->
+      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])
+
+(* TODO define an abstraction boundary between locations-as-pairs
+   and locations-as-Location.t; it should be clear when we move from
+   one world to the other *)
+
+let mkexp_cons_desc consloc args =
+  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
+let mkexp_cons ~loc consloc args =
+  mkexp ~loc (mkexp_cons_desc consloc args)
+
+let mkpat_cons_desc consloc args =
+  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
+let mkpat_cons ~loc consloc args =
+  mkpat ~loc (mkpat_cons_desc consloc args)
+
+let ghexp_cons_desc consloc args =
+  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
+let ghpat_cons_desc consloc args =
+  Ppat_construct(ghrhs (Lident "::") consloc, Some args)
+
+let rec mktailexp nilloc = let open Location in function
+    [] ->
+      let nil = ghloc ~loc:nilloc (Lident "[]") in
+      Pexp_construct (nil, None), nilloc
+  | e1 :: el ->
+      let exp_el, el_loc = mktailexp nilloc el in
+      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
+      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
+      ghexp_cons_desc loc arg, loc
+
+let rec mktailpat nilloc = let open Location in function
+    [] ->
+      let nil = ghloc ~loc:nilloc (Lident "[]") in
+      Ppat_construct (nil, None), nilloc
+  | p1 :: pl ->
+      let pat_pl, el_loc = mktailpat nilloc pl in
+      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
+      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
+      ghpat_cons_desc loc arg, loc
+
+let mkstrexp e attrs =
+  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }
+
+let mkexp_constraint ~loc e (t1, t2) =
+  match t1, t2 with
+  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
+  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
+  | None, None -> assert false
+
+let mkexp_opt_constraint ~loc e = function
+  | None -> e
+  | Some constraint_ -> mkexp_constraint ~loc e constraint_
+
+let mkpat_opt_constraint ~loc p = function
+  | None -> p
+  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))
+
+(*
+let syntax_error () =
+  raise Syntaxerr.Escape_error
+*)
+
+let not_expecting loc nonterm =
+  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))
+
+(*
+let unclosed opening_name opening_loc closing_name closing_loc =
+  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
+                                           make_loc closing_loc, closing_name)))
+
+let expecting loc nonterm =
+    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))
+*)
+
+let dotop ~left ~right ~assign ~ext ~multi =
+  let assign = if assign then "<-" else "" in
+  let mid = if multi then ";.." else "" in
+  String.concat "" ["."; ext; left; mid; right; assign]
+let paren = "(",")"
+let brace = "{", "}"
+let bracket = "[", "]"
+let lident x =  Lident x
+let ldot x y = Ldot(x,y)
+let dotop_fun ~loc dotop =
+  (* We could use ghexp here, but sticking to mkexp for parser.mly
+     compatibility. TODO improve parser.mly *)
+  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))
+
+let array_function ~loc str name =
+  ghloc ~loc (Ldot(Lident str,
+                   (if !Clflags.fast then "unsafe_" ^ name else name)))
+
+let array_get_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
+let string_get_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))
+
+let array_set_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
+let string_set_fun ~loc =
+  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))
+
+let multi_indices ~loc = function
+  | [a] -> false, a
+  | l -> true, mkexp ~loc (Pexp_array l)
+
+let index_get ~loc get_fun array index =
+  let args = [Nolabel, array; Nolabel, index] in
+   mkexp ~loc (Pexp_apply(get_fun, args))
+
+let index_set ~loc set_fun array index value =
+  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
+   mkexp ~loc (Pexp_apply(set_fun, args))
+
+let array_get ~loc = index_get ~loc (array_get_fun ~loc)
+let string_get ~loc = index_get ~loc (string_get_fun ~loc)
+let dotop_get ~loc path (left,right) ext array index =
+  let multi, index = multi_indices ~loc index in
+  index_get ~loc
+    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
+    array index
+
+let array_set ~loc = index_set ~loc (array_set_fun ~loc)
+let string_set ~loc = index_set ~loc (string_set_fun ~loc)
+let dotop_set ~loc path (left,right) ext array index value=
+  let multi, index = multi_indices ~loc index in
+  index_set ~loc
+    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
+    array index value
+
+
+let bigarray_function ~loc str name =
+  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))
+
+let bigarray_untuplify = function
+    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
+  | exp -> [exp]
+
+let bigarray_get ~loc arr arg =
+  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
+  let bigarray_function = bigarray_function ~loc in
+  let get = if !Clflags.fast then "unsafe_get" else "get" in
+  match bigarray_untuplify arg with
+    [c1] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
+                       [Nolabel, arr; Nolabel, c1]))
+  | [c1;c2] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
+  | [c1;c2;c3] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
+  | coords ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
+                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))
+
+let bigarray_set ~loc arr arg newval =
+  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
+  let bigarray_function = bigarray_function ~loc in
+  let set = if !Clflags.fast then "unsafe_set" else "set" in
+  match bigarray_untuplify arg with
+    [c1] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
+                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
+  | [c1;c2] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
+                       [Nolabel, arr; Nolabel, c1;
+                        Nolabel, c2; Nolabel, newval]))
+  | [c1;c2;c3] ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
+                       [Nolabel, arr; Nolabel, c1;
+                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
+  | coords ->
+      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
+                       [Nolabel, arr;
+                        Nolabel, ghexp(Pexp_array coords);
+                        Nolabel, newval]))
+
+let lapply ~loc p1 p2 =
+  if !Clflags.applicative_functors
+  then Lapply(p1, p2)
+  else raise (Syntaxerr.Error(
+                  Syntaxerr.Applicative_path (make_loc loc)))
+
+let exp_of_longident ~loc lid =
+  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})
+
+(* [loc_map] could be [Location.map]. *)
+let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
+  { x with txt = f x.txt }
+
+let loc_last (id : Longident.t Location.loc) : string Location.loc =
+  loc_map Longident.last id
+
+let loc_lident (id : string Location.loc) : Longident.t Location.loc =
+  loc_map (fun x -> Lident x) id
+
+let exp_of_label ~loc lbl =
+  mkexp ~loc (Pexp_ident (loc_lident lbl))
+
+let pat_of_label ~loc lbl =
+  mkpat ~loc (Ppat_var (loc_last lbl))
+
+let mk_newtypes ~loc newtypes exp =
+  let mkexp = mkexp ~loc in
+  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
+    newtypes exp
+
+let wrap_type_annotation ~loc newtypes core_type body =
+  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
+  let mk_newtypes = mk_newtypes ~loc in
+  let exp = mkexp(Pexp_constraint(body,core_type)) in
+  let exp = mk_newtypes newtypes exp in
+  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))
+
+let wrap_exp_attrs ~loc body (ext, attrs) =
+  let ghexp = ghexp ~loc in
+  (* todo: keep exact location for the entire attribute *)
+  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
+  match ext with
+  | None -> body
+  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))
+
+let mkexp_attrs ~loc d attrs =
+  wrap_exp_attrs ~loc (mkexp ~loc d) attrs
+
+let wrap_typ_attrs ~loc typ (ext, attrs) =
+  (* todo: keep exact location for the entire attribute *)
+  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
+  match ext with
+  | None -> typ
+  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))
+
+let wrap_pat_attrs ~loc pat (ext, attrs) =
+  (* todo: keep exact location for the entire attribute *)
+  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
+  match ext with
+  | None -> pat
+  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))
+
+let mkpat_attrs ~loc d attrs =
+  wrap_pat_attrs ~loc (mkpat ~loc d) attrs
+
+let wrap_class_attrs ~loc:_ body attrs =
+  {body with pcl_attributes = attrs @ body.pcl_attributes}
+let wrap_mod_attrs ~loc:_ attrs body =
+  {body with pmod_attributes = attrs @ body.pmod_attributes}
+let wrap_mty_attrs ~loc:_ attrs body =
+  {body with pmty_attributes = attrs @ body.pmty_attributes}
+
+let wrap_str_ext ~loc body ext =
+  match ext with
+  | None -> body
+  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))
+
+let wrap_mkstr_ext ~loc (item, ext) =
+  wrap_str_ext ~loc (mkstr ~loc item) ext
+
+let wrap_sig_ext ~loc body ext =
+  match ext with
+  | None -> body
+  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))
+
+let wrap_mksig_ext ~loc (item, ext) =
+  wrap_sig_ext ~loc (mksig ~loc item) ext
+
+let text_str pos = Str.text (rhs_text pos)
+let text_sig pos = Sig.text (rhs_text pos)
+let text_cstr pos = Cf.text (rhs_text pos)
+let text_csig pos = Ctf.text (rhs_text pos)
+let text_def pos = [Ptop_def (Str.text (rhs_text pos))]
+
+let extra_text startpos endpos text items =
+  match items with
+  | [] ->
+      let post = rhs_post_text endpos in
+      let post_extras = rhs_post_extra_text endpos in
+      text post @ text post_extras
+  | _ :: _ ->
+      let pre_extras = rhs_pre_extra_text startpos in
+      let post_extras = rhs_post_extra_text endpos in
+        text pre_extras @ items @ text post_extras
+
+let extra_str p1 p2 items = extra_text p1 p2 Str.text items
+let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
+let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
+let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
+let extra_def p1 p2 items =
+  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items
+
+let extra_rhs_core_type ct ~pos =
+  let docs = rhs_info pos in
+  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }
+
+(*
+type let_binding =
+  { lb_pattern: pattern;
+    lb_expression: expression;
+    lb_attributes: attributes;
+    lb_docs: docs Lazy.t;
+    lb_text: text Lazy.t;
+    lb_loc: Location.t; }
+
+type let_bindings =
+  { lbs_bindings: let_binding list;
+    lbs_rec: rec_flag;
+    lbs_extension: string Asttypes.loc option;
+    lbs_loc: Location.t }
+*)
+
+let mklb first ~loc (p, e) attrs =
+  {
+    lb_pattern = p;
+    lb_expression = e;
+    lb_attributes = attrs;
+    lb_docs = symbol_docs_lazy loc;
+    lb_text = (if first then empty_text_lazy
+               else symbol_text_lazy (fst loc));
+    lb_loc = make_loc loc;
+  }
+
+let mklbs ~loc ext rf lb =
+  {
+    lbs_bindings = [lb];
+    lbs_rec = rf;
+    lbs_extension = ext ;
+    lbs_loc = make_loc loc;
+  }
+
+let addlb lbs lb =
+  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }
+
+let val_of_let_bindings ~loc lbs =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           ~docs:(Lazy.force lb.lb_docs)
+           ~text:(Lazy.force lb.lb_text)
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
+  match lbs.lbs_extension with
+  | None -> str
+  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
+
+let expr_of_let_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
+      (lbs.lbs_extension, [])
+
+let class_of_let_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern lb.lb_expression)
+      lbs.lbs_bindings
+  in
+    (* Our use of let_bindings(no_ext) guarantees the following: *)
+    assert (lbs.lbs_extension = None);
+    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))
+
+(* Alternatively, we could keep the generic module type in the Parsetree
+   and extract the package type during type-checking. In that case,
+   the assertions below should be turned into explicit checks. *)
+let package_type_of_module_type pmty =
+  let err loc s =
+    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
+  in
+  let map_cstr = function
+    | Pwith_type (lid, ptyp) ->
+        let loc = ptyp.ptype_loc in
+        if ptyp.ptype_params <> [] then
+          err loc "parametrized types are not supported";
+        if ptyp.ptype_cstrs <> [] then
+          err loc "constrained types are not supported";
+        if ptyp.ptype_private <> Public then
+          err loc "private types are not supported";
+
+        (* restrictions below are checked by the 'with_constraint' rule *)
+        (* assert (ptyp.ptype_kind = Ptype_abstract); *)
+        (* assert (ptyp.ptype_attributes = []); *)
+        begin match ptyp.ptype_manifest with
+        | Some ty -> Some (lid, ty)
+        | None -> None
+        end
+    | _ ->
+        err pmty.pmty_loc "only 'with type t =' constraints are supported";
+        None
+  in
+  match pmty with
+  | {pmty_desc = Pmty_ident lid} -> (lid, [])
+  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
+      (lid, List.filter_map map_cstr cstrs)
+  | _ ->
+      err pmty.pmty_loc
+        "only module type identifier and 'with type' constraints are supported"
+      ; (Location.mkloc (Lident "_") pmty.pmty_loc, [])
+
+let mk_directive_arg ~loc k =
+  { pdira_desc = k;
+    pdira_loc = make_loc loc;
+  }
+
+let mk_directive ~loc name arg =
+  Ptop_dir {
+      pdir_name = name;
+      pdir_arg = arg;
+      pdir_loc = make_loc loc;
+    }
+
+let merloc startpos ?endpos x =
+  let endpos = match endpos with
+    | None -> x.pexp_loc.Location.loc_end
+    | Some endpos -> endpos
+  in
+  let loc = make_loc (startpos, endpos) in
+  let str = mkloc "merlin.loc" loc in
+  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
+  { x with pexp_attributes = attr :: x.pexp_attributes }
+
+let val_of_lwt_bindings ~loc lbs =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           ~docs:(Lazy.force lb.lb_docs)
+           ~text:(Lazy.force lb.lb_text)
+           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
+      lbs.lbs_bindings
+  in
+  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
+  match lbs.lbs_extension with
+  | None -> str
+  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))
+
+let expr_of_lwt_bindings ~loc lbs body =
+  let bindings =
+    List.map
+      (fun lb ->
+         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
+           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
+      lbs.lbs_bindings
+  in
+  Fake.app Fake.Lwt.in_lwt
+    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
+       (lbs.lbs_extension, []))
+
+%}
+
+%[@printer.header
+  let string_of_INT = function
+    | (s, None) -> Printf.sprintf "INT(%s)" s
+    | (s, Some c) -> Printf.sprintf "INT(%s%c)" s c
+
+  let string_of_FLOAT = function
+    | (s, None) -> Printf.sprintf "FLOAT(%s)" s
+    | (s, Some c) -> Printf.sprintf "FLOAT(%s%c)" s c
+
+  let string_of_STRING = function
+    | s, Some s' -> Printf.sprintf "STRING(%S,%S)" s s'
+    | s, None -> Printf.sprintf "STRING(%S)" s
+]
+
+%[@recovery.header
+  open Parsetree
+  open Ast_helper
+
+  let default_loc = ref Location.none
+
+  let default_expr () =
+    let id = Location.mkloc "merlin.hole" !default_loc in
+    Exp.mk ~loc:!default_loc (Pexp_extension (id, PStr []))
+
+  let default_pattern () = Pat.any ~loc:!default_loc ()
+
+  let default_module_expr () = Mod.structure ~loc:!default_loc[]
+  let default_module_type () = Mty.signature ~loc:!default_loc[]
+]
+
+/* Tokens */
+
+%token AMPERAMPER [@symbol "&&"]
+%token AMPERSAND [@symbol "&"]
+%token AND [@symbol "and"]
+%token AS [@symbol "as"]
+%token ASSERT [@symbol "assert"]
+%token BACKQUOTE [@symbol "`"]
+%token BANG [@symbol "!"]
+%token BAR [@symbol "|"]
+%token BARBAR [@symbol "||"]
+%token BARRBRACKET [@symbol "|]"]
+%token BEGIN [@symbol "begin"]
+%token <char> CHAR [@cost 2] [@recovery '_']
+%token CLASS [@symbol "class"]
+%token COLON [@symbol ":"]
+%token COLONCOLON [@symbol "::"]
+%token COLONEQUAL [@symbol ":="]
+%token COLONGREATER [@symbol ":>"]
+%token COMMA [@symbol ","]
+%token CONSTRAINT [@symbol "constraint"]
+%token DO [@symbol "do"]
+%token DONE [@symbol "done"]
+%token DOT [@symbol "."]
+%token DOTDOT [@symbol ".."]
+%token DOWNTO [@symbol "downto"]
+%token ELSE [@symbol "else"]
+%token END [@symbol "end"]
+%token EOF
+%token EQUAL [@symbol "="]
+%token EXCEPTION [@symbol "exception"]
+%token EXTERNAL [@symbol "external"]
+%token FALSE [@symbol "false"]
+%token <string * char option> FLOAT [@cost 2] [@recovery ("0.",None)] [@printer string_of_FLOAT]
+%token FOR [@symbol "for"]
+%token FUN [@symbol "fun"]
+%token FUNCTION [@symbol "function"]
+%token FUNCTOR [@symbol "functor"]
+%token GREATER [@symbol ">"]
+%token GREATERRBRACE [@symbol ">}"]
+%token GREATERRBRACKET [@symbol ">]"]
+%token IF [@symbol "if"]
+%token IN [@symbol "in"]
+%token INCLUDE [@symbol "include"]
+%token <string> INFIXOP0 [@cost 2] [@recovery "_"][@printer Printf.sprintf "INFIXOP0(%S)"]
+%token <string> INFIXOP1 [@cost 2] [@recovery "_"][@printer Printf.sprintf "INFIXOP1(%S)"]
+%token <string> INFIXOP2 [@cost 2] [@recovery "_"][@printer Printf.sprintf "INFIXOP2(%S)"]
+%token <string> INFIXOP3 [@cost 2] [@recovery "_"][@printer Printf.sprintf "INFIXOP3(%S)"]
+%token <string> INFIXOP4 [@cost 2] [@recovery "_"][@printer Printf.sprintf "INFIXOP4(%S)"]
+%token <string> DOTOP
+%token <string> LETOP /* TODO: recovery & printing */
+%token <string> ANDOP /* TODO: recovery & printing */
+%token INHERIT [@symbol "inherit"]
+%token INITIALIZER [@symbol "initializer"]
+%token <string * char option> INT [@cost 1] [@recovery ("0",None)] [@printer string_of_INT]
+%token <string> LABEL [@cost 2] [@recovery "_"][@printer Printf.sprintf "LABEL(%S)"] [@symbol "label"]
+%token LAZY [@symbol "lazy"]
+%token LBRACE [@symbol "{"]
+%token LBRACELESS [@symbol "{<"]
+%token LBRACKET [@symbol "["]
+%token LBRACKETBAR [@symbol "[|"]
+%token LBRACKETLESS [@symbol "[<"]
+%token LBRACKETGREATER [@symbol "[>"]
+%token LBRACKETPERCENT [@symbol "[%"]
+%token LBRACKETPERCENTPERCENT [@symbol "[%%"]
+%token LESS [@symbol "<"]
+%token LESSMINUS [@symbol "<-"] [@cost 2]
+%token LET [@symbol "let"]
+%token <string> LIDENT [@cost 2] [@recovery "_"][@printer Printf.sprintf "LIDENT(%S)"]
+%token LPAREN [@symbol ")"]
+%token LBRACKETAT [@symbol "[@"]
+%token LBRACKETATAT [@symbol "[@@"]
+%token LBRACKETATATAT [@symbol "[@@@"]
+%token MATCH [@symbol "match"]
+%token METHOD [@symbol "method"]
+%token MINUS [@symbol "-"]
+%token MINUSDOT [@symbol "-."]
+%token MINUSGREATER [@symbol "->"]
+%token MODULE [@symbol "module"]
+%token MUTABLE [@symbol "mutable"]
+%token NEW [@symbol "new"]
+%token NONREC [@cost 1] [@symbol "nonrec"]
+%token OBJECT [@symbol "object"]
+%token OF [@symbol "of"]
+%token OPEN [@symbol "open"]
+%token <string> OPTLABEL [@cost 2] [@recovery "_"][@printer Printf.sprintf "OPTLABEL(%S)"] [@symbol "?<label>"]
+%token OR [@symbol "or"]
+/* %token PARSER */
+%token PERCENT [@symbol "%"]
+%token PLUS [@symbol "+"]
+%token PLUSDOT [@symbol "+."]
+%token PLUSEQ [@symbol "+="]
+%token <string> PREFIXOP [@cost 2] [@recovery "!"][@printer Printf.sprintf "PREFIXOP(%S)"] [@symbol "!"]
+%token PRIVATE [@symbol "private"]
+%token QUESTION [@symbol "?"]
+%token QUOTE [@symbol "'"]
+%token RBRACE [@symbol "}"]
+%token RBRACKET [@symbol "]"]
+%token REC [@symbol "rec"]
+%token RPAREN [@symbol ")"]
+%token SEMI [@symbol ";"]
+%token SEMISEMI [@symbol ";;"]
+%token HASH [@symbol "#"]
+%token <string> HASHOP [@cost 2] [@recovery ""][@printer Printf.sprintf "HASHOP(%S)"] [@symbol "#<op>"]
+%token SIG [@symbol "sig"]
+%token STAR [@symbol "*"]
+%token <string * string option> STRING [@cost 1] [@recovery ("", None)][@printer string_of_STRING]
+%token STRUCT [@symbol "struct"]
+%token THEN [@symbol "then"]
+%token TILDE [@symbol "~"]
+%token TO [@symbol "to"]
+%token TRUE [@symbol "true"]
+%token TRY [@symbol "try"]
+%token TYPE [@symbol "type"]
+%token <string> UIDENT [@cost 2][@recovery "_"][@printer Printf.sprintf "UIDENT(%S)"]
+%token UNDERSCORE [@symbol "_"]
+%token VAL [@symbol "val"]
+%token VIRTUAL [@symbol "virtual"]
+%token WHEN [@symbol "when"]
+%token WHILE [@symbol "while"]
+%token WITH [@symbol "with"]
+%token <string * Location.t> COMMENT [@cost 2][@recovery ("", Location.none)]
+%token <Docstrings.docstring> DOCSTRING
+
+%token EOL
+
+%token QUESTIONQUESTION [@symbol "??"]
+
+%token LET_LWT [@cost 1] [@symbol "lwt"]
+%token TRY_LWT [@cost 1] [@symbol "try_lwt"]
+%token MATCH_LWT [@cost 1] [@symbol "match_lwt"]
+%token FINALLY_LWT [@cost 1] [@symbol "finally"]
+%token FOR_LWT [@cost 1] [@symbol "for_lwt"]
+%token WHILE_LWT [@cost 1] [@symbol "while_lwt"]
+
+%token DOTLESS [@cost 1] [@symbol ".<"]
+%token DOTTILDE [@cost 1] [@symbol ".~"]
+%token GREATERDOT [@cost 1] [@symbol ">."]
+
+/* Precedences and associativities.
+
+Tokens and rules have precedences.  A reduce/reduce conflict is resolved
+in favor of the first rule (in source file order).  A shift/reduce conflict
+is resolved by comparing the precedence and associativity of the token to
+be shifted with those of the rule to be reduced.
+
+By default, a rule has the precedence of its rightmost terminal (if any).
+
+When there is a shift/reduce conflict between a rule and a token that
+have the same precedence, it is resolved using the associativity:
+if the token is left-associative, the parser will reduce; if
+right-associative, the parser will shift; if non-associative,
+the parser will declare a syntax error.
+
+We will only use associativities with operators of the kind  x * x -> x
+for example, in the rules of the form    expr: expr BINOP expr
+in all other cases, we define two precedences if needed to resolve
+conflicts.
+
+The precedences must be listed from low to high.
+*/
+
+%nonassoc IN
+%nonassoc below_SEMI
+%nonassoc SEMI                          /* below EQUAL ({lbl=...; lbl=...}) */
+%nonassoc LET LET_LWT                   /* above SEMI ( ...; let ... in ...) */
+%nonassoc below_WITH
+%nonassoc FUNCTION WITH                 /* below BAR  (match ... with ...) */
+%nonassoc FINALLY_LWT
+%nonassoc AND             /* above WITH (module rec A: SIG with ... and ...) */
+%nonassoc THEN                          /* below ELSE (if ... then ...) */
+%nonassoc ELSE                          /* (if ... then ... else ...) */
+%nonassoc LESSMINUS                     /* below COLONEQUAL (lbl <- x := e) */
+%right    COLONEQUAL                    /* expr (e := e := e) */
+%nonassoc AS
+%left     BAR                           /* pattern (p|p|p) */
+%nonassoc below_COMMA
+%left     COMMA                         /* expr/expr_comma_list (e,e,e) */
+%right    MINUSGREATER                  /* function_type (t -> t -> t) */
+%right    OR BARBAR                     /* expr (e || e || e) */
+%right    AMPERSAND AMPERAMPER          /* expr (e && e && e) */
+%nonassoc below_EQUAL
+%left     INFIXOP0 EQUAL LESS GREATER   /* expr (e OP e OP e) */
+%right    INFIXOP1                      /* expr (e OP e OP e) */
+%nonassoc below_LBRACKETAT
+%nonassoc LBRACKETAT
+%right    COLONCOLON                    /* expr (e :: e :: e) */
+%left     INFIXOP2 PLUS PLUSDOT MINUS MINUSDOT PLUSEQ /* expr (e OP e OP e) */
+%left     PERCENT INFIXOP3 STAR                 /* expr (e OP e OP e) */
+%right    INFIXOP4                      /* expr (e OP e OP e) */
+%nonassoc prec_unary_minus prec_unary_plus /* unary - */
+%nonassoc prec_constant_constructor     /* cf. simple_expr (C versus C x) */
+%nonassoc prec_constr_appl              /* above AS BAR COLONCOLON COMMA */
+%left     prec_escape
+%nonassoc below_HASH
+%nonassoc HASH                        /* simple_expr/toplevel_directive */
+%left     HASHOP
+%nonassoc below_DOT
+%nonassoc DOT DOTOP
+/* Finally, the first tokens of simple_expr are above everything else. */
+%nonassoc BACKQUOTE BANG BEGIN CHAR FALSE FLOAT INT
+          LBRACE LBRACELESS LBRACKET LBRACKETBAR LIDENT LPAREN
+          NEW PREFIXOP STRING TRUE UIDENT
+          LBRACKETPERCENT
+          DOTLESS DOTTILDE GREATERDOT QUESTIONQUESTION
+
+
+/* Entry points */
+
+%start implementation                   /* for implementation files */
+%type <Parsetree.structure> implementation
+%start interface                        /* for interface files */
+%type <Parsetree.signature> interface
+%start toplevel_phrase                  /* for interactive use */
+%type <Parsetree.toplevel_phrase> toplevel_phrase
+%start use_file                         /* for the #use directive */
+%type <Parsetree.toplevel_phrase list> use_file
+%start parse_core_type
+%type <Parsetree.core_type> parse_core_type
+%start parse_expression
+%type <Parsetree.expression> parse_expression
+%start parse_pattern
+%type <Parsetree.pattern> parse_pattern
+%%
+
+/* macros */
+%inline extra_str(symb): symb { extra_str $startpos $endpos $1 };
+%inline extra_sig(symb): symb { extra_sig $startpos $endpos $1 };
+%inline extra_cstr(symb): symb { extra_cstr $startpos $endpos $1 };
+%inline extra_csig(symb): symb { extra_csig $startpos $endpos $1 };
+%inline extra_def(symb): symb { extra_def $startpos $endpos $1 };
+%inline extra_text(symb): symb { extra_text $startpos $endpos $1 };
+%inline extra_rhs(symb): symb { extra_rhs_core_type $1 ~pos:$endpos($1) };
+%inline mkrhs(symb): symb
+    { mkrhs $1 $sloc }
+;
+
+%inline text_str(symb): symb
+  { text_str $startpos @ [$1] }
+%inline text_str_SEMISEMI: SEMISEMI
+  { text_str $startpos }
+%inline text_sig(symb): symb
+  { text_sig $startpos @ [$1] }
+%inline text_sig_SEMISEMI: SEMISEMI
+  { text_sig $startpos }
+%inline text_def(symb): symb
+  { text_def $startpos @ [$1] }
+%inline top_def(symb): symb
+  { Ptop_def [$1] }
+%inline text_cstr(symb): symb
+  { text_cstr $startpos @ [$1] }
+%inline text_csig(symb): symb
+  { text_csig $startpos @ [$1] }
+
+(* Using this %inline definition means that we do not control precisely
+   when [mark_rhs_docs] is called, but I dont think this matters. *)
+%inline mark_rhs_docs(symb): symb
+  { mark_rhs_docs $startpos $endpos;
+    $1 }
+
+%inline op(symb): symb
+   { mkoperator ~loc:$sloc $1 }
+
+%inline mkloc(symb): symb
+    { mkloc $1 (make_loc $sloc) }
+
+%inline mkexp(symb): symb
+    { mkexp ~loc:$sloc $1 }
+%inline mkpat(symb): symb
+    { mkpat ~loc:$sloc $1 }
+%inline mktyp(symb): symb
+    { mktyp ~loc:$sloc $1 }
+%inline mkstr(symb): symb
+    { mkstr ~loc:$sloc $1 }
+%inline mksig(symb): symb
+    { mksig ~loc:$sloc $1 }
+%inline mkmod(symb): symb
+    { mkmod ~loc:$sloc $1 }
+%inline mkmty(symb): symb
+    { mkmty ~loc:$sloc $1 }
+%inline mkcty(symb): symb
+    { mkcty ~loc:$sloc $1 }
+%inline mkctf(symb): symb
+    { mkctf ~loc:$sloc $1 }
+%inline mkcf(symb): symb
+    { mkcf ~loc:$sloc $1 }
+%inline mkclass(symb): symb
+    { mkclass ~loc:$sloc $1 }
+
+%inline wrap_mkstr_ext(symb): symb
+    { wrap_mkstr_ext ~loc:$sloc $1 }
+%inline wrap_mksig_ext(symb): symb
+    { wrap_mksig_ext ~loc:$sloc $1 }
+
+%inline mk_directive_arg(symb): symb
+    { mk_directive_arg ~loc:$sloc $1 }
+
+/* Generic definitions */
+
+(* [iloption(X)] recognizes either nothing or [X]. Assuming [X] produces
+   an OCaml list, it produces an OCaml list, too. *)
+
+%inline iloption(X):
+  /* nothing */
+    { [] }
+| x = X
+    { x }
+
+(* [llist(X)] recognizes a possibly empty list of [X]s. It is left-recursive. *)
+
+reversed_llist(X):
+  /* empty */
+    { [] }
+| xs = reversed_llist(X) x = X
+    { x :: xs }
+
+%inline llist(X):
+  xs = rev(reversed_llist(X))
+    { xs }
+
+(* [reversed_nonempty_llist(X)] recognizes a nonempty list of [X]s, and produces
+   an OCaml list in reverse order -- that is, the last element in the input text
+   appears first in this list. Its definition is left-recursive. *)
+
+reversed_nonempty_llist(X):
+  x = X
+    { [ x ] }
+| xs = reversed_nonempty_llist(X) x = X
+    { x :: xs }
+
+(* [nonempty_llist(X)] recognizes a nonempty list of [X]s, and produces an OCaml
+   list in direct order -- that is, the first element in the input text appears
+   first in this list. *)
+
+%inline nonempty_llist(X):
+  xs = rev(reversed_nonempty_llist(X))
+    { xs }
+
+(* [reversed_separated_nonempty_llist(separator, X)] recognizes a nonempty list
+   of [X]s, separated with [separator]s, and produces an OCaml list in reverse
+   order -- that is, the last element in the input text appears first in this
+   list. Its definition is left-recursive. *)
+
+(* [inline_reversed_separated_nonempty_llist(separator, X)] is semantically
+   equivalent to [reversed_separated_nonempty_llist(separator, X)], but is
+   marked %inline, which means that the case of a list of length one and
+   the case of a list of length more than one will be distinguished at the
+   use site, and will give rise there to two productions. This can be used
+   to avoid certain conflicts. *)
+
+%inline inline_reversed_separated_nonempty_llist(separator, X):
+  x = X
+    { [ x ] }
+| xs = reversed_separated_nonempty_llist(separator, X)
+  separator
+  x = X
+    { x :: xs }
+
+reversed_separated_nonempty_llist(separator, X):
+  xs = inline_reversed_separated_nonempty_llist(separator, X)
+    { xs }
+
+(* [separated_nonempty_llist(separator, X)] recognizes a nonempty list of [X]s,
+   separated with [separator]s, and produces an OCaml list in direct order --
+   that is, the first element in the input text appears first in this list. *)
+
+%inline separated_nonempty_llist(separator, X):
+  xs = rev(reversed_separated_nonempty_llist(separator, X))
+    { xs }
+
+%inline inline_separated_nonempty_llist(separator, X):
+  xs = rev(inline_reversed_separated_nonempty_llist(separator, X))
+    { xs }
+
+(* [reversed_separated_nontrivial_llist(separator, X)] recognizes a list of at
+   least two [X]s, separated with [separator]s, and produces an OCaml list in
+   reverse order -- that is, the last element in the input text appears first
+   in this list. Its definition is left-recursive. *)
+
+reversed_separated_nontrivial_llist(separator, X):
+  xs = reversed_separated_nontrivial_llist(separator, X)
+  separator
+  x = X
+    { x :: xs }
+| x1 = X
+  separator
+  x2 = X
+    { [ x2; x1 ] }
+
+(* [separated_nontrivial_llist(separator, X)] recognizes a list of at least
+   two [X]s, separated with [separator]s, and produces an OCaml list in direct
+   order -- that is, the first element in the input text appears first in this
+   list. *)
+
+%inline separated_nontrivial_llist(separator, X):
+  xs = rev(reversed_separated_nontrivial_llist(separator, X))
+    { xs }
+
+(* [separated_or_terminated_nonempty_list(delimiter, X)] recognizes a nonempty
+   list of [X]s, separated with [delimiter]s, and optionally terminated with a
+   final [delimiter]. Its definition is right-recursive. *)
+
+separated_or_terminated_nonempty_list(delimiter, X):
+  x = X ioption(delimiter)
+    { [x] }
+| x = X
+  delimiter
+  xs = separated_or_terminated_nonempty_list(delimiter, X)
+    { x :: xs }
+
+(* [reversed_preceded_or_separated_nonempty_llist(delimiter, X)] recognizes a
+   nonempty list of [X]s, separated with [delimiter]s, and optionally preceded
+   with a leading [delimiter]. It produces an OCaml list in reverse order. Its
+   definition is left-recursive. *)
+
+reversed_preceded_or_separated_nonempty_llist(delimiter, X):
+  ioption(delimiter) x = X
+    { [x] }
+| xs = reversed_preceded_or_separated_nonempty_llist(delimiter, X)
+  delimiter
+  x = X
+    { x :: xs }
+
+(* [preceded_or_separated_nonempty_llist(delimiter, X)] recognizes a nonempty
+   list of [X]s, separated with [delimiter]s, and optionally preceded with a
+   leading [delimiter]. It produces an OCaml list in direct order. *)
+
+%inline preceded_or_separated_nonempty_llist(delimiter, X):
+  xs = rev(reversed_preceded_or_separated_nonempty_llist(delimiter, X))
+    { xs }
+
+(* [bar_llist(X)] recognizes a nonempty list of [X]s, separated with BARs,
+   with an optional leading BAR. We assume that [X] is itself parameterized
+   with an opening symbol, which can be [epsilon] or [BAR]. *)
+
+(* This construction may seem needlessly complicated: one might think that
+   using [preceded_or_separated_nonempty_llist(BAR, X)], where [X] is *not*
+   itself parameterized, would be sufficient. Indeed, this simpler approach
+   would recognize the same language. However, the two approaches differ in
+   the footprint of [X]. We want the start location of [X] to include [BAR]
+   when present. In the future, we might consider switching to the simpler
+   definition, at the cost of producing slightly different locations. TODO *)
+
+reversed_bar_llist(X):
+    (* An [X] without a leading BAR. *)
+    x = X(epsilon)
+      { [x] }
+  | (* An [X] with a leading BAR. *)
+    x = X(BAR)
+      { [x] }
+  | (* An initial list, followed with a BAR and an [X]. *)
+    xs = reversed_bar_llist(X)
+    x = X(BAR)
+      { x :: xs }
+
+%inline bar_llist(X):
+  xs = reversed_bar_llist(X)
+    { List.rev xs }
+
+(* [xlist(A, B)] recognizes [AB*]. We assume that the semantic value for [A]
+   is a pair [x, b], while the semantic value for [B*] is a list [bs].
+   We return the pair [x, b :: bs]. *)
+
+%inline xlist(A, B):
+  a = A bs = B*
+    { let (x, b) = a in x, b :: bs }
+
+(* [listx(delimiter, X, Y)] recognizes a nonempty list of [X]s, optionally
+   followed with a [Y], separated-or-terminated with [delimiter]s. The
+   semantic value is a pair of a list of [X]s and an optional [Y]. *)
+
+listx(delimiter, X, Y):
+| x = X ioption(delimiter)
+    { [x], None }
+| x = X delimiter y = Y delimiter?
+    { [x], Some y }
+| x = X
+  delimiter
+  tail = listx(delimiter, X, Y)
+    { let xs, y = tail in
+      x :: xs, y }
+
+(* -------------------------------------------------------------------------- *)
+
+(* Entry points. *)
+
+(* An .ml file. *)
+implementation:
+  structure EOF
+    { $1 }
+;
+
+(* An .mli file. *)
+interface:
+  signature EOF
+    { $1 }
+;
+
+(* A toplevel phrase. *)
+toplevel_phrase:
+  (* An expression with attributes, ended by a double semicolon. *)
+  extra_str(text_str(str_exp))
+  SEMISEMI
+    { Ptop_def $1 }
+| (* A list of structure items, ended by a double semicolon. *)
+  extra_str(flatten(text_str(structure_item)*))
+  SEMISEMI
+    { Ptop_def $1 }
+| (* A directive, ended by a double semicolon. *)
+  toplevel_directive
+  SEMISEMI
+    { $1 }
+| (* End of input. *)
+  EOF
+    { raise End_of_file }
+;
+
+(* An .ml file that is read by #use. *)
+use_file:
+  (* An optional standalone expression,
+     followed with a series of elements,
+     followed with EOF. *)
+  extra_def(append(
+    optional_use_file_standalone_expression,
+    flatten(use_file_element*)
+  ))
+  EOF
+    { $1 }
+;
+
+(* An optional standalone expression is just an expression with attributes
+   (str_exp), with extra wrapping. *)
+%inline optional_use_file_standalone_expression:
+  iloption(text_def(top_def(str_exp)))
+    { $1 }
+;
+
+(* An element in a #used file is one of the following:
+   - a double semicolon followed with an optional standalone expression;
+   - a structure item;
+   - a toplevel directive.
+ *)
+%inline use_file_element:
+  preceded(SEMISEMI, optional_use_file_standalone_expression)
+| text_def(top_def(structure_item))
+| text_def(mark_rhs_docs(toplevel_directive))
+      { $1 }
+;
+
+parse_core_type:
+  core_type EOF
+    { $1 }
+;
+
+parse_expression:
+  seq_expr EOF
+    { $1 }
+;
+
+parse_pattern:
+  pattern EOF
+    { $1 }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Functor arguments appear in module expressions and module types. *)
+
+(* There was an inline here, but I removed it. *)
+functor_args [@recovery []]:
+  reversed_nonempty_llist(functor_arg)
+    { $1 }
+    (* Produce a reversed list on purpose;
+       later processed using [fold_left]. *)
+;
+
+functor_arg:
+    (* An anonymous and untyped argument. *)
+    LPAREN RPAREN
+      { Unit }
+  | (* An argument accompanied with an explicit type. *)
+    LPAREN x = mkrhs(module_name) COLON mty = module_type RPAREN
+      { Named (x, mty) }
+;
+
+module_name:
+    (* A named argument. *)
+    x = UIDENT
+      { Some x }
+  | (* An anonymous argument. *)
+    UNDERSCORE
+      { None }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Module expressions. *)
+
+(* The syntax of module expressions is not properly stratified. The cases of
+   functors, functor applications, and attributes interact and cause conflicts,
+   which are resolved by precedence declarations. This is concise but fragile.
+   Perhaps in the future an explicit stratification could be used. *)
+
+module_expr [@recovery default_module_expr ()]:
+  | STRUCT attrs = attributes s = structure END
+      { mkmod ~loc:$sloc ~attrs (Pmod_structure s) }
+  (*
+  | STRUCT attributes structure error
+      { unclosed "struct" $loc($1) "end" $loc($4) }
+  *)
+  | FUNCTOR attrs = attributes args = functor_args MINUSGREATER me = module_expr
+      { wrap_mod_attrs ~loc:$sloc attrs (
+          List.fold_left (fun acc arg ->
+            mkmod ~loc:$sloc (Pmod_functor (arg, acc))
+          ) me args
+        ) }
+  | me = paren_module_expr
+      { me }
+  | me = module_expr attr = attribute
+      { Mod.attr me attr }
+  | mkmod(
+      (* A module identifier. *)
+      x = mkrhs(mod_longident)
+        { Pmod_ident x }
+    | (* In a functor application, the actual argument must be parenthesized. *)
+      me1 = module_expr me2 = paren_module_expr
+        { Pmod_apply(me1, me2) }
+    | (* Application to unit is sugar for application to an empty structure. *)
+      me1 = module_expr LPAREN RPAREN
+        { (* TODO review mkmod location *)
+          Pmod_apply(me1, mkmod ~loc:$sloc (Pmod_structure [])) }
+    | (* An extension. *)
+      ex = extension
+        { Pmod_extension ex }
+    )
+    { $1 }
+;
+
+(* A parenthesized module expression is a module expression that begins
+   and ends with parentheses. *)
+
+paren_module_expr:
+    (* A module expression annotated with a module type. *)
+    LPAREN me = module_expr COLON mty = module_type RPAREN
+      { mkmod ~loc:$sloc (Pmod_constraint(me, mty)) }
+  (*
+  | LPAREN module_expr COLON module_type error
+      { unclosed "(" $loc($1) ")" $loc($5) }
+  *)
+  | (* A module expression within parentheses. *)
+    LPAREN me = module_expr RPAREN
+      { me (* TODO consider reloc *) }
+  (*
+  | LPAREN module_expr error
+      { unclosed "(" $loc($1) ")" $loc($3) }
+  *)
+  | (* A core language expression that produces a first-class module.
+       This expression can be annotated in various ways. *)
+    LPAREN VAL attrs = attributes e = expr_colon_package_type RPAREN
+      { mkmod ~loc:$sloc ~attrs (Pmod_unpack e) }
+  (*
+  | LPAREN VAL attributes expr COLON error
+      { unclosed "(" $loc($1) ")" $loc($6) }
+  | LPAREN VAL attributes expr COLONGREATER error
+      { unclosed "(" $loc($1) ")" $loc($6) }
+  | LPAREN VAL attributes expr error
+      { unclosed "(" $loc($1) ")" $loc($5) }
+  *)
+;
+
+(* The various ways of annotating a core language expression that
+   produces a first-class module that we wish to unpack. *)
+%inline expr_colon_package_type:
+    e = expr
+      { e }
+  | e = expr COLON ty = package_type
+      { ghexp ~loc:$loc (Pexp_constraint (e, ty)) }
+  | e = expr COLON ty1 = package_type COLONGREATER ty2 = package_type
+      { ghexp ~loc:$loc (Pexp_coerce (e, Some ty1, ty2)) }
+  | e = expr COLONGREATER ty2 = package_type
+      { ghexp ~loc:$loc (Pexp_coerce (e, None, ty2)) }
+;
+
+(* A structure, which appears between STRUCT and END (among other places),
+   begins with an optional standalone expression, and continues with a list
+   of structure elements. *)
+structure [@recovery []]:
+  extra_str(append(
+    optional_structure_standalone_expression,
+    flatten(structure_element*)
+  ))
+  { $1 }
+;
+
+(* An optional standalone expression is just an expression with attributes
+   (str_exp), with extra wrapping. *)
+%inline optional_structure_standalone_expression:
+  items = iloption(mark_rhs_docs(text_str(str_exp)))
+    { items }
+;
+
+(* An expression with attributes, wrapped as a structure item. *)
+%inline str_exp:
+  e = seq_expr
+  attrs = post_item_attributes
+    { mkstrexp e attrs }
+;
+
+(* A structure element is one of the following:
+   - a double semicolon followed with an optional standalone expression;
+   - a structure item. *)
+%inline structure_element:
+    append(text_str_SEMISEMI, optional_structure_standalone_expression)
+  | text_str(structure_item)
+      { $1 }
+;
+
+(* A structure item. *)
+%public structure_item:
+    let_bindings(ext)
+      { val_of_let_bindings ~loc:$sloc $1 }
+  | mkstr(
+      item_extension post_item_attributes
+        { let docs = symbol_docs $sloc in
+          Pstr_extension ($1, add_docs_attrs docs $2) }
+    | floating_attribute
+        { Pstr_attribute $1 }
+    )
+  | wrap_mkstr_ext(
+      primitive_declaration
+        { pstr_primitive $1 }
+    | value_description
+        { pstr_primitive $1 }
+    | type_declarations
+        { pstr_type $1 }
+    | str_type_extension
+        { pstr_typext $1 }
+    | str_exception_declaration
+        { pstr_exception $1 }
+    | module_binding
+        { $1 }
+    | rec_module_bindings
+        { pstr_recmodule $1 }
+    | module_type_declaration
+        { let (body, ext) = $1 in (Pstr_modtype body, ext) }
+    | open_declaration
+        { let (body, ext) = $1 in (Pstr_open body, ext) }
+    | class_declarations
+        { let (ext, l) = $1 in (Pstr_class l, ext) }
+    | class_type_declarations
+        { let (ext, l) = $1 in (Pstr_class_type l, ext) }
+    | include_statement(module_expr)
+        { pstr_include $1 }
+    )
+    { $1 }
+;
+
+(* A single module binding. *)
+%inline module_binding:
+  MODULE
+  ext = ext attrs1 = attributes
+  name = mkrhs(module_name)
+  body = module_binding_body
+  attrs2 = post_item_attributes
+    { let docs = symbol_docs $sloc in
+      let loc = make_loc $sloc in
+      let attrs = attrs1 @ attrs2 in
+      let body = Mb.mk name body ~attrs ~loc ~docs in
+      Pstr_module body, ext }
+;
+
+(* The body (right-hand side) of a module binding. *)
+module_binding_body:
+    EQUAL me = module_expr
+      { me }
+  | mkmod(
+      COLON mty = module_type EQUAL me = module_expr
+        { Pmod_constraint(me, mty) }
+    | arg = functor_arg body = module_binding_body
+        { Pmod_functor(arg, body) }
+  ) { $1 }
+;
+
+(* A group of recursive module bindings. *)
+%inline rec_module_bindings:
+  xlist(rec_module_binding, and_module_binding)
+    { $1 }
+;
+
+(* The first binding in a group of recursive module bindings. *)
+%inline rec_module_binding:
+  MODULE
+  ext = ext
+  attrs1 = attributes
+  REC
+  name = mkrhs(module_name)
+  body = module_binding_body
+  attrs2 = post_item_attributes
+  {
+    let loc = make_loc $sloc in
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs $sloc in
+    ext,
+    Mb.mk name body ~attrs ~loc ~docs
+  }
+;
+
+(* The following bindings in a group of recursive module bindings. *)
+%inline and_module_binding:
+  AND
+  attrs1 = attributes
+  name = mkrhs(module_name)
+  body = module_binding_body
+  attrs2 = post_item_attributes
+  {
+    let loc = make_loc $sloc in
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs $sloc in
+    let text = symbol_text $symbolstartpos in
+    Mb.mk name body ~attrs ~loc ~text ~docs
+  }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Shared material between structures and signatures. *)
+
+(* An [include] statement can appear in a structure or in a signature,
+   which is why this definition is parameterized. *)
+%inline include_statement(thing):
+  INCLUDE
+  ext = ext
+  attrs1 = attributes
+  thing = thing
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Incl.mk thing ~attrs ~loc ~docs, ext
+  }
+;
+
+(* A module type declaration. *)
+module_type_declaration:
+  MODULE TYPE
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(ident)
+  typ = preceded(EQUAL, module_type)?
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
+  }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Opens. *)
+
+open_declaration:
+  OPEN
+  override = override_flag
+  ext = ext
+  attrs1 = attributes
+  me = module_expr
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Opn.mk me ~override ~attrs ~loc ~docs, ext
+  }
+;
+
+open_description:
+  OPEN
+  override = override_flag
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(mod_ext_longident)
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Opn.mk id ~override ~attrs ~loc ~docs, ext
+  }
+;
+
+%inline open_dot_declaration: mkrhs(mod_longident)
+  { let loc = make_loc $loc($1) in
+    let me = Mod.ident ~loc $1 in
+    Opn.mk ~loc me }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+/* Module types */
+
+module_type [@recovery default_module_type ()]:
+  | SIG attrs = attributes s = signature END
+      { mkmty ~loc:$sloc ~attrs (Pmty_signature s) }
+  (*
+  | SIG attributes signature error
+      { unclosed "sig" $loc($1) "end" $loc($4) }
+  *)
+  | FUNCTOR attrs = attributes args = functor_args
+    MINUSGREATER mty = module_type
+      %prec below_WITH
+      { wrap_mty_attrs ~loc:$sloc attrs (
+          List.fold_left (fun acc arg ->
+            mkmty ~loc:$sloc (Pmty_functor (arg, acc))
+          ) mty args
+        ) }
+  | MODULE TYPE OF attributes module_expr %prec below_LBRACKETAT
+      { mkmty ~loc:$sloc ~attrs:$4 (Pmty_typeof $5) }
+  | LPAREN module_type RPAREN
+      { $2 }
+  (*
+  | LPAREN module_type error
+      { unclosed "(" $loc($1) ")" $loc($3) }
+  *)
+  | module_type attribute
+      { Mty.attr $1 $2 }
+  | mkmty(
+      mkrhs(mty_longident)
+        { Pmty_ident $1 }
+    | module_type MINUSGREATER module_type
+        %prec below_WITH
+        { Pmty_functor(Named (mknoloc None, $1), $3) }
+    | module_type WITH separated_nonempty_llist(AND, with_constraint)
+        { Pmty_with($1, $3) }
+/*  | LPAREN MODULE mkrhs(mod_longident) RPAREN
+        { Pmty_alias $3 } */
+    | extension
+        { Pmty_extension $1 }
+    )
+    { $1 }
+;
+(* A signature, which appears between SIG and END (among other places),
+   is a list of signature elements. *)
+signature:
+  extra_sig(flatten(signature_element*))
+    { $1 }
+;
+
+(* A signature element is one of the following:
+   - a double semicolon;
+   - a signature item. *)
+%inline signature_element:
+    text_sig_SEMISEMI
+  | text_sig(signature_item)
+      { $1 }
+;
+
+(* A signature item. *)
+signature_item:
+  | item_extension post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mksig ~loc:$sloc (Psig_extension ($1, (add_docs_attrs docs $2))) }
+  | mksig(
+      floating_attribute
+        { Psig_attribute $1 }
+    )
+    { $1 }
+  | wrap_mksig_ext(
+      value_description
+        { psig_value $1 }
+    | primitive_declaration
+        { psig_value $1 }
+    | type_declarations
+        { psig_type $1 }
+    | type_subst_declarations
+        { psig_typesubst $1 }
+    | sig_type_extension
+        { psig_typext $1 }
+    | sig_exception_declaration
+        { psig_exception $1 }
+    | module_declaration
+        { let (body, ext) = $1 in (Psig_module body, ext) }
+    | module_alias
+        { let (body, ext) = $1 in (Psig_module body, ext) }
+    | module_subst
+        { let (body, ext) = $1 in (Psig_modsubst body, ext) }
+    | rec_module_declarations
+        { let (ext, l) = $1 in (Psig_recmodule l, ext) }
+    | module_type_declaration
+        { let (body, ext) = $1 in (Psig_modtype body, ext) }
+    | open_description
+        { let (body, ext) = $1 in (Psig_open body, ext) }
+    | include_statement(module_type)
+        { psig_include $1 }
+    | class_descriptions
+        { let (ext, l) = $1 in (Psig_class l, ext) }
+    | class_type_declarations
+        { let (ext, l) = $1 in (Psig_class_type l, ext) }
+    )
+    { $1 }
+
+(* A module declaration. *)
+%inline module_declaration:
+  MODULE
+  ext = ext attrs1 = attributes
+  name = mkrhs(module_name)
+  body = module_declaration_body
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Md.mk name body ~attrs ~loc ~docs, ext
+  }
+;
+
+(* The body (right-hand side) of a module declaration. *)
+module_declaration_body:
+    COLON mty = module_type
+      { mty }
+  | mkmty(
+      arg = functor_arg body = module_declaration_body
+        { Pmty_functor(arg, body) }
+    )
+    { $1 }
+;
+
+(* A module alias declaration (in a signature). *)
+%inline module_alias:
+  MODULE
+  ext = ext attrs1 = attributes
+  name = mkrhs(module_name)
+  EQUAL
+  body = module_expr_alias
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Md.mk name body ~attrs ~loc ~docs, ext
+  }
+;
+%inline module_expr_alias:
+  id = mkrhs(mod_longident)
+    { Mty.alias ~loc:(make_loc $sloc) id }
+;
+(* A module substitution (in a signature). *)
+module_subst:
+  MODULE
+  ext = ext attrs1 = attributes
+  uid = mkrhs(UIDENT)
+  COLONEQUAL
+  body = mkrhs(mod_ext_longident)
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Ms.mk uid body ~attrs ~loc ~docs, ext
+  }
+(*
+| MODULE ext attributes mkrhs(UIDENT) COLONEQUAL error
+    { expecting $loc($6) "module path" }
+*)
+;
+
+(* A group of recursive module declarations. *)
+%inline rec_module_declarations:
+  xlist(rec_module_declaration, and_module_declaration)
+    { $1 }
+;
+%inline rec_module_declaration:
+  MODULE
+  ext = ext
+  attrs1 = attributes
+  REC
+  name = mkrhs(module_name)
+  COLON
+  mty = module_type
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    ext, Md.mk name mty ~attrs ~loc ~docs
+  }
+;
+%inline and_module_declaration:
+  AND
+  attrs1 = attributes
+  name = mkrhs(module_name)
+  COLON
+  mty = module_type
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let docs = symbol_docs $sloc in
+    let loc = make_loc $sloc in
+    let text = symbol_text $symbolstartpos in
+    Md.mk name mty ~attrs ~loc ~text ~docs
+  }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Class declarations. *)
+
+%inline class_declarations:
+  xlist(class_declaration, and_class_declaration)
+    { $1 }
+;
+%inline class_declaration:
+  CLASS
+  ext = ext
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  body = class_fun_binding
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    ext,
+    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
+  }
+;
+%inline and_class_declaration:
+  AND
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  body = class_fun_binding
+  attrs2 = post_item_attributes
+  {
+    let attrs = attrs1 @ attrs2 in
+    let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    let text = symbol_text $symbolstartpos in
+    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
+  }
+;
+
+class_fun_binding:
+    EQUAL class_expr
+      { $2 }
+  | mkclass(
+      COLON class_type EQUAL class_expr
+        { Pcl_constraint($4, $2) }
+    | labeled_simple_pattern class_fun_binding
+      { let (l,o,p) = $1 in Pcl_fun(l, o, p, $2) }
+    ) { $1 }
+;
+
+formal_class_parameters:
+  params = class_parameters(type_parameter)
+    { params }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Class expressions. *)
+
+class_expr:
+    class_simple_expr
+      { $1 }
+  | FUN attributes class_fun_def
+      { wrap_class_attrs ~loc:$sloc $3 $2 }
+  | let_bindings(no_ext) IN class_expr
+      { class_of_let_bindings ~loc:$sloc $1 $3 }
+  | LET OPEN override_flag attributes mkrhs(mod_longident) IN class_expr
+      { let loc = ($startpos($2), $endpos($4)) in
+        let od = Opn.mk ~override:$3 ~loc:(make_loc loc) $5 in
+        mkclass ~loc:$sloc ~attrs:$4 (Pcl_open(od, $7)) }
+  | class_expr attribute
+      { Cl.attr $1 $2 }
+  | mkclass(
+      class_simple_expr nonempty_llist(labeled_simple_expr)
+        { Pcl_apply($1, $2) }
+    | extension
+        { Pcl_extension $1 }
+    ) { $1 }
+;
+class_simple_expr:
+  | LPAREN class_expr RPAREN
+      { $2 }
+  (*
+  | LPAREN class_expr error
+      { unclosed "(" $loc($1) ")" $loc($3) }
+  *)
+  | mkclass(
+      tys = actual_class_parameters cid = mkrhs(class_longident)
+        { Pcl_constr(cid, tys) }
+    (*
+    | OBJECT attributes class_structure error
+        { unclosed "object" $loc($1) "end" $loc($4) }
+    *)
+    | LPAREN class_expr COLON class_type RPAREN
+        { Pcl_constraint($2, $4) }
+    (*
+    | LPAREN class_expr COLON class_type error
+        { unclosed "(" $loc($1) ")" $loc($5) }
+    *)
+    ) { $1 }
+  | OBJECT attributes class_structure END
+    { mkclass ~loc:$sloc ~attrs:$2 (Pcl_structure $3) }
+;
+
+class_fun_def:
+  mkclass(
+    labeled_simple_pattern MINUSGREATER e = class_expr
+  | labeled_simple_pattern e = class_fun_def
+      { let (l,o,p) = $1 in Pcl_fun(l, o, p, e) }
+  ) { $1 }
+;
+%inline class_structure:
+  |  class_self_pattern extra_cstr(class_fields)
+       { Cstr.mk $1 $2 }
+;
+class_self_pattern:
+    LPAREN pattern RPAREN
+      { reloc_pat ~loc:$sloc $2 }
+  | mkpat(LPAREN pattern COLON core_type RPAREN
+      { Ppat_constraint($2, $4) })
+      { $1 }
+  | /* empty */
+      { ghpat ~loc:$sloc Ppat_any }
+;
+%inline class_fields:
+  flatten(text_cstr(class_field)*)
+    { $1 }
+;
+class_field:
+  | INHERIT override_flag attributes class_expr
+    self = preceded(AS, mkrhs(LIDENT))?
+    post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_inherit ($2, $4, self)) ~attrs:($3@$6) ~docs }
+  | VAL value post_item_attributes
+      { let v, attrs = $2 in
+        let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_val v) ~attrs:(attrs@$3) ~docs }
+  | METHOD method_ post_item_attributes
+      { let meth, attrs = $2 in
+        let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_method meth) ~attrs:(attrs@$3) ~docs }
+  | CONSTRAINT attributes constrain_field post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_constraint $3) ~attrs:($2@$4) ~docs }
+  | INITIALIZER attributes seq_expr post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_initializer $3) ~attrs:($2@$4) ~docs }
+  | item_extension post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkcf ~loc:$sloc (Pcf_extension $1) ~attrs:$2 ~docs }
+  | mkcf(floating_attribute
+      { Pcf_attribute $1 })
+      { $1 }
+;
+value:
+    no_override_flag
+    attrs = attributes
+    mutable_ = virtual_with_mutable_flag
+    label = mkrhs(label) COLON ty = core_type
+      { (label, mutable_, Cfk_virtual ty), attrs }
+  | override_flag attributes mutable_flag mkrhs(label) EQUAL seq_expr
+      { ($4, $3, Cfk_concrete ($1, $6)), $2 }
+  | override_flag attributes mutable_flag mkrhs(label) type_constraint
+    EQUAL seq_expr
+      { let e = mkexp_constraint ~loc:$sloc $7 $5 in
+        ($4, $3, Cfk_concrete ($1, e)), $2
+      }
+;
+method_:
+    no_override_flag
+    attrs = attributes
+    private_ = virtual_with_private_flag
+    label = mkrhs(label) COLON ty = poly_type
+      { (label, private_, Cfk_virtual ty), attrs }
+  | override_flag attributes private_flag mkrhs(label) strict_binding
+      { let e = $5 in
+        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
+        ($4, $3,
+        Cfk_concrete ($1, ghexp ~loc (Pexp_poly (e, None)))), $2 }
+  | override_flag attributes private_flag mkrhs(label)
+    COLON poly_type EQUAL seq_expr
+      { let poly_exp =
+          let loc = ($startpos($6), $endpos($8)) in
+          ghexp ~loc (Pexp_poly($8, Some $6)) in
+        ($4, $3, Cfk_concrete ($1, poly_exp)), $2 }
+  | override_flag attributes private_flag mkrhs(label) COLON TYPE lident_list
+    DOT core_type EQUAL seq_expr
+      { let poly_exp_loc = ($startpos($7), $endpos($11)) in
+        let poly_exp =
+          let exp, poly =
+            (* it seems odd to use the global ~loc here while poly_exp_loc
+               is tighter, but this is what ocamlyacc does;
+               TODO improve parser.mly *)
+            wrap_type_annotation ~loc:$sloc $7 $9 $11 in
+          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
+        ($4, $3,
+        Cfk_concrete ($1, poly_exp)), $2 }
+;
+
+/* Class types */
+
+class_type:
+    class_signature
+      { $1 }
+  | mkcty(
+      label = arg_label
+      domain = tuple_type
+      MINUSGREATER
+      codomain = class_type
+        { Pcty_arrow(label, domain, codomain) }
+    ) { $1 }
+ ;
+class_signature:
+    mkcty(
+      tys = actual_class_parameters cid = mkrhs(clty_longident)
+        { Pcty_constr (cid, tys) }
+    | extension
+        { Pcty_extension $1 }
+    ) { $1 }
+  | OBJECT attributes class_sig_body END
+      { mkcty ~loc:$sloc ~attrs:$2 (Pcty_signature $3) }
+  (*
+  | OBJECT attributes class_sig_body error
+      { unclosed "object" $loc($1) "end" $loc($4) }
+  *)
+  | class_signature attribute
+      { Cty.attr $1 $2 }
+  | LET OPEN override_flag attributes mkrhs(mod_longident) IN class_signature
+      { let loc = ($startpos($2), $endpos($4)) in
+        let od = Opn.mk ~override:$3 ~loc:(make_loc loc) $5 in
+        mkcty ~loc:$sloc ~attrs:$4 (Pcty_open(od, $7)) }
+;
+%inline class_parameters(parameter):
+  | /* empty */
+      { [] }
+  | LBRACKET params = separated_nonempty_llist(COMMA, parameter) RBRACKET
+      { params }
+;
+%inline actual_class_parameters:
+  tys = class_parameters(core_type)
+    { tys }
+;
+%inline class_sig_body:
+    class_self_type extra_csig(class_sig_fields)
+      { Csig.mk $1 $2 }
+;
+class_self_type:
+    LPAREN core_type RPAREN
+      { $2 }
+  | mktyp((* empty *) { Ptyp_any })
+      { $1 }
+;
+%inline class_sig_fields:
+  flatten(text_csig(class_sig_field)*)
+    { $1 }
+;
+class_sig_field:
+    INHERIT attributes class_signature post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkctf ~loc:$sloc (Pctf_inherit $3) ~attrs:($2@$4) ~docs }
+  | VAL attributes value_type post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkctf ~loc:$sloc (Pctf_val $3) ~attrs:($2@$4) ~docs }
+  | METHOD attributes private_virtual_flags mkrhs(label) COLON poly_type
+    post_item_attributes
+      { let (p, v) = $3 in
+        let docs = symbol_docs $sloc in
+        mkctf ~loc:$sloc (Pctf_method ($4, p, v, $6)) ~attrs:($2@$7) ~docs }
+  | CONSTRAINT attributes constrain_field post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkctf ~loc:$sloc (Pctf_constraint $3) ~attrs:($2@$4) ~docs }
+  | item_extension post_item_attributes
+      { let docs = symbol_docs $sloc in
+        mkctf ~loc:$sloc (Pctf_extension $1) ~attrs:$2 ~docs }
+  | mkctf(floating_attribute
+      { Pctf_attribute $1 })
+      { $1 }
+;
+%inline value_type:
+  flags = mutable_virtual_flags
+  label = mkrhs(label)
+  COLON
+  ty = core_type
+  {
+    let mut, virt = flags in
+    label, mut, virt, ty
+  }
+;
+%inline constrain:
+    core_type EQUAL core_type
+    { $1, $3, make_loc $sloc }
+;
+constrain_field:
+  core_type EQUAL core_type
+    { $1, $3 }
+;
+(* A group of class descriptions. *)
+%inline class_descriptions:
+  xlist(class_description, and_class_description)
+    { $1 }
+;
+%inline class_description:
+  CLASS
+  ext = ext
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  COLON
+  cty = class_type
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      ext,
+      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
+    }
+;
+%inline and_class_description:
+  AND
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  COLON
+  cty = class_type
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      let text = symbol_text $symbolstartpos in
+      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
+    }
+;
+class_type_declarations:
+  xlist(class_type_declaration, and_class_type_declaration)
+    { $1 }
+;
+%inline class_type_declaration:
+  CLASS TYPE
+  ext = ext
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  EQUAL
+  csig = class_signature
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      ext,
+      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
+    }
+;
+%inline and_class_type_declaration:
+  AND
+  attrs1 = attributes
+  virt = virtual_flag
+  params = formal_class_parameters
+  id = mkrhs(LIDENT)
+  EQUAL
+  csig = class_signature
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      let text = symbol_text $symbolstartpos in
+      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
+    }
+;
+
+/* Core expressions */
+
+seq_expr:
+  | expr        %prec below_SEMI  { $1 }
+  | expr SEMI                     { $1 }
+  | mkexp(expr SEMI seq_expr
+    { Pexp_sequence($1, $3) })
+    { $1 }
+  | expr SEMI PERCENT attr_id seq_expr
+    { let seq = mkexp ~loc:$sloc (Pexp_sequence ($1, $5)) in
+      let payload = PStr [mkstrexp seq []] in
+      mkexp ~loc:$sloc (Pexp_extension ($4, payload)) }
+;
+labeled_simple_pattern:
+    QUESTION LPAREN label_let_pattern opt_default RPAREN
+      { (Optional (fst $3), $4, snd $3) }
+  | QUESTION label_var
+      { (Optional (fst $2), None, snd $2) }
+  | OPTLABEL LPAREN let_pattern opt_default RPAREN
+      { (Optional $1, $4, $3) }
+  | OPTLABEL pattern_var
+      { (Optional $1, None, $2) }
+  | TILDE LPAREN label_let_pattern RPAREN
+      { (Labelled (fst $3), None, snd $3) }
+  | TILDE label_var
+      { (Labelled (fst $2), None, snd $2) }
+  | LABEL simple_pattern
+      { (Labelled $1, None, $2) }
+  | simple_pattern
+      { (Nolabel, None, $1) }
+;
+
+pattern_var:
+  mkpat(
+      mkrhs(LIDENT)     { Ppat_var $1 }
+    | UNDERSCORE        { Ppat_any }
+  ) { $1 }
+;
+
+%inline opt_default:
+  preceded(EQUAL, seq_expr)?
+    { $1 }
+;
+label_let_pattern:
+    x = label_var
+      { x }
+  | x = label_var COLON cty = core_type
+      { let lab, pat = x in
+        lab,
+        mkpat ~loc:$sloc (Ppat_constraint (pat, cty)) }
+;
+%inline label_var:
+    mkrhs(LIDENT)
+      { ($1.Location.txt, mkpat ~loc:$sloc (Ppat_var $1)) }
+;
+let_pattern [@recovery default_pattern ()]:
+    pattern
+      { $1 }
+  | mkpat(pattern COLON core_type
+      { Ppat_constraint($1, $3) })
+      { $1 }
+;
+
+%public expr [@recovery default_expr ()]:
+    simple_expr %prec below_HASH
+      { $1 }
+  | expr_attrs
+      { let desc, attrs = $1 in
+        mkexp_attrs ~loc:$sloc desc attrs }
+  | mkexp(expr_)
+      { $1 }
+  | let_bindings(ext) IN seq_expr
+      { expr_of_let_bindings ~loc:$sloc $1 (merloc $endpos($2) $3) }
+  | pbop_op = mkrhs(LETOP) bindings = letop_bindings IN body = seq_expr
+      { let (pbop_pat, pbop_exp, rev_ands) = bindings in
+        let ands = List.rev rev_ands in
+        let pbop_loc = make_loc $sloc in
+        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
+        mkexp ~loc:$sloc (Pexp_letop{ let_; ands; body}) }
+  | expr COLONCOLON expr
+      { mkexp_cons ~loc:$sloc $loc($2) (ghexp ~loc:$sloc (Pexp_tuple[$1;(merloc $endpos($2) $3)])) }
+  | mkrhs(label) LESSMINUS expr
+      { mkexp ~loc:$sloc (Pexp_setinstvar($1, $3)) }
+  | simple_expr DOT mkrhs(label_longident) LESSMINUS expr
+      { mkexp ~loc:$sloc (Pexp_setfield($1, $3, $5)) }
+  | simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
+      { array_set ~loc:$sloc $1 $4 $7 }
+  | simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
+      { string_set ~loc:$sloc $1 $4 $7 }
+  | simple_expr DOT LBRACE expr RBRACE LESSMINUS expr
+      { bigarray_set ~loc:$sloc $1 $4 $7 }
+  | simple_expr DOTOP LBRACKET expr_semi_list RBRACKET LESSMINUS expr
+      { dotop_set ~loc:$sloc lident bracket $2 $1 $4 $7 }
+  | simple_expr DOTOP LPAREN expr_semi_list RPAREN LESSMINUS expr
+      { dotop_set ~loc:$sloc lident paren $2 $1 $4 $7 }
+  | simple_expr DOTOP LBRACE expr_semi_list RBRACE LESSMINUS expr
+      { dotop_set ~loc:$sloc lident brace $2 $1 $4 $7 }
+  | simple_expr DOT mod_longident DOTOP LBRACKET expr_semi_list RBRACKET
+      LESSMINUS expr
+      { dotop_set ~loc:$sloc (ldot $3) bracket $4 $1 $6 $9 }
+  | simple_expr DOT mod_longident DOTOP LPAREN expr_semi_list RPAREN
+      LESSMINUS expr
+      { dotop_set ~loc:$sloc (ldot $3) paren $4 $1 $6 $9  }
+  | simple_expr DOT mod_longident DOTOP LBRACE expr_semi_list RBRACE
+      LESSMINUS expr
+      { dotop_set ~loc:$sloc (ldot $3) brace $4 $1 $6 $9 }
+  | expr attribute
+      { Exp.attr $1 $2 }
+  (*
+  | UNDERSCORE
+     { not_expecting $loc($1) "wildcard \"_\"" }
+  *)
+;
+%inline expr_attrs:
+  | LET MODULE ext_attributes mkrhs(module_name) module_binding_body IN seq_expr
+      { Pexp_letmodule($4, $5, (merloc $endpos($6) $7)), $3 }
+  | LET EXCEPTION ext_attributes let_exception_declaration IN seq_expr
+      { Pexp_letexception($4, $6), $3 }
+  | LET OPEN override_flag ext_attributes module_expr IN seq_expr
+      { let open_loc = make_loc ($startpos($2), $endpos($5)) in
+        let od = Opn.mk $5 ~override:$3 ~loc:open_loc in
+        Pexp_open(od, (merloc $endpos($6) $7)), $4 }
+  | FUNCTION ext_attributes match_cases
+      { Pexp_function $3, $2 }
+  | FUN ext_attributes labeled_simple_pattern fun_def
+      { let (l,o,p) = $3 in
+        Pexp_fun(l, o, p, $4), $2 }
+  | FUN ext_attributes LPAREN TYPE lident_list RPAREN fun_def
+      { (mk_newtypes ~loc:$sloc $5 $7).pexp_desc, $2 }
+  | MATCH ext_attributes seq_expr WITH match_cases
+      { Pexp_match($3, $5), $2 }
+  | TRY ext_attributes seq_expr WITH match_cases
+      { Pexp_try($3, $5), $2 }
+  (*
+  | TRY ext_attributes seq_expr WITH error
+      { syntax_error() }
+  *)
+  | IF ext_attributes seq_expr THEN expr ELSE expr
+      { Pexp_ifthenelse($3, (merloc $endpos($4) $5), Some (merloc $endpos($6) $7)), $2 }
+  | IF ext_attributes seq_expr THEN expr
+      { Pexp_ifthenelse($3, (merloc $endpos($4) $5), None), $2 }
+  | WHILE ext_attributes seq_expr DO seq_expr DONE
+      { Pexp_while($3, (merloc $endpos($4) $5)), $2 }
+  | FOR ext_attributes pattern EQUAL seq_expr direction_flag seq_expr DO
+    seq_expr DONE
+      { Pexp_for($3, (merloc $endpos($4) $5), (merloc $endpos($6) $7), $6, (merloc $endpos($8) $9)), $2 }
+  | ASSERT ext_attributes simple_expr %prec below_HASH
+      { Pexp_assert $3, $2 }
+  | LAZY ext_attributes simple_expr %prec below_HASH
+      { Pexp_lazy $3, $2 }
+  | OBJECT ext_attributes class_structure END
+      { Pexp_object $3, $2 }
+  (*
+  | OBJECT ext_attributes class_structure error
+      { unclosed "object" $loc($1) "end" $loc($4) }
+  *)
+;
+%inline expr_:
+  | simple_expr nonempty_llist(labeled_simple_expr)
+      { Pexp_apply($1, $2) }
+  | expr_comma_list %prec below_COMMA
+      { Pexp_tuple($1) }
+  | mkrhs(constr_longident) simple_expr %prec below_HASH
+      { Pexp_construct($1, Some $2) }
+  | name_tag simple_expr %prec below_HASH
+      { Pexp_variant($1, Some $2) }
+  | e1 = expr op = op(infix_operator) e2 = expr
+      { mkinfix e1 op e2 }
+  | subtractive expr %prec prec_unary_minus
+      { mkuminus ~oploc:$loc($1) $1 $2 }
+  | additive expr %prec prec_unary_plus
+      { mkuplus ~oploc:$loc($1) $1 $2 }
+;
+
+%public simple_expr:
+  | LPAREN seq_expr RPAREN
+      { reloc_exp ~loc:$sloc $2 }
+  (*
+  | LPAREN seq_expr error
+      { unclosed "(" $loc($1) ")" $loc($3) }
+  *)
+  | LPAREN seq_expr type_constraint RPAREN
+      { mkexp_constraint ~loc:$sloc $2 $3 }
+  | simple_expr DOT LPAREN seq_expr RPAREN
+      { array_get ~loc:$sloc $1 $4 }
+  (*
+  | simple_expr DOT LPAREN seq_expr error
+      { unclosed "(" $loc($3) ")" $loc($5) }
+  *)
+  | simple_expr DOT LBRACKET seq_expr RBRACKET
+      { string_get ~loc:$sloc $1 $4 }
+  (*
+  | simple_expr DOT LBRACKET seq_expr error
+      { unclosed "[" $loc($3) "]" $loc($5) }
+  *)
+  | simple_expr DOTOP LBRACKET expr_semi_list RBRACKET
+      { dotop_get ~loc:$sloc lident bracket $2 $1 $4 }
+  (*
+  | simple_expr DOTOP LBRACKET expr_semi_list error
+      { unclosed "[" $loc($3) "]" $loc($5) }
+  *)
+  | simple_expr DOTOP LPAREN expr_semi_list RPAREN
+      { dotop_get ~loc:$sloc lident paren $2 $1 $4  }
+  (*
+  | simple_expr DOTOP LPAREN expr_semi_list error
+      { unclosed "(" $loc($3) ")" $loc($5) }
+  *)
+  | simple_expr DOTOP LBRACE expr_semi_list RBRACE
+      { dotop_get ~loc:$sloc lident brace $2 $1 $4 }
+  (*
+  | simple_expr DOTOP LBRACE expr error
+      { unclosed "{" $loc($3) "}" $loc($5) }
+  *)
+  | simple_expr DOT mod_longident DOTOP LBRACKET expr_semi_list RBRACKET
+      { dotop_get ~loc:$sloc (ldot $3) bracket $4 $1 $6  }
+  (*
+  | simple_expr DOT
+    mod_longident DOTOP LBRACKET expr_semi_list error
+      { unclosed "[" $loc($5) "]" $loc($7) }
+  *)
+  | simple_expr DOT mod_longident DOTOP LPAREN expr_semi_list RPAREN
+      { dotop_get ~loc:$sloc (ldot $3) paren $4 $1 $6 }
+  (*
+  | simple_expr DOT
+    mod_longident DOTOP LPAREN expr_semi_list error
+      { unclosed "(" $loc($5) ")" $loc($7) }
+  *)
+  | simple_expr DOT mod_longident DOTOP LBRACE expr_semi_list RBRACE
+      { dotop_get ~loc:$sloc (ldot $3) brace $4 $1 $6  }
+  (*
+  | simple_expr DOT
+    mod_longident DOTOP LBRACE expr_semi_list error
+      { unclosed "{" $loc($5) "}" $loc($7) }
+  *)
+  | simple_expr DOT LBRACE expr RBRACE
+      { bigarray_get ~loc:$sloc $1 $4 }
+  (*
+  | simple_expr DOT LBRACE expr error
+      { unclosed "{" $loc($3) "}" $loc($5) }
+  *)
+  | simple_expr_attrs
+    { let desc, attrs = $1 in
+      mkexp_attrs ~loc:$sloc desc attrs }
+  | mkexp(simple_expr_)
+      { $1 }
+;
+%inline simple_expr_attrs:
+  | BEGIN ext = ext attrs = attributes e = seq_expr END
+      { e.pexp_desc, (ext, attrs @ e.pexp_attributes) }
+  | BEGIN ext_attributes END
+      { Pexp_construct (mkloc (Lident "()") (make_loc $sloc), None), $2 }
+  (*
+  | BEGIN ext_attributes seq_expr error
+      { unclosed "begin" $loc($1) "end" $loc($4) }
+  *)
+  | NEW ext_attributes mkrhs(class_longident)
+      { Pexp_new($3), $2 }
+  | LPAREN MODULE ext_attributes module_expr RPAREN
+      { Pexp_pack $4, $3 }
+  | LPAREN MODULE ext_attributes module_expr COLON package_type RPAREN
+      { Pexp_constraint (ghexp ~loc:$sloc (Pexp_pack $4), $6), $3 }
+  (*
+  | LPAREN MODULE ext_attributes module_expr COLON error
+      { unclosed "(" $loc($1) ")" $loc($6) }
+  *)
+;
+%inline simple_expr_:
+  | mkrhs(val_longident)
+      { Pexp_ident ($1) }
+  | constant
+      { Pexp_constant $1 }
+  | mkrhs(constr_longident) %prec prec_constant_constructor
+      { Pexp_construct($1, None) }
+  | name_tag %prec prec_constant_constructor
+      { Pexp_variant($1, None) }
+  | op(PREFIXOP) simple_expr
+      { Pexp_apply($1, [Nolabel,$2]) }
+  | op(BANG {"!"}) simple_expr
+      { Pexp_apply($1, [Nolabel,$2]) }
+  | LBRACELESS object_expr_content GREATERRBRACE
+      { Pexp_override $2 }
+  (*
+  | LBRACELESS object_expr_content error
+      { unclosed "{<" $loc($1) ">}" $loc($3) }
+  *)
+  | LBRACELESS GREATERRBRACE
+      { Pexp_override [] }
+  | simple_expr DOT mkrhs(label_longident)
+      { Pexp_field($1, $3) }
+  | od=open_dot_declaration DOT LPAREN seq_expr RPAREN
+      { Pexp_open(od, $4) }
+  | od=open_dot_declaration DOT LBRACELESS object_expr_content GREATERRBRACE
+      { (* TODO: review the location of Pexp_override *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_override $4)) }
+  (*
+  | mod_longident DOT LBRACELESS object_expr_content error
+      { unclosed "{<" $loc($3) ">}" $loc($5) }
+  *)
+  | simple_expr HASH mkrhs(label)
+      { Pexp_send($1, $3) }
+  | simple_expr op(HASHOP) simple_expr
+      { mkinfix $1 $2 $3 }
+  | extension
+      { Pexp_extension $1 }
+  | QUESTIONQUESTION
+      { let id = mkrhs "merlin.hole" $loc in
+        Pexp_extension (id, PStr []) }
+  | od=open_dot_declaration DOT mkrhs(LPAREN RPAREN {Lident "()"})
+      { (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_construct($3, None))) }
+  (*
+  | mod_longident DOT LPAREN seq_expr error
+      { unclosed "(" $loc($3) ")" $loc($5) }
+  *)
+  | LBRACE record_expr_content RBRACE
+      { let (exten, fields) = $2 in
+        Pexp_record(fields, exten) }
+  (*
+  | LBRACE record_expr_content error
+      { unclosed "{" $loc($1) "}" $loc($3) }
+  *)
+  | od=open_dot_declaration DOT LBRACE record_expr_content RBRACE
+      { let (exten, fields) = $4 in
+        (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_record(fields, exten))) }
+  (*
+  | mod_longident DOT LBRACE record_expr_content error
+      { unclosed "{" $loc($3) "}" $loc($5) }
+  *)
+  | LBRACKETBAR expr_semi_list BARRBRACKET
+      { Pexp_array($2) }
+  (*
+  | LBRACKETBAR expr_semi_list error
+      { unclosed "[|" $loc($1) "|]" $loc($3) }
+  *)
+  | LBRACKETBAR BARRBRACKET
+      { Pexp_array [] }
+  | od=open_dot_declaration DOT LBRACKETBAR expr_semi_list BARRBRACKET
+      { (* TODO: review the location of Pexp_array *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_array($4))) }
+  | od=open_dot_declaration DOT LBRACKETBAR BARRBRACKET
+      { (* TODO: review the location of Pexp_array *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_array [])) }
+  (*
+  | mod_longident DOT
+    LBRACKETBAR expr_semi_list error
+      { unclosed "[|" $loc($3) "|]" $loc($5) }
+  *)
+  | LBRACKET expr_semi_list RBRACKET
+      { fst (mktailexp $loc($3) $2) }
+  (*
+  | LBRACKET expr_semi_list error
+      { unclosed "[" $loc($1) "]" $loc($3) }
+  *)
+  | od=open_dot_declaration DOT LBRACKET expr_semi_list RBRACKET
+      { let list_exp =
+          (* TODO: review the location of list_exp *)
+          let tail_exp, _tail_loc = mktailexp $loc($5) $4 in
+          mkexp ~loc:$sloc tail_exp in
+        Pexp_open(od, list_exp) }
+  | od=open_dot_declaration DOT mkrhs(LBRACKET RBRACKET {Lident "[]"})
+      { (* TODO: review the location of Pexp_construct *)
+        Pexp_open(od, mkexp ~loc:$sloc (Pexp_construct($3, None))) }
+  (*
+  | mod_longident DOT
+    LBRACKET expr_semi_list error
+      { unclosed "[" $loc($3) "]" $loc($5) }
+  *)
+  | od=open_dot_declaration DOT LPAREN MODULE ext_attributes module_expr COLON
+    package_type RPAREN
+      { (* TODO: review the location of Pexp_constraint *)
+        let modexp =
+          mkexp_attrs ~loc:$sloc
+            (Pexp_constraint (ghexp ~loc:$sloc (Pexp_pack $6), $8)) $5 in
+        Pexp_open(od, modexp) }
+  (*
+  | mod_longident DOT
+    LPAREN MODULE ext_attributes module_expr COLON error
+      { unclosed "(" $loc($3) ")" $loc($8) }
+  *)
+;
+labeled_simple_expr:
+    simple_expr %prec below_HASH
+      { (Nolabel, $1) }
+  | LABEL simple_expr %prec below_HASH
+      { (Labelled $1, $2) }
+  | TILDE label = LIDENT
+      { let loc = $loc(label) in
+        (Labelled label, mkexpvar ~loc label) }
+  | QUESTION label = LIDENT
+      { let loc = $loc(label) in
+        (Optional label, mkexpvar ~loc label) }
+  | OPTLABEL simple_expr %prec below_HASH
+      { (Optional $1, $2) }
+;
+%inline lident_list:
+  xs = mkrhs(LIDENT)+
+    { xs }
+;
+%inline let_ident:
+    val_ident { mkpatvar ~loc:$sloc $1 }
+;
+let_binding_body:
+    let_ident strict_binding
+      { ($1, $2) }
+  | let_ident type_constraint EQUAL seq_expr
+      { let v = $1 in (* PR#7344 *)
+        let t =
+          match $2 with
+            Some t, None -> t
+          | _, Some t -> t
+          | _ -> assert false
+        in
+        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
+        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
+        let patloc = ($startpos($1), $endpos($2)) in
+        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
+         mkexp_constraint ~loc:$sloc $4 $2) }
+  | let_ident COLON typevar_list DOT core_type EQUAL seq_expr
+      (* TODO: could replace [typevar_list DOT core_type]
+               with [mktyp(poly(core_type))]
+               and simplify the semantic action? *)
+      { let typloc = ($startpos($3), $endpos($5)) in
+        let patloc = ($startpos($1), $endpos($5)) in
+        (ghpat ~loc:patloc
+           (Ppat_constraint($1, ghtyp ~loc:typloc (Ptyp_poly($3,$5)))),
+         $7) }
+  | let_ident COLON TYPE lident_list DOT core_type EQUAL seq_expr
+      { let exp, poly =
+          wrap_type_annotation ~loc:$sloc $4 $6 $8 in
+        let loc = ($startpos($1), $endpos($6)) in
+        (ghpat ~loc (Ppat_constraint($1, poly)), exp) }
+  | pattern_no_exn EQUAL seq_expr
+      { ($1, $3) }
+  | simple_pattern_not_ident COLON core_type EQUAL seq_expr
+      { let loc = ($startpos($1), $endpos($3)) in
+        (ghpat ~loc (Ppat_constraint($1, $3)), $5) }
+;
+(* The formal parameter EXT can be instantiated with ext or no_ext
+   so as to indicate whether an extension is allowed or disallowed. *)
+let_bindings(EXT):
+    let_binding(EXT)                            { $1 }
+  | let_bindings(EXT) and_let_binding           { addlb $1 $2 }
+;
+%inline let_binding(EXT):
+  LET
+  ext = EXT
+  attrs1 = attributes
+  rec_flag = rec_flag
+  body = let_binding_body
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      mklbs ~loc:$sloc ext rec_flag (mklb ~loc:$sloc true body attrs)
+    }
+;
+and_let_binding:
+  AND
+  attrs1 = attributes
+  body = let_binding_body
+  attrs2 = post_item_attributes
+    {
+      let attrs = attrs1 @ attrs2 in
+      mklb ~loc:$sloc false body attrs
+    }
+;
+letop_binding_body:
+    pat = let_ident exp = strict_binding
+      { (pat, exp) }
+  | pat = simple_pattern COLON typ = core_type EQUAL exp = seq_expr
+      { let loc = ($startpos(pat), $endpos(typ)) in
+        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) }
+  | pat = pattern_no_exn EQUAL exp = seq_expr
+      { (pat, exp) }
+;
+letop_bindings:
+    body = letop_binding_body
+      { let let_pat, let_exp = body in
+        let_pat, let_exp, [] }
+  | bindings = letop_bindings pbop_op = mkrhs(ANDOP) body = let_binding_body
+      { let let_pat, let_exp, rev_ands = bindings in
+        let pbop_pat, pbop_exp = body in
+        let pbop_loc = make_loc $sloc in
+        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
+        let_pat, let_exp, and_ :: rev_ands }
+;
+fun_binding:
+    strict_binding
+      { $1 }
+  | type_constraint EQUAL seq_expr
+      { mkexp_constraint ~loc:$sloc $3 $1 }
+;
+strict_binding:
+    EQUAL seq_expr
+      { $2 }
+  | labeled_simple_pattern fun_binding
+      { let (l, o, p) = $1 in ghexp ~loc:$sloc (Pexp_fun(l, o, p, $2)) }
+  | LPAREN TYPE lident_list RPAREN fun_binding
+      { mk_newtypes ~loc:$sloc $3 $5 }
+;
+%inline match_cases:
+  xs = preceded_or_separated_nonempty_llist(BAR, match_case)
+    { xs }
+;
+match_case:
+    pattern MINUSGREATER seq_expr
+      { Exp.case $1 (merloc $endpos($2) $3) }
+  | pattern WHEN seq_expr MINUSGREATER seq_expr
+      { Exp.case $1 ~guard:(merloc $endpos($2) $3) (merloc $endpos($4) $5) }
+  | pattern MINUSGREATER DOT [@cost infinity]
+      { Exp.case $1 (merloc $endpos($2)
+                       (Exp.unreachable ~loc:(make_loc $loc($3)) ())) }
+;
+fun_def:
+    MINUSGREATER seq_expr
+      { (merloc $endpos($1) $2) }
+  | mkexp(COLON atomic_type MINUSGREATER seq_expr
+      { Pexp_constraint ((merloc $endpos($3) $4), $2) })
+      { $1 }
+/* Cf #5939: we used to accept (fun p when e0 -> e) */
+  | labeled_simple_pattern fun_def
+      {
+       let (l,o,p) = $1 in
+       ghexp ~loc:$sloc (Pexp_fun(l, o, p, $2))
+      }
+  | LPAREN TYPE lident_list RPAREN fun_def
+      { mk_newtypes ~loc:$sloc $3 $5 }
+;
+%inline expr_comma_list:
+  es = separated_nontrivial_llist(COMMA, expr)
+    { es }
+;
+record_expr_content:
+  eo = ioption(terminated(simple_expr, WITH))
+  fields = separated_or_terminated_nonempty_list(SEMI, record_expr_field)
+    { eo, fields }
+;
+%inline record_expr_field:
+  | label = mkrhs(label_longident)
+    c = type_constraint?
+    eo = preceded(EQUAL, expr)?
+      { let e =
+          match eo with
+          | None ->
+              (* No pattern; this is a pun. Desugar it. *)
+              exp_of_longident ~loc:$sloc label
+          | Some e ->
+              e
+        in
+        label, mkexp_opt_constraint ~loc:$sloc e c }
+;
+%inline object_expr_content:
+  xs = separated_or_terminated_nonempty_list(SEMI, object_expr_field)
+    { xs }
+;
+%inline object_expr_field:
+    label = mkrhs(label)
+    oe = preceded(EQUAL, expr)?
+      { let e =
+          match oe with
+          | None ->
+              (* No expression; this is a pun. Desugar it. *)
+              exp_of_label ~loc:$sloc label
+          | Some e ->
+              e
+        in
+        label, e }
+;
+%inline expr_semi_list:
+  es = separated_or_terminated_nonempty_list(SEMI, expr)
+    { es }
+;
+type_constraint:
+    COLON core_type                             { (Some $2, None) }
+  | COLON core_type COLONGREATER core_type      { (Some $2, Some $4) }
+  | COLONGREATER core_type                      { (None, Some $2) }
+  (*| COLON error                                 { syntax_error() } *)
+  (*| COLONGREATER error                          { syntax_error() } *)
+;
+
+/* Patterns */
+
+(* Whereas [pattern] is an arbitrary pattern, [pattern_no_exn] is a pattern
+   that does not begin with the [EXCEPTION] keyword. Thus, [pattern_no_exn]
+   is the intersection of the context-free language [pattern] with the
+   regular language [^EXCEPTION .*].
+
+   Ideally, we would like to use [pattern] everywhere and check in a later
+   phase that EXCEPTION patterns are used only where they are allowed (there
+   is code in typing/typecore.ml to this end). Unfortunately, in the
+   definition of [let_binding_body], we cannot allow [pattern]. That would
+   create a shift/reduce conflict: upon seeing LET EXCEPTION ..., the parser
+   wouldnt know whether this is the beginning of a LET EXCEPTION construct or
+   the beginning of a LET construct whose pattern happens to begin with
+   EXCEPTION. The conflict is avoided there by using [pattern_no_exn] in the
+   definition of [let_binding_body].
+
+   In order to avoid duplication between the definitions of [pattern] and
+   [pattern_no_exn], we create a parameterized definition [pattern_(self)]
+   and instantiate it twice. *)
+
+pattern [@recovery default_pattern ()]:
+    pattern_(pattern)
+      { $1 }
+  | EXCEPTION ext_attributes pattern %prec prec_constr_appl
+      { mkpat_attrs ~loc:$sloc (Ppat_exception $3) $2}
+;
+
+pattern_no_exn:
+    pattern_(pattern_no_exn)
+      { $1 }
+;
+
+%inline pattern_(self):
+  | self COLONCOLON pattern
+      { mkpat_cons ~loc:$sloc $loc($2) (ghpat ~loc:$sloc (Ppat_tuple[$1;$3])) }
+  | self attribute
+      { Pat.attr $1 $2 }
+  | pattern_gen
+      { $1 }
+  | mkpat(
+      self AS mkrhs(val_ident)
+        { Ppat_alias($1, $3) }
+    (*| self AS error
+        { expecting $loc($3) "identifier" } *)
+    | pattern_comma_list(self) %prec below_COMMA
+        { Ppat_tuple(List.rev $1) }
+    (*| self COLONCOLON error
+        { expecting $loc($3) "pattern" } *)
+    | self BAR pattern
+        { Ppat_or($1, $3) }
+    (*| self BAR error
+        { expecting $loc($3) "pattern" } *)
+  ) { $1 }
+;
+
+pattern_gen:
+    simple_pattern
+      { $1 }
+  | mkpat(
+      mkrhs(constr_longident) pattern %prec prec_constr_appl
+        { Ppat_construct($1, Some $2) }
+    | name_tag pattern %prec prec_constr_appl
+        { Ppat_variant($1, Some $2) }
+    ) { $1 }
+  | LAZY ext_attributes simple_pattern
+      { mkpat_attrs ~loc:$sloc (Ppat_lazy $3) $2}
+;
+simple_pattern:
+    mkpat(mkrhs(val_ident) %prec below_EQUAL
+      { Ppat_var ($1) })
+      { $1 }
+  | simple_pattern_not_ident { $1 }
+;
+
+simple_pattern_not_ident:
+  | LPAREN pattern RPAREN
+      { reloc_pat ~loc:$sloc $2 }
+  | simple_delimited_pattern
+      { $1 }
+  | LPAREN MODULE ext_attributes mkrhs(module_name) RPAREN
+      { mkpat_attrs ~loc:$sloc (Ppat_unpack $4) $3 }
+  | LPAREN MODULE ext_attributes mkrhs(module_name) COLON package_type RPAREN
+      { mkpat_attrs ~loc:$sloc
+          (Ppat_constraint(mkpat ~loc:$sloc (Ppat_unpack $4), $6))
+          $3 }
+  | mkpat(simple_pattern_not_ident_)
+      { $1 }
+;
+%inline simple_pattern_not_ident_:
+  | UNDERSCORE
+      { Ppat_any }
+  | signed_constant
+      { Ppat_constant $1 }
+  | signed_constant DOTDOT signed_constant
+      { Ppat_interval ($1, $3) }
+  | mkrhs(constr_longident)
+      { Ppat_construct($1, None) }
+  | name_tag
+      { Ppat_variant($1, None) }
+  | HASH mkrhs(type_longident)
+      { Ppat_type ($2) }
+  | mkrhs(mod_longident) DOT simple_delimited_pattern
+      { Ppat_open($1, $3) }
+  | mkrhs(mod_longident) DOT mkrhs(LBRACKET RBRACKET {Lident "[]"})
+    { Ppat_open($1, mkpat ~loc:$sloc (Ppat_construct($3, None))) }
+  | mkrhs(mod_longident) DOT mkrhs(LPAREN RPAREN {Lident "()"})
+    { Ppat_open($1, mkpat ~loc:$sloc (Ppat_construct($3, None))) }
+  | mkrhs(mod_longident) DOT LPAREN pattern RPAREN
+      { Ppat_open ($1, $4) }
+  (*
+  | mod_longident DOT LPAREN pattern error
+      { unclosed "(" $loc($3) ")" $loc($5)  }
+  | mod_longident DOT LPAREN error
+      { expecting $loc($4) "pattern" }
+  | LPAREN pattern error
+      { unclosed "(" $loc($1) ")" $loc($3) }
+  *)
+  | LPAREN pattern COLON core_type RPAREN
+      { Ppat_constraint($2, $4) }
+  (*
+  | LPAREN pattern COLON core_type error
+      { unclosed "(" $loc($1) ")" $loc($5) }
+  | LPAREN pattern COLON error
+      { expecting $loc($4) "type" }
+  | LPAREN MODULE ext_attributes module_name COLON package_type
+    error
+      { unclosed "(" $loc($1) ")" $loc($7) }
+  *)
+  | extension
+      { Ppat_extension $1 }
+;
+
+simple_delimited_pattern:
+  mkpat(
+      LBRACE record_pat_content RBRACE
+      { let (fields, closed) = $2 in
+        Ppat_record(fields, closed) }
+    (*| LBRACE record_pat_content error
+      { unclosed "{" $loc($1) "}" $loc($3) } *)
+    | LBRACKET pattern_semi_list RBRACKET
+      { fst (mktailpat $loc($3) $2) }
+    (*| LBRACKET pattern_semi_list error
+      { unclosed "[" $loc($1) "]" $loc($3) } *)
+    | LBRACKETBAR pattern_semi_list BARRBRACKET
+      { Ppat_array $2 }
+    | LBRACKETBAR BARRBRACKET
+      { Ppat_array [] }
+    (*| LBRACKETBAR pattern_semi_list error
+      { unclosed "[|" $loc($1) "|]" $loc($3) } *)
+  ) { $1 }
+
+pattern_comma_list(self):
+    pattern_comma_list(self) COMMA pattern      { $3 :: $1 }
+  | self COMMA pattern                          { [$3; $1] }
+  (*| self COMMA error                            { expecting $loc($3) "pattern" } *)
+;
+%inline pattern_semi_list:
+  ps = separated_or_terminated_nonempty_list(SEMI, pattern)
+    { ps }
+;
+(* A label-pattern list is a nonempty list of label-pattern pairs, optionally
+   followed with an UNDERSCORE, separated-or-terminated with semicolons. *)
+%inline record_pat_content:
+  listx(SEMI, record_pat_field, UNDERSCORE)
+    { let fields, closed = $1 in
+      let closed = match closed with Some () -> Open | None -> Closed in
+      fields, closed }
+;
+%inline record_pat_field:
+  label = mkrhs(label_longident)
+  octy = preceded(COLON, core_type)?
+  opat = preceded(EQUAL, pattern)?
+    { let pat =
+        match opat with
+        | None ->
+            (* No pattern; this is a pun. Desugar it. *)
+            pat_of_label ~loc:$sloc label
+        | Some pat ->
+            pat
+      in
+      label, mkpat_opt_constraint ~loc:$sloc pat octy
+    }
+;
+
+/* Value descriptions */
+
+value_description:
+  VAL
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(val_ident)
+  COLON
+  ty = core_type
+  attrs2 = post_item_attributes
+    { let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      Val.mk id ty ~attrs ~loc ~docs,
+      ext }
+;
+
+/* Primitive declarations */
+
+primitive_declaration:
+  EXTERNAL
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(val_ident)
+  COLON
+  ty = core_type
+  EQUAL
+  prim = raw_string+
+  attrs2 = post_item_attributes
+    { let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      Val.mk id ty ~prim ~attrs ~loc ~docs,
+      ext }
+;
+
+(* Type declarations and type substitutions. *)
+
+(* Type declarations [type t = u] and type substitutions [type t := u] are very
+   similar, so we view them as instances of [generic_type_declarations]. In the
+   case of a type declaration, the use of [nonrec_flag] means that [NONREC] may
+   be absent or present, whereas in the case of a type substitution, the use of
+   [no_nonrec_flag] means that [NONREC] must be absent. The use of [type_kind]
+   versus [type_subst_kind] means that in the first case, we expect an [EQUAL]
+   sign, whereas in the second case, we expect [COLONEQUAL]. *)
+
+%inline type_declarations:
+  generic_type_declarations(nonrec_flag, type_kind)
+    { $1 }
+;
+
+%inline type_subst_declarations:
+  generic_type_declarations(no_nonrec_flag, type_subst_kind)
+    { $1 }
+;
+
+(* A set of type declarations or substitutions begins with a
+   [generic_type_declaration] and continues with a possibly empty list of
+   [generic_and_type_declaration]s. *)
+
+%inline generic_type_declarations(flag, kind):
+  xlist(
+    generic_type_declaration(flag, kind),
+    generic_and_type_declaration(kind)
+  )
+  { $1 }
+;
+
+(* [generic_type_declaration] and [generic_and_type_declaration] look similar,
+   but are in reality different enough that it is difficult to share anything
+   between them. *)
+
+generic_type_declaration(flag, kind):
+  TYPE
+  ext = ext
+  attrs1 = attributes
+  flag = flag
+  params = type_parameters
+  id = mkrhs(LIDENT)
+  kind_priv_manifest = kind
+  cstrs = constraints
+  attrs2 = post_item_attributes
+    {
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs $sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      (flag, ext),
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
+    }
+;
+%inline generic_and_type_declaration(kind):
+  AND
+  attrs1 = attributes
+  params = type_parameters
+  id = mkrhs(LIDENT)
+  kind_priv_manifest = kind
+  cstrs = constraints
+  attrs2 = post_item_attributes
+    {
+      let (kind, priv, manifest) = kind_priv_manifest in
+      let docs = symbol_docs $sloc in
+      let attrs = attrs1 @ attrs2 in
+      let loc = make_loc $sloc in
+      let text = symbol_text $symbolstartpos in
+      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
+    }
+;
+%inline constraints:
+  llist(preceded(CONSTRAINT, constrain))
+    { $1 }
+;
+(* Lots of %inline expansion are required for [nonempty_type_kind] to be
+   LR(1). At the cost of some manual expansion, it would be possible to give a
+   definition that leads to a smaller grammar (after expansion) and therefore
+   a smaller automaton. *)
+nonempty_type_kind:
+  | priv = inline_private_flag
+    ty = core_type
+      { (Ptype_abstract, priv, Some ty) }
+  | oty = type_synonym
+    priv = inline_private_flag
+    cs = constructor_declarations
+      { (Ptype_variant cs, priv, oty) }
+  | oty = type_synonym
+    priv = inline_private_flag
+    DOTDOT
+      { (Ptype_open, priv, oty) }
+  | oty = type_synonym
+    priv = inline_private_flag
+    LBRACE ls = label_declarations RBRACE
+      { (Ptype_record ls, priv, oty) }
+;
+%inline type_synonym:
+  ioption(terminated(core_type, EQUAL))
+    { $1 }
+;
+type_kind:
+    /*empty*/
+      { (Ptype_abstract, Public, None) }
+  | EQUAL nonempty_type_kind
+      { $2 }
+;
+%inline type_subst_kind:
+    COLONEQUAL nonempty_type_kind
+      { $2 }
+;
+type_parameters:
+    /* empty */
+      { [] }
+  | p = type_parameter
+      { [p] }
+  | LPAREN ps = separated_nonempty_llist(COMMA, type_parameter) RPAREN
+      { ps }
+;
+type_parameter:
+    type_variance type_variable        { $2, $1 }
+;
+type_variable:
+  mktyp(
+    QUOTE tyvar = ident
+      { Ptyp_var tyvar }
+  | UNDERSCORE
+      { Ptyp_any }
+  ) { $1 }
+;
+
+type_variance:
+    /* empty */                                 { Invariant }
+  | PLUS                                        { Covariant }
+  | MINUS                                       { Contravariant }
+;
+
+(* A sequence of constructor declarations is either a single BAR, which
+   means that the list is empty, or a nonempty BAR-separated list of
+   declarations, with an optional leading BAR. *)
+constructor_declarations:
+  | BAR
+      { [] }
+  | cs = bar_llist(constructor_declaration)
+      { cs }
+;
+(* A constructor declaration begins with an opening symbol, which can
+   be either epsilon or BAR. Note that this opening symbol is included
+   in the footprint $sloc. *)
+(* Because [constructor_declaration] and [extension_constructor_declaration]
+   are identical except for their semantic actions, we introduce the symbol
+   [generic_constructor_declaration], whose semantic action is neutral -- it
+   merely returns a tuple. *)
+generic_constructor_declaration(opening):
+  opening
+  cid = mkrhs(constr_ident)
+  args_res = generalized_constructor_arguments
+  attrs = attributes
+    {
+      let args, res = args_res in
+      let info = symbol_info $endpos in
+      let loc = make_loc $sloc in
+      cid, args, res, attrs, loc, info
+    }
+;
+%inline constructor_declaration(opening):
+  d = generic_constructor_declaration(opening)
+    {
+      let cid, args, res, attrs, loc, info = d in
+      Type.constructor cid ~args ?res ~attrs ~loc ~info
+    }
+;
+str_exception_declaration:
+  sig_exception_declaration
+    { $1 }
+| EXCEPTION
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(constr_ident)
+  EQUAL
+  lid = mkrhs(constr_longident)
+  attrs2 = attributes
+  attrs = post_item_attributes
+  { let loc = make_loc $sloc in
+    let docs = symbol_docs $sloc in
+    Te.mk_exception ~attrs
+      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
+    , ext }
+;
+sig_exception_declaration:
+  EXCEPTION
+  ext = ext
+  attrs1 = attributes
+  id = mkrhs(constr_ident)
+  args_res = generalized_constructor_arguments
+  attrs2 = attributes
+  attrs = post_item_attributes
+    { let args, res = args_res in
+      let loc = make_loc $sloc in
+      let docs = symbol_docs $sloc in
+      Te.mk_exception ~attrs
+        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
+      , ext }
+;
+%inline let_exception_declaration:
+    mkrhs(constr_ident) generalized_constructor_arguments attributes
+      { let args, res = $2 in
+        Te.decl $1 ~args ?res ~attrs:$3 ~loc:(make_loc $sloc) }
+;
+generalized_constructor_arguments:
+    /*empty*/                     { (Pcstr_tuple [],None) }
+  | OF constructor_arguments      { ($2,None) }
+  | COLON constructor_arguments MINUSGREATER atomic_type %prec below_HASH
+                                  { ($2,Some $4) }
+  | COLON atomic_type %prec below_HASH
+                                  { (Pcstr_tuple [],Some $2) }
+;
+
+constructor_arguments:
+  | tys = inline_separated_nonempty_llist(STAR, atomic_type)
+    %prec below_HASH
+      { Pcstr_tuple tys }
+  | LBRACE label_declarations RBRACE
+      { Pcstr_record $2 }
+;
+label_declarations:
+    label_declaration                           { [$1] }
+  | label_declaration_semi                      { [$1] }
+  | label_declaration_semi label_declarations   { $1 :: $2 }
+;
+label_declaration:
+    mutable_flag mkrhs(label) COLON poly_type_no_attr attributes
+      { let info = symbol_info $endpos in
+        Type.field $2 $4 ~mut:$1 ~attrs:$5 ~loc:(make_loc $sloc) ~info }
+;
+label_declaration_semi:
+    mutable_flag mkrhs(label) COLON poly_type_no_attr attributes SEMI attributes
+      { let info =
+          match rhs_info $endpos($5) with
+          | Some _ as info_before_semi -> info_before_semi
+          | None -> symbol_info $endpos
+       in
+       Type.field $2 $4 ~mut:$1 ~attrs:($5 @ $7) ~loc:(make_loc $sloc) ~info }
+;
+
+/* Type Extensions */
+
+%inline str_type_extension:
+  type_extension(extension_constructor)
+    { $1 }
+;
+%inline sig_type_extension:
+  type_extension(extension_constructor_declaration)
+    { $1 }
+;
+%inline type_extension(declaration):
+  TYPE
+  ext = ext
+  attrs1 = attributes
+  no_nonrec_flag
+  params = type_parameters
+  tid = mkrhs(type_longident)
+  PLUSEQ
+  priv = private_flag
+  cs = bar_llist(declaration)
+  attrs2 = post_item_attributes
+    { let docs = symbol_docs $sloc in
+      let attrs = attrs1 @ attrs2 in
+      Te.mk tid cs ~params ~priv ~attrs ~docs,
+      ext }
+;
+%inline extension_constructor(opening):
+    extension_constructor_declaration(opening)
+      { $1 }
+  | extension_constructor_rebind(opening)
+      { $1 }
+;
+%inline extension_constructor_declaration(opening):
+  d = generic_constructor_declaration(opening)
+    {
+      let cid, args, res, attrs, loc, info = d in
+      Te.decl cid ~args ?res ~attrs ~loc ~info
+    }
+;
+extension_constructor_rebind(opening):
+  opening
+  cid = mkrhs(constr_ident)
+  EQUAL
+  lid = mkrhs(constr_longident)
+  attrs = attributes
+      { let info = symbol_info $endpos in
+        Te.rebind cid lid ~attrs ~loc:(make_loc $sloc) ~info }
+;
+
+/* "with" constraints (additional type equations over signature components) */
+
+with_constraint:
+    TYPE type_parameters mkrhs(label_longident) with_type_binder
+    core_type_no_attr constraints
+      { let lident = loc_last $3 in
+        Pwith_type
+          ($3,
+           (Type.mk lident
+              ~params:$2
+              ~cstrs:$6
+              ~manifest:$5
+              ~priv:$4
+              ~loc:(make_loc $sloc))) }
+    /* used label_longident instead of type_longident to disallow
+       functor applications in type path */
+  | TYPE type_parameters mkrhs(label_longident)
+    COLONEQUAL core_type_no_attr
+      { let lident = loc_last $3 in
+        Pwith_typesubst
+         ($3,
+           (Type.mk lident
+              ~params:$2
+              ~manifest:$5
+              ~loc:(make_loc $sloc))) }
+  | MODULE mkrhs(mod_longident) EQUAL mkrhs(mod_ext_longident)
+      { Pwith_module ($2, $4) }
+  | MODULE mkrhs(mod_longident) COLONEQUAL mkrhs(mod_ext_longident)
+      { Pwith_modsubst ($2, $4) }
+;
+with_type_binder:
+    EQUAL          { Public }
+  | EQUAL PRIVATE  { Private }
+;
+
+/* Polymorphic types */
+
+%inline typevar:
+  QUOTE mkrhs(ident)
+    { $2 }
+;
+%inline typevar_list:
+  nonempty_llist(typevar)
+    { $1 }
+;
+%inline poly(X):
+  typevar_list DOT X
+    { Ptyp_poly($1, $3) }
+;
+possibly_poly(X):
+  X
+    { $1 }
+| mktyp(poly(X))
+    { $1 }
+;
+%inline poly_type:
+  possibly_poly(core_type)
+    { $1 }
+;
+%inline poly_type_no_attr:
+  possibly_poly(core_type_no_attr)
+    { $1 }
+;
+
+(* -------------------------------------------------------------------------- *)
+
+(* Core language types. *)
+
+(* A core type (core_type) is a core type without attributes (core_type_no_attr)
+   followed with a list of attributes. *)
+core_type:
+    core_type_no_attr
+      { $1 }
+  | core_type attribute
+      { Typ.attr $1 $2 }
+;
+
+(* A core type without attributes is currently defined as an alias type, but
+   this could change in the future if new forms of types are introduced. From
+   the outside, one should use core_type_no_attr. *)
+%inline core_type_no_attr:
+  alias_type
+    { $1 }
+;
+
+(* Alias types include:
+   - function types (see below);
+   - proper alias types:                  'a -> int as 'a
+ *)
+alias_type:
+    function_type
+      { $1 }
+  | mktyp(
+      ty = alias_type AS QUOTE tyvar = ident
+        { Ptyp_alias(ty, tyvar) }
+    )
+    { $1 }
+;
+
+(* Function types include:
+   - tuple types (see below);
+   - proper function types:               int -> int
+                                          foo: int -> int
+                                          ?foo: int -> int
+ *)
+function_type:
+  | ty = tuple_type
+    %prec MINUSGREATER
+      { ty }
+  | mktyp(
+      label = arg_label
+      domain = extra_rhs(tuple_type)
+      MINUSGREATER
+      codomain = function_type
+        { Ptyp_arrow(label, domain, codomain) }
+    )
+    { $1 }
+;
+%inline arg_label:
+  | label = optlabel
+      { Optional label }
+  | label = LIDENT COLON
+      { Labelled label }
+  | /* empty */
+      { Nolabel }
+;
+(* Tuple types include:
+   - atomic types (see below);
+   - proper tuple types:                  int * int * int list
+   A proper tuple type is a star-separated list of at least two atomic types.
+ *)
+tuple_type:
+  | ty = atomic_type
+    %prec below_HASH
+      { ty }
+  | mktyp(
+      tys = separated_nontrivial_llist(STAR, atomic_type)
+        { Ptyp_tuple tys }
+    )
+    { $1 }
+;
+
+(* Atomic types are the most basic level in the syntax of types.
+   Atomic types include:
+   - types between parentheses:           (int -> int)
+   - first-class module types:            (module S)
+   - type variables:                      'a
+   - applications of type constructors:   int, int list, int option list
+   - variant types:                       [`A]
+ *)
+atomic_type:
+  | LPAREN core_type RPAREN
+      { $2 }
+  | LPAREN MODULE ext_attributes package_type RPAREN
+      { wrap_typ_attrs ~loc:$sloc (reloc_typ ~loc:$sloc $4) $3 }
+  | mktyp( /* begin mktyp group */
+      QUOTE ident
+        { Ptyp_var $2 }
+    | UNDERSCORE
+        { Ptyp_any }
+    | tys = actual_type_parameters
+      tid = mkrhs(type_longident)
+        { Ptyp_constr(tid, tys) }
+    | LESS meth_list GREATER
+        { let (f, c) = $2 in Ptyp_object (f, c) }
+    | LESS GREATER
+        { Ptyp_object ([], Closed) }
+    | tys = actual_type_parameters
+      HASH
+      cid = mkrhs(class_longident)
+        { Ptyp_class(cid, tys) }
+    | LBRACKET tag_field RBRACKET
+        (* not row_field; see CONFLICTS *)
+        { Ptyp_variant([$2], Closed, None) }
+    | LBRACKET BAR row_field_list RBRACKET
+        { Ptyp_variant($3, Closed, None) }
+    | LBRACKET row_field BAR row_field_list RBRACKET
+        { Ptyp_variant($2 :: $4, Closed, None) }
+    | LBRACKETGREATER BAR? row_field_list RBRACKET
+        { Ptyp_variant($3, Open, None) }
+    | LBRACKETGREATER RBRACKET
+        { Ptyp_variant([], Open, None) }
+    | LBRACKETLESS BAR? row_field_list RBRACKET
+        { Ptyp_variant($3, Closed, Some []) }
+    | LBRACKETLESS BAR? row_field_list GREATER name_tag_list RBRACKET
+        { Ptyp_variant($3, Closed, Some $5) }
+    | extension
+        { Ptyp_extension $1 }
+  )
+  { $1 } /* end mktyp group */
+;
+
+(* This is the syntax of the actual type parameters in an application of
+   a type constructor, such as int, int list, or (int, bool) Hashtbl.t.
+   We allow one of the following:
+   - zero parameters;
+   - one parameter:
+     an atomic type;
+     among other things, this can be an arbitrary type between parentheses;
+   - two or more parameters:
+     arbitrary types, between parentheses, separated with commas.
+ *)
+%inline actual_type_parameters:
+  | /* empty */
+      { [] }
+  | ty = atomic_type
+      { [ty] }
+  | LPAREN tys = separated_nontrivial_llist(COMMA, core_type) RPAREN
+      { tys }
+;
+
+%inline package_type:
+    mktyp(module_type
+      { Ptyp_package (package_type_of_module_type $1) })
+      { $1 }
+;
+%inline row_field_list:
+  separated_nonempty_llist(BAR, row_field)
+    { $1 }
+;
+row_field:
+    tag_field
+      { $1 }
+  | core_type
+      { Rf.inherit_ ~loc:(make_loc $sloc) $1 }
+;
+tag_field:
+    mkrhs(name_tag) OF opt_ampersand amper_type_list attributes
+      { let info = symbol_info $endpos in
+        let attrs = add_info_attrs info $5 in
+        Rf.tag ~loc:(make_loc $sloc) ~attrs $1 $3 $4 }
+  | mkrhs(name_tag) attributes
+      { let info = symbol_info $endpos in
+        let attrs = add_info_attrs info $2 in
+        Rf.tag ~loc:(make_loc $sloc) ~attrs $1 true [] }
+;
+opt_ampersand:
+    AMPERSAND                                   { true }
+  | /* empty */                                 { false }
+;
+%inline amper_type_list:
+  separated_nonempty_llist(AMPERSAND, core_type_no_attr)
+    { $1 }
+;
+%inline name_tag_list:
+  nonempty_llist(name_tag)
+    { $1 }
+;
+(* A method list (in an object type). *)
+meth_list:
+    head = field_semi         tail = meth_list
+  | head = inherit_field SEMI tail = meth_list
+      { let (f, c) = tail in (head :: f, c) }
+  | head = field_semi
+  | head = inherit_field SEMI
+      { [head], Closed }
+  | head = field
+  | head = inherit_field
+      { [head], Closed }
+  | DOTDOT
+      { [], Open }
+;
+%inline field:
+  mkrhs(label) COLON poly_type_no_attr attributes
+    { let info = symbol_info $endpos in
+      let attrs = add_info_attrs info $4 in
+      Of.tag ~loc:(make_loc $sloc) ~attrs $1 $3 }
+;
+
+%inline field_semi:
+  mkrhs(label) COLON poly_type_no_attr attributes SEMI attributes
+    { let info =
+        match rhs_info $endpos($4) with
+        | Some _ as info_before_semi -> info_before_semi
+        | None -> symbol_info $endpos
+      in
+      let attrs = add_info_attrs info ($4 @ $6) in
+      Of.tag ~loc:(make_loc $sloc) ~attrs $1 $3 }
+;
+
+%inline inherit_field:
+  ty = atomic_type
+    { Of.inherit_ ~loc:(make_loc $sloc) ty }
+;
+
+%inline label:
+    LIDENT                                      { $1 }
+;
+
+/* Constants */
+
+constant:
+  | INT          { let (n, m) = $1 in Pconst_integer (n, m) }
+  | CHAR         { Pconst_char $1 }
+  | STRING       { let (s, d) = $1 in Pconst_string (s, d) }
+  | FLOAT        { let (f, m) = $1 in Pconst_float (f, m) }
+;
+signed_constant:
+    constant     { $1 }
+  | MINUS INT    { let (n, m) = $2 in Pconst_integer("-" ^ n, m) }
+  | MINUS FLOAT  { let (f, m) = $2 in Pconst_float("-" ^ f, m) }
+  | PLUS INT     { let (n, m) = $2 in Pconst_integer (n, m) }
+  | PLUS FLOAT   { let (f, m) = $2 in Pconst_float(f, m) }
+;
+
+/* Identifiers and long identifiers */
+
+ident:
+    UIDENT                    { $1 }
+  | LIDENT                    { $1 }
+;
+val_ident:
+    LIDENT                    { $1 }
+  | LPAREN operator RPAREN    { $2 }
+  (*
+  | LPAREN operator error     { unclosed "(" $loc($1) ")" $loc($3) }
+  | LPAREN error              { expecting $loc($2) "operator" }
+  | LPAREN MODULE error       { expecting $loc($3) "module-expr" }
+  *)
+;
+operator:
+    PREFIXOP                                    { $1 }
+  | LETOP                                       { $1 }
+  | ANDOP                                       { $1 }
+  | DOTOP LPAREN index_mod RPAREN               { "."^ $1 ^"(" ^ $3 ^ ")" }
+  | DOTOP LPAREN index_mod RPAREN LESSMINUS     { "."^ $1 ^ "(" ^ $3 ^ ")<-" }
+  | DOTOP LBRACKET index_mod RBRACKET           { "."^ $1 ^"[" ^ $3 ^ "]" }
+  | DOTOP LBRACKET index_mod RBRACKET LESSMINUS { "."^ $1 ^ "[" ^ $3 ^ "]<-" }
+  | DOTOP LBRACE index_mod RBRACE               { "."^ $1 ^"{" ^ $3 ^ "}" }
+  | DOTOP LBRACE index_mod RBRACE LESSMINUS     { "."^ $1 ^ "{" ^ $3 ^ "}<-" }
+  | HASHOP                                      { $1 }
+  | BANG                                        { "!" }
+  | infix_operator                              { $1 }
+;
+%inline infix_operator:
+  | op = INFIXOP0 { op }
+  | op = INFIXOP1 { op }
+  | op = INFIXOP2 { op }
+  | op = INFIXOP3 { op }
+  | op = INFIXOP4 { op }
+  | PLUS           {"+"}
+  | PLUSDOT       {"+."}
+  | PLUSEQ        {"+="}
+  | MINUS          {"-"}
+  | MINUSDOT      {"-."}
+  | STAR           {"*"}
+  | PERCENT        {"%"}
+  | EQUAL          {"="}
+  | LESS           {"<"}
+  | GREATER        {">"}
+  | OR            {"or"}
+  | BARBAR        {"||"}
+  | AMPERSAND      {"&"}
+  | AMPERAMPER    {"&&"}
+  | COLONEQUAL    {":="}
+;
+index_mod:
+| { "" }
+| SEMI DOTDOT { ";.." }
+;
+constr_ident:
+    UIDENT                                      { $1 }
+  | LBRACKET RBRACKET                           { "[]" }
+  | LPAREN RPAREN                               { "()" }
+  | LPAREN COLONCOLON RPAREN                    { "::" }
+  | FALSE                                       { "false" }
+  | TRUE                                        { "true" }
+;
+
+val_longident:
+    val_ident                                   { Lident $1 }
+  | mod_longident DOT val_ident                 { Ldot($1, $3) }
+;
+constr_longident:
+    mod_longident       %prec below_DOT         { $1 }
+  | mod_longident DOT LPAREN COLONCOLON RPAREN  { Ldot($1,"::") }
+  | LBRACKET RBRACKET                           { Lident "[]" }
+  | LPAREN RPAREN                               { Lident "()" }
+  | LPAREN COLONCOLON RPAREN                    { Lident "::" }
+  | FALSE                                       { Lident "false" }
+  | TRUE                                        { Lident "true" }
+;
+label_longident:
+    LIDENT                                      { Lident $1 }
+  | mod_longident DOT LIDENT                    { Ldot($1, $3) }
+;
+type_longident:
+    LIDENT                                      { Lident $1 }
+  | mod_ext_longident DOT LIDENT                { Ldot($1, $3) }
+;
+mod_longident:
+    UIDENT                                      { Lident $1 }
+  | mod_longident DOT UIDENT                    { Ldot($1, $3) }
+;
+mod_ext_longident:
+    UIDENT                                      { Lident $1 }
+  | mod_ext_longident DOT UIDENT                { Ldot($1, $3) }
+  | mod_ext_longident LPAREN mod_ext_longident RPAREN
+      { lapply ~loc:$sloc $1 $3 }
+  (*
+  | mod_ext_longident LPAREN error
+      { expecting $loc($3) "module path" }
+  *)
+;
+mty_longident:
+    ident                                       { Lident $1 }
+  | mod_ext_longident DOT ident                 { Ldot($1, $3) }
+;
+clty_longident:
+    LIDENT                                      { Lident $1 }
+  | mod_ext_longident DOT LIDENT                { Ldot($1, $3) }
+;
+class_longident:
+    LIDENT                                      { Lident $1 }
+  | mod_longident DOT LIDENT                    { Ldot($1, $3) }
+;
+
+/* Toplevel directives */
+
+toplevel_directive:
+  HASH dir = mkrhs(ident)
+  arg = ioption(mk_directive_arg(toplevel_directive_argument))
+    { mk_directive ~loc:$sloc dir arg }
+;
+
+%inline toplevel_directive_argument:
+  | STRING        { let (s, _) = $1 in Pdir_string s }
+  | INT           { let (n, m) = $1 in Pdir_int (n ,m) }
+  | val_longident { Pdir_ident $1 }
+  | mod_longident { Pdir_ident $1 }
+  | FALSE         { Pdir_bool false }
+  | TRUE          { Pdir_bool true }
+;
+
+/* Miscellaneous */
+
+(* The symbol epsilon can be used instead of an /* empty */ comment. *)
+%inline epsilon:
+  /* empty */
+    { () }
+;
+
+%inline raw_string:
+  s = STRING
+    { fst s }
+;
+
+name_tag:
+    BACKQUOTE ident                             { $2 }
+;
+rec_flag:
+    /* empty */                                 { Nonrecursive }
+  | REC                                         { Recursive }
+;
+%inline nonrec_flag:
+    /* empty */                                 { Recursive }
+  | NONREC                                      { Nonrecursive }
+;
+%inline no_nonrec_flag:
+    /* empty */ { Recursive }
+  | NONREC      { not_expecting $loc "nonrec flag"; Recursive }
+;
+direction_flag:
+    TO                                          { Upto }
+  | DOWNTO                                      { Downto }
+;
+private_flag:
+  inline_private_flag
+    { $1 }
+;
+%inline inline_private_flag:
+    /* empty */                                 { Public }
+  | PRIVATE                                     { Private }
+;
+mutable_flag:
+    /* empty */                                 { Immutable }
+  | MUTABLE                                     { Mutable }
+;
+virtual_flag:
+    /* empty */                                 { Concrete }
+  | VIRTUAL                                     { Virtual }
+;
+mutable_virtual_flags:
+    /* empty */
+      { Immutable, Concrete }
+  | MUTABLE
+      { Mutable, Concrete }
+  | VIRTUAL
+      { Immutable, Virtual }
+  | MUTABLE VIRTUAL
+  | VIRTUAL MUTABLE
+      { Mutable, Virtual }
+;
+private_virtual_flags:
+    /* empty */  { Public, Concrete }
+  | PRIVATE { Private, Concrete }
+  | VIRTUAL { Public, Virtual }
+  | PRIVATE VIRTUAL { Private, Virtual }
+  | VIRTUAL PRIVATE { Private, Virtual }
+;
+(* This nonterminal symbol indicates the definite presence of a VIRTUAL
+   keyword and the possible presence of a MUTABLE keyword. *)
+virtual_with_mutable_flag:
+  | VIRTUAL { Immutable }
+  | MUTABLE VIRTUAL { Mutable }
+  | VIRTUAL MUTABLE { Mutable }
+;
+(* This nonterminal symbol indicates the definite presence of a VIRTUAL
+   keyword and the possible presence of a PRIVATE keyword. *)
+virtual_with_private_flag:
+  | VIRTUAL { Public }
+  | PRIVATE VIRTUAL { Private }
+  | VIRTUAL PRIVATE { Private }
+;
+%inline no_override_flag:
+    /* empty */                                 { Fresh }
+;
+%inline override_flag:
+    /* empty */                                 { Fresh }
+  | BANG                                        { Override }
+;
+subtractive:
+  | MINUS                                       { "-" }
+  | MINUSDOT                                    { "-." }
+;
+additive:
+  | PLUS                                        { "+" }
+  | PLUSDOT                                     { "+." }
+;
+optlabel:
+   | OPTLABEL                                   { $1 }
+   | QUESTION LIDENT COLON                      { $2 }
+;
+
+/* Attributes and extensions */
+
+single_attr_id:
+    LIDENT { $1 }
+  | UIDENT { $1 }
+  | AND { "and" }
+  | AS { "as" }
+  | ASSERT { "assert" }
+  | BEGIN { "begin" }
+  | CLASS { "class" }
+  | CONSTRAINT { "constraint" }
+  | DO { "do" }
+  | DONE { "done" }
+  | DOWNTO { "downto" }
+  | ELSE { "else" }
+  | END { "end" }
+  | EXCEPTION { "exception" }
+  | EXTERNAL { "external" }
+  | FALSE { "false" }
+  | FOR { "for" }
+  | FUN { "fun" }
+  | FUNCTION { "function" }
+  | FUNCTOR { "functor" }
+  | IF { "if" }
+  | IN { "in" }
+  | INCLUDE { "include" }
+  | INHERIT { "inherit" }
+  | INITIALIZER { "initializer" }
+  | LAZY { "lazy" }
+  | LET { "let" }
+  | MATCH { "match" }
+  | METHOD { "method" }
+  | MODULE { "module" }
+  | MUTABLE { "mutable" }
+  | NEW { "new" }
+  | NONREC { "nonrec" }
+  | OBJECT { "object" }
+  | OF { "of" }
+  | OPEN { "open" }
+  | OR { "or" }
+  | PRIVATE { "private" }
+  | REC { "rec" }
+  | SIG { "sig" }
+  | STRUCT { "struct" }
+  | THEN { "then" }
+  | TO { "to" }
+  | TRUE { "true" }
+  | TRY { "try" }
+  | TYPE { "type" }
+  | VAL { "val" }
+  | VIRTUAL { "virtual" }
+  | WHEN { "when" }
+  | WHILE { "while" }
+  | WITH { "with" }
+/* mod/land/lor/lxor/lsl/lsr/asr are not supported for now */
+;
+
+attr_id:
+  mkloc(
+      single_attr_id { $1 }
+    | single_attr_id DOT attr_id { $1 ^ "." ^ $3.txt }
+  ) { $1 }
+;
+attribute:
+  LBRACKETAT attr_id payload RBRACKET
+    { Attr.mk ~loc:(make_loc $sloc) $2 $3 }
+;
+post_item_attribute:
+  LBRACKETATAT attr_id payload RBRACKET
+    { Attr.mk ~loc:(make_loc $sloc) $2 $3 }
+;
+floating_attribute:
+  LBRACKETATATAT attr_id payload RBRACKET
+    { mark_symbol_docs $sloc;
+      Attr.mk ~loc:(make_loc $sloc) $2 $3 }
+;
+%inline post_item_attributes:
+  post_item_attribute*
+    { $1 }
+;
+%inline attributes:
+  attribute*
+    { $1 }
+;
+ext:
+  | /* empty */     { None }
+  | PERCENT attr_id { Some $2 }
+;
+%inline no_ext:
+  | /* empty */     { None }
+  | PERCENT attr_id { not_expecting $loc "extension"; None }
+;
+%inline ext_attributes:
+  ext attributes    { $1, $2 }
+;
+extension:
+  LBRACKETPERCENT attr_id payload RBRACKET { ($2, $3) }
+;
+item_extension:
+  LBRACKETPERCENTPERCENT attr_id payload RBRACKET { ($2, $3) }
+;
+payload:
+    structure { PStr $1 }
+  | COLON signature { PSig $2 }
+  | COLON core_type { PTyp $2 }
+  | QUESTION pattern { PPat ($2, None) }
+  | QUESTION pattern WHEN seq_expr { PPat ($2, Some $4) }
+;
+
+%public simple_expr:
+| DOTLESS expr GREATERDOT
+    { Fake.Meta.code $startpos $endpos $2 }
+| DOTTILDE simple_expr %prec prec_escape
+    { Fake.Meta.uncode $startpos $endpos $2 }
+;
+
+(* Lwt *)
+%public structure_item:
+| lwt_bindings
+    { val_of_lwt_bindings ~loc:$loc $1 }
+
+lwt_binding:
+    LET_LWT ext_attributes rec_flag let_binding_body post_item_attributes
+      { let (ext, attr) = $2 in
+        mklbs ~loc:$loc ext $3 (mklb ~loc:$loc($4) true $4 (attr@$5)) }
+;
+lwt_bindings:
+    lwt_binding                                 { $1 }
+  | lwt_bindings and_let_binding                { addlb $1 $2 }
+;
+
+%public expr:
+| lwt_bindings IN seq_expr
+    { expr_of_lwt_bindings ~loc:$loc $1 (merloc $endpos($2) $3) }
+| MATCH_LWT ext_attributes seq_expr WITH match_cases
+    { let expr = mkexp_attrs ~loc:$loc
+          (Pexp_match(Fake.app Fake.Lwt.un_lwt $3, List.rev $5)) $2 in
+      Fake.app Fake.Lwt.in_lwt expr }
+| TRY_LWT ext_attributes seq_expr %prec below_WITH
+    { reloc_exp ~loc:$loc (Fake.app Fake.Lwt.in_lwt $3) }
+| TRY_LWT ext_attributes seq_expr WITH match_cases
+    { mkexp_attrs ~loc:$loc
+        (Pexp_try(Fake.app Fake.Lwt.in_lwt $3, List.rev $5)) $2 }
+| TRY_LWT ext_attributes seq_expr FINALLY_LWT seq_expr
+    { Fake.app (Fake.app Fake.Lwt.finally_ $3) $5 }
+| TRY_LWT ext_attributes seq_expr WITH match_cases FINALLY_LWT seq_expr
+    { let expr = mkexp_attrs ~loc:$loc
+        (Pexp_try (Fake.app Fake.Lwt.in_lwt $3, List.rev $5)) $2 in
+      Fake.app (Fake.app Fake.Lwt.finally_ expr) $7 }
+| WHILE_LWT ext_attributes seq_expr DO seq_expr DONE
+  { let expr = Pexp_while ($3, Fake.(app Lwt.un_lwt $5)) in
+    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:$loc expr $2)) }
+| FOR_LWT ext_attributes pattern EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
+    { let expr = Pexp_for ($3, $5, $7, $6, Fake.(app Lwt.un_lwt $9)) in
+      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:$loc expr $2)) }
+| FOR_LWT ext_attributes pattern IN seq_expr DO seq_expr DONE
+    { mkexp_attrs ~loc:$loc
+          (Pexp_let (Nonrecursive, [Vb.mk $3 (Fake.(app Lwt.un_stream $5))],
+             Fake.(app Lwt.unit_lwt $7)))
+          $2
+    }
+;
+
+%%
diff --git a/src/ocaml/preprocess/410+multicore/parser_recover.ml b/src/ocaml/preprocess/410+multicore/parser_recover.ml
new file mode 100644
index 00000000..83f9baa1
--- /dev/null
+++ b/src/ocaml/preprocess/410+multicore/parser_recover.ml
@@ -0,0 +1,3401 @@
+open Parser_raw
+
+module Default = struct
+
+  open Parsetree
+  open Ast_helper
+
+  let default_loc = ref Location.none
+
+  let default_expr () =
+    let id = Location.mkloc "merlin.hole" !default_loc in
+    Exp.mk ~loc:!default_loc (Pexp_extension (id, PStr []))
+
+  let default_pattern () = Pat.any ~loc:!default_loc ()
+
+  let default_module_expr () = Mod.structure ~loc:!default_loc[]
+  let default_module_type () = Mty.signature ~loc:!default_loc[]
+
+  let value (type a) : a MenhirInterpreter.symbol -> a = function
+    | MenhirInterpreter.T MenhirInterpreter.T_error -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_WITH -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_WHILE_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_WHILE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_WHEN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_VIRTUAL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_VAL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_UNDERSCORE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_UIDENT -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_TYPE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_TRY_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_TRY -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_TRUE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_TO -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_TILDE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_THEN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_STRUCT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_STRING -> ("", None)
+    | MenhirInterpreter.T MenhirInterpreter.T_STAR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_SIG -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_SEMISEMI -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_SEMI -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_RPAREN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_REC -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_RBRACKET -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_RBRACE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_QUOTE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_QUESTIONQUESTION -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_QUESTION -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_PRIVATE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_PREFIXOP -> "!"
+    | MenhirInterpreter.T MenhirInterpreter.T_PLUSEQ -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_PLUSDOT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_PLUS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_PERCENT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_OR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_OPTLABEL -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_OPEN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_OF -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_OBJECT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_NONREC -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_NEW -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MUTABLE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MODULE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MINUSGREATER -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MINUSDOT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MINUS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_METHOD -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MATCH_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_MATCH -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LPAREN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LIDENT -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_LET_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LETOP -> raise Not_found
+    | MenhirInterpreter.T MenhirInterpreter.T_LET -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LESSMINUS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LESS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENTPERCENT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETPERCENT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETLESS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETGREATER -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETBAR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATATAT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETATAT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKETAT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACKET -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACELESS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LBRACE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LAZY -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_LABEL -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INT -> ("0",None)
+    | MenhirInterpreter.T MenhirInterpreter.T_INITIALIZER -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_INHERIT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP4 -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP3 -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP2 -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP1 -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INFIXOP0 -> "_"
+    | MenhirInterpreter.T MenhirInterpreter.T_INCLUDE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_IN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_IF -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_HASHOP -> ""
+    | MenhirInterpreter.T MenhirInterpreter.T_HASH -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACKET -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_GREATERRBRACE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_GREATERDOT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_GREATER -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FUNCTOR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FUNCTION -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FUN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FOR_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FOR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FLOAT -> ("0.",None)
+    | MenhirInterpreter.T MenhirInterpreter.T_FINALLY_LWT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_FALSE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_EXTERNAL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_EXCEPTION -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_EQUAL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_EOL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_EOF -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_END -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_ELSE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOWNTO -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOTTILDE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOTOP -> raise Not_found
+    | MenhirInterpreter.T MenhirInterpreter.T_DOTLESS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOTDOT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DONE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_DOCSTRING -> raise Not_found
+    | MenhirInterpreter.T MenhirInterpreter.T_DO -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_CONSTRAINT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_COMMENT -> ("", Location.none)
+    | MenhirInterpreter.T MenhirInterpreter.T_COMMA -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_COLONGREATER -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_COLONEQUAL -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_COLONCOLON -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_COLON -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_CLASS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_CHAR -> '_'
+    | MenhirInterpreter.T MenhirInterpreter.T_BEGIN -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_BARRBRACKET -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_BARBAR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_BAR -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_BANG -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_BACKQUOTE -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_ASSERT -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_AS -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_ANDOP -> raise Not_found
+    | MenhirInterpreter.T MenhirInterpreter.T_AND -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_AMPERSAND -> ()
+    | MenhirInterpreter.T MenhirInterpreter.T_AMPERAMPER -> ()
+    | MenhirInterpreter.N MenhirInterpreter.N_with_type_binder -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_with_constraint -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_virtual_with_private_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_virtual_with_mutable_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_virtual_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_value_description -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_value -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_val_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_val_ident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_use_file -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_variance -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_variable -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_parameters -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_parameter -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_kind -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_type_constraint -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_tuple_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_toplevel_phrase -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_toplevel_directive -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_tag_field -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_subtractive -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_structure_item -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_structure -> []
+    | MenhirInterpreter.N MenhirInterpreter.N_strict_binding -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_str_exception_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_single_attr_id -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_simple_pattern_not_ident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_simple_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_simple_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_simple_delimited_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_signed_constant -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_signature_item -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_signature -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_sig_exception_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_seq_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_pattern_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_separated_or_terminated_nonempty_list_SEMI_expr_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_row_field -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_STAR_atomic_type_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_expr_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nontrivial_llist_COMMA_core_type_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_STAR_atomic_type_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_type_parameter_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_COMMA_core_type_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_BAR_row_field_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AND_with_constraint_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_typevar_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_name_tag_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_labeled_simple_expr_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_nonempty_llist_functor_arg_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_llist_preceded_CONSTRAINT_constrain__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_declaration_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_extension_constructor_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_reversed_bar_llist_constructor_declaration_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_record_expr_content -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_rec_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_private_virtual_flags -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_private_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_primitive_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_post_item_attribute -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_no_attr_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_possibly_poly_core_type_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_payload -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern_var -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern_no_exn -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern_gen -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_no_exn_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern_comma_list_pattern_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_pattern -> default_pattern ()
+    | MenhirInterpreter.N MenhirInterpreter.N_parse_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_parse_expression -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_parse_core_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_paren_module_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_optlabel -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_type_constraint_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_seq_expr__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_pattern__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_module_type__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_EQUAL_expr__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_COLON_core_type__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_preceded_AS_mkrhs_LIDENT___ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_SEMI_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_option_BAR_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_opt_ampersand -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_operator -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_open_description -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_open_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_nonempty_type_kind -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_raw_string_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_nonempty_list_mkrhs_LIDENT__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_name_tag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_mutable_virtual_flags -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_mutable_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_mty_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_module_type_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_module_type -> default_module_type ()
+    | MenhirInterpreter.N MenhirInterpreter.N_module_subst -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_module_name -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_module_expr -> default_module_expr ()
+    | MenhirInterpreter.N MenhirInterpreter.N_module_declaration_body -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_module_binding_body -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_mod_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_mod_ext_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_method_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_meth_list -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_match_case -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_lwt_bindings -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_lwt_binding -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_listx_SEMI_record_pat_field_UNDERSCORE_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_use_file_element_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_text_str_structure_item__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_text_cstr_class_field__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_text_csig_class_sig_field__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_structure_element_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_signature_element_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_post_item_attribute_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_subst_kind__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_generic_and_type_declaration_type_kind__ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_attribute_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_and_module_declaration_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_and_module_binding_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_type_declaration_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_description_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_list_and_class_declaration_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_letop_bindings -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_letop_binding_body -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_let_pattern -> default_pattern ()
+    | MenhirInterpreter.N MenhirInterpreter.N_let_bindings_no_ext_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_let_bindings_ext_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_let_binding_body -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_labeled_simple_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_label_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_label_let_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_label_declarations -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_label_declaration_semi -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_label_declaration -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_item_extension -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_interface -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_index_mod -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_implementation -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_ident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_nonrec_flag_type_kind_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_epsilon_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_generic_constructor_declaration_BAR_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_generalized_constructor_arguments -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_functor_args -> []
+    | MenhirInterpreter.N MenhirInterpreter.N_functor_arg -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_function_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_fun_def -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_fun_binding -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_formal_class_parameters -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_floating_attribute -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_epsilon_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_extension_constructor_rebind_BAR_ -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_extension -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_ext -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_expr -> default_expr ()
+    | MenhirInterpreter.N MenhirInterpreter.N_direction_flag -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_core_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constructor_declarations -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constructor_arguments -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constrain_field -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constr_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constr_ident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_constant -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_clty_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_type_declarations -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_simple_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_signature -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_sig_field -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_self_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_self_pattern -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_longident -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_fun_def -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_fun_binding -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_field -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_class_expr -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_attribute -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_attr_id -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_atomic_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_and_let_binding -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_alias_type -> raise Not_found
+    | MenhirInterpreter.N MenhirInterpreter.N_additive -> raise Not_found
+end
+
+let default_value = Default.value
+
+open MenhirInterpreter
+
+type action =
+  | Abort
+  | R of int
+  | S : 'a symbol -> action
+  | Sub of action list
+
+type decision =
+  | Nothing
+  | One of action list
+  | Select of (int -> action list)
+
+let depth =
+  [|0;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;2;3;2;2;1;2;1;2;3;1;1;2;3;1;2;3;1;1;1;1;1;2;3;1;1;2;3;3;4;1;2;1;1;2;1;1;1;2;1;2;3;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;2;1;2;3;4;5;2;3;4;5;2;3;4;5;1;1;1;1;1;1;2;3;4;5;1;1;1;1;1;2;1;2;3;1;1;2;3;4;1;1;2;1;2;3;1;4;1;1;1;1;1;2;2;1;2;3;2;3;5;6;1;1;1;1;1;2;1;2;1;1;1;2;1;2;1;1;2;1;2;2;1;1;2;2;1;2;1;1;2;1;2;1;2;3;4;2;3;2;3;1;3;2;3;2;1;2;3;4;1;2;3;3;1;1;3;4;2;3;1;2;1;3;4;2;1;3;2;3;4;5;1;2;1;2;1;2;3;2;3;4;5;3;4;3;4;4;5;6;2;1;1;2;3;2;3;3;4;5;6;1;7;1;2;3;1;2;2;3;3;4;5;2;3;2;3;4;5;4;2;3;2;3;2;3;1;2;2;1;1;2;3;4;5;6;7;3;4;1;2;1;1;2;1;1;1;1;2;1;1;2;3;1;2;3;2;1;1;2;3;4;2;3;4;1;1;2;1;1;2;2;1;2;3;1;2;3;1;2;1;2;3;4;5;6;4;4;3;4;5;3;3;1;7;8;9;1;2;1;2;3;4;5;6;7;8;2;3;4;5;1;2;9;6;7;1;8;1;2;3;1;2;3;1;2;1;1;2;3;4;5;4;5;9;10;2;2;1;1;1;1;1;2;3;4;1;4;5;6;7;8;5;6;7;8;9;1;1;1;1;2;3;4;1;2;1;2;3;1;1;1;2;2;1;2;2;1;1;2;3;4;1;1;5;6;6;1;2;3;4;1;2;3;1;1;1;2;3;1;2;3;1;2;1;2;3;1;4;1;1;1;1;1;2;3;2;3;1;1;2;2;1;1;2;3;1;1;2;1;1;1;1;4;1;1;2;3;1;1;1;2;3;4;1;2;3;1;1;1;2;3;2;3;2;1;2;1;1;2;4;4;5;2;3;2;3;2;3;3;4;2;3;1;2;3;3;1;2;3;4;5;1;6;5;2;2;3;1;1;2;1;2;3;3;4;2;1;2;3;1;1;1;1;1;2;1;2;3;3;4;5;1;2;1;2;1;2;3;4;1;2;1;1;2;3;4;5;1;2;1;2;2;3;1;1;2;1;2;3;4;1;5;2;1;2;3;1;2;4;5;4;5;6;1;2;3;4;2;3;4;1;3;2;3;2;3;2;1;2;3;3;1;1;1;2;3;4;5;3;4;1;5;2;3;2;3;3;4;5;2;2;1;1;6;7;1;1;1;1;1;1;1;1;1;1;2;3;1;2;3;1;2;3;1;2;3;1;1;2;1;2;3;4;5;6;7;1;1;2;3;4;5;1;2;3;4;5;1;1;1;2;1;1;2;3;4;1;1;4;5;6;7;8;9;10;1;1;1;1;2;3;4;1;2;3;4;2;3;2;3;1;1;1;2;1;2;1;2;2;3;2;3;4;5;1;2;1;2;1;1;1;1;2;3;1;1;2;3;1;2;3;2;3;2;1;2;1;2;2;3;4;5;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;2;3;1;2;1;2;3;4;5;1;2;3;2;3;2;3;2;3;2;3;2;1;1;2;3;3;4;2;2;3;3;4;5;3;4;5;3;4;5;6;7;1;2;3;5;6;7;5;6;7;3;1;2;2;3;4;5;6;7;3;4;5;6;7;3;4;5;6;7;2;3;4;5;6;7;3;4;5;6;7;3;4;5;6;7;3;4;5;6;7;8;9;5;6;7;8;9;5;6;7;8;9;3;4;5;1;2;2;1;2;4;5;3;4;5;3;4;5;5;1;2;3;2;3;4;2;3;1;1;4;5;3;4;4;5;3;4;4;5;3;4;5;3;1;2;3;1;1;2;1;2;3;4;1;2;3;4;5;1;4;5;1;2;3;3;6;1;1;7;8;9;10;11;6;7;8;9;5;6;7;8;9;10;11;2;1;2;3;4;1;2;3;4;1;1;2;5;1;2;3;3;4;5;8;4;5;3;4;5;2;3;3;2;4;2;3;1;4;5;6;7;8;4;4;5;4;2;3;2;2;3;2;2;3;4;2;2;3;2;3;2;2;3;8;3;4;5;6;7;2;3;4;5;1;2;1;2;3;4;6;7;8;1;2;2;3;4;5;6;7;8;9;2;3;4;5;6;2;1;2;3;1;1;2;5;2;2;4;5;2;2;3;4;5;6;7;8;3;4;5;6;7;2;3;4;2;5;6;3;4;5;6;4;5;6;4;5;5;6;7;5;6;7;7;8;9;5;7;8;2;3;3;4;5;4;1;1;2;3;4;5;6;5;6;7;2;3;1;1;2;1;2;2;3;4;5;2;3;4;5;4;5;6;1;1;2;3;4;5;6;7;8;9;10;11;1;2;3;6;7;8;1;5;2;3;1;1;2;1;2;2;3;4;5;2;3;4;5;6;7;8;9;10;5;6;7;4;1;2;1;2;3;4;1;2;3;4;5;1;2;6;7;2;3;4;5;6;7;1;2;3;4;5;6;8;4;5;6;1;2;1;2;3;4;5;1;2;3;4;5;6;7;1;2;8;9;1;2;3;4;5;6;7;8;5;6;7;1;1;1;2;3;4;5;6;2;3;4;5;1;2;3;4;5;6;7;4;5;6;7;8;1;2;3;4;5;6;7;9;4;5;6;7;1;2;5;6;1;2;1;2;3;4;5;1;2;3;4;1;2;3;4;1;5;1;2;3;6;7;8;1;2;1;2;3;3;1;2;1;2;1;2;3;4;5;6;7;1;2;1;2;1;2;3;4;5;6;7;1;2;1;1;2;3;4;5;6;1;2;3;1;2;3;4;2;3;1;1;1;7;2;3;4;5;6;3;4;1;2;1;2;3;3;4;4;5;1;2;1;1;2;9;10;1;2;3;4;5;6;7;8;9;11;2;3;4;5;6;7;1;2;3;4;1;1;1;2;1;2;3;1;2;3;1;4;1;3;5;8;9;1;2;3;4;5;6;7;8;9;10;1;1;1;1;1;1;1;2;1;2;1;1;2;3;4;5;6;7;8;2;1;1;2;3;4;5;6;7;8;9;2;1;1;2;2;1;2;1;2;3;4;5;6;1;1;2;3;1;2;3;4;1;2;3;1;1;2;3;4;5;6;7;2;3;4;5;6;1;2;3;4;1;2;1;2;1;2;1;1;2;1;3;2;2;3;2;3;7;3;4;5;6;2;3;4;5;2;3;3;4;5;4;1;2;5;6;2;3;4;5;1;2;3;4;4;5;1;2;1;1;2;2;1;2;3;4;1;2;7;8;1;2;3;4;5;6;7;8;9;1;1;1;1;1;1;1;1;1;2;1;1;2;1;2;1;1;1;1;2;3;3;4;1;1;1;3;4;5;6;3;4;5;6;2;3;4;5;2;3;4;2;3;4;10;6;7;8;9;10;2;1;1;4;5;6;7;8;9;5;6;7;8;9;3;4;5;6;6;7;3;4;2;2;3;4;5;6;6;7;8;2;3;3;4;4;5;6;4;5;6;7;8;5;6;4;5;6;7;3;4;3;4;5;6;7;1;2;1;0;1;2;1;0;1;1;2;0;1;2;1;0;1;2;1;0;1;2;3;3;3;3;3;3;2;1;1;1;2;1;2;1;2;3;1;2;0;1;1;1;2;2;2;3;4;2;1;1;2;3;4;1;2;|]
+
+let can_pop (type a) : a terminal -> bool = function
+  | T_WITH -> true
+  | T_WHILE_LWT -> true
+  | T_WHILE -> true
+  | T_WHEN -> true
+  | T_VIRTUAL -> true
+  | T_VAL -> true
+  | T_UNDERSCORE -> true
+  | T_TYPE -> true
+  | T_TRY_LWT -> true
+  | T_TRY -> true
+  | T_TRUE -> true
+  | T_TO -> true
+  | T_TILDE -> true
+  | T_THEN -> true
+  | T_STRUCT -> true
+  | T_STAR -> true
+  | T_SIG -> true
+  | T_SEMISEMI -> true
+  | T_SEMI -> true
+  | T_RPAREN -> true
+  | T_REC -> true
+  | T_RBRACKET -> true
+  | T_RBRACE -> true
+  | T_QUOTE -> true
+  | T_QUESTIONQUESTION -> true
+  | T_QUESTION -> true
+  | T_PRIVATE -> true
+  | T_PLUSEQ -> true
+  | T_PLUSDOT -> true
+  | T_PLUS -> true
+  | T_PERCENT -> true
+  | T_OR -> true
+  | T_OPEN -> true
+  | T_OF -> true
+  | T_OBJECT -> true
+  | T_NONREC -> true
+  | T_NEW -> true
+  | T_MUTABLE -> true
+  | T_MODULE -> true
+  | T_MINUSGREATER -> true
+  | T_MINUSDOT -> true
+  | T_MINUS -> true
+  | T_METHOD -> true
+  | T_MATCH_LWT -> true
+  | T_MATCH -> true
+  | T_LPAREN -> true
+  | T_LET_LWT -> true
+  | T_LET -> true
+  | T_LESSMINUS -> true
+  | T_LESS -> true
+  | T_LBRACKETPERCENTPERCENT -> true
+  | T_LBRACKETPERCENT -> true
+  | T_LBRACKETLESS -> true
+  | T_LBRACKETGREATER -> true
+  | T_LBRACKETBAR -> true
+  | T_LBRACKETATATAT -> true
+  | T_LBRACKETATAT -> true
+  | T_LBRACKETAT -> true
+  | T_LBRACKET -> true
+  | T_LBRACELESS -> true
+  | T_LBRACE -> true
+  | T_LAZY -> true
+  | T_INITIALIZER -> true
+  | T_INHERIT -> true
+  | T_INCLUDE -> true
+  | T_IN -> true
+  | T_IF -> true
+  | T_HASH -> true
+  | T_GREATERRBRACKET -> true
+  | T_GREATERRBRACE -> true
+  | T_GREATERDOT -> true
+  | T_GREATER -> true
+  | T_FUNCTOR -> true
+  | T_FUNCTION -> true
+  | T_FUN -> true
+  | T_FOR_LWT -> true
+  | T_FOR -> true
+  | T_FINALLY_LWT -> true
+  | T_FALSE -> true
+  | T_EXTERNAL -> true
+  | T_EXCEPTION -> true
+  | T_EQUAL -> true
+  | T_EOL -> true
+  | T_END -> true
+  | T_ELSE -> true
+  | T_DOWNTO -> true
+  | T_DOTTILDE -> true
+  | T_DOTLESS -> true
+  | T_DOTDOT -> true
+  | T_DOT -> true
+  | T_DONE -> true
+  | T_DO -> true
+  | T_CONSTRAINT -> true
+  | T_COMMA -> true
+  | T_COLONGREATER -> true
+  | T_COLONEQUAL -> true
+  | T_COLONCOLON -> true
+  | T_COLON -> true
+  | T_CLASS -> true
+  | T_BEGIN -> true
+  | T_BARRBRACKET -> true
+  | T_BARBAR -> true
+  | T_BAR -> true
+  | T_BANG -> true
+  | T_BACKQUOTE -> true
+  | T_ASSERT -> true
+  | T_AS -> true
+  | T_AND -> true
+  | T_AMPERSAND -> true
+  | T_AMPERAMPER -> true
+  | _ -> false
+
+let recover =
+  let r0 = [R 547] in
+  let r1 = S (N N_expr) :: r0 in
+  let r2 = [R 121] in
+  let r3 = S (T T_DONE) :: r2 in
+  let r4 = Sub (r1) :: r3 in
+  let r5 = S (T T_DO) :: r4 in
+  let r6 = Sub (r1) :: r5 in
+  let r7 = R 270 :: r6 in
+  let r8 = [R 644] in
+  let r9 = S (T T_AND) :: r8 in
+  let r10 = [R 32] in
+  let r11 = Sub (r9) :: r10 in
+  let r12 = [R 183] in
+  let r13 = [R 33] in
+  let r14 = [R 468] in
+  let r15 = S (N N_structure) :: r14 in
+  let r16 = [R 34] in
+  let r17 = S (T T_RBRACKET) :: r16 in
+  let r18 = Sub (r15) :: r17 in
+  let r19 = [R 136] in
+  let r20 = S (T T_DONE) :: r19 in
+  let r21 = Sub (r1) :: r20 in
+  let r22 = S (T T_DO) :: r21 in
+  let r23 = Sub (r1) :: r22 in
+  let r24 = R 270 :: r23 in
+  let r25 = [R 323] in
+  let r26 = [R 117] in
+  let r27 = Sub (r1) :: r26 in
+  let r28 = R 270 :: r27 in
+  let r29 = [R 303] in
+  let r30 = Sub (r1) :: r29 in
+  let r31 = S (T T_MINUSGREATER) :: r30 in
+  let r32 = S (N N_pattern) :: r31 in
+  let r33 = [R 512] in
+  let r34 = Sub (r32) :: r33 in
+  let r35 = [R 133] in
+  let r36 = Sub (r34) :: r35 in
+  let r37 = S (T T_WITH) :: r36 in
+  let r38 = Sub (r1) :: r37 in
+  let r39 = R 270 :: r38 in
+  let r40 = [R 612] in
+  let r41 = S (T T_QUESTIONQUESTION) :: r40 in
+  let r42 = [R 602] in
+  let r43 = [R 56] in
+  let r44 = S (T T_LIDENT) :: r43 in
+  let r45 = [R 595] in
+  let r46 = Sub (r44) :: r45 in
+  let r47 = R 270 :: r46 in
+  let r48 = [R 57] in
+  let r49 = S (T T_LIDENT) :: r48 in
+  let r50 = [R 324] in
+  let r51 = [R 271] in
+  let r52 = [R 582] in
+  let r53 = S (T T_RPAREN) :: r52 in
+  let r54 = [R 101] in
+  let r55 = [R 752] in
+  let r56 = [R 184] in
+  let r57 = S (T T_RBRACKET) :: r56 in
+  let r58 = Sub (r15) :: r57 in
+  let r59 = S (T T_LIDENT) :: r55 in
+  let r60 = [R 15] in
+  let r61 = S (T T_UNDERSCORE) :: r60 in
+  let r62 = [R 732] in
+  let r63 = Sub (r61) :: r62 in
+  let r64 = [R 196] in
+  let r65 = Sub (r63) :: r64 in
+  let r66 = [R 9] in
+  let r67 = Sub (r65) :: r66 in
+  let r68 = [R 111] in
+  let r69 = Sub (r67) :: r68 in
+  let r70 = [R 761] in
+  let r71 = R 276 :: r70 in
+  let r72 = Sub (r69) :: r71 in
+  let r73 = S (T T_COLON) :: r72 in
+  let r74 = Sub (r59) :: r73 in
+  let r75 = R 270 :: r74 in
+  let r76 = [R 412] in
+  let r77 = S (T T_AMPERAMPER) :: r76 in
+  let r78 = [R 753] in
+  let r79 = S (T T_RPAREN) :: r78 in
+  let r80 = Sub (r77) :: r79 in
+  let r81 = [R 386] in
+  let r82 = S (T T_RPAREN) :: r81 in
+  let r83 = R 216 :: r82 in
+  let r84 = [R 217] in
+  let r85 = [R 388] in
+  let r86 = S (T T_RBRACKET) :: r85 in
+  let r87 = [R 390] in
+  let r88 = S (T T_RBRACE) :: r87 in
+  let r89 = [R 320] in
+  let r90 = [R 214] in
+  let r91 = S (T T_LIDENT) :: r90 in
+  let r92 = [R 14] in
+  let r93 = Sub (r91) :: r92 in
+  let r94 = [R 435] in
+  let r95 = S (T T_COLON) :: r94 in
+  let r96 = [R 13] in
+  let r97 = S (T T_RPAREN) :: r96 in
+  let r98 = S (N N_module_type) :: r97 in
+  let r99 = R 270 :: r98 in
+  let r100 = R 182 :: r99 in
+  let r101 = [R 552] in
+  let r102 = R 278 :: r101 in
+  let r103 = [R 341] in
+  let r104 = S (T T_END) :: r103 in
+  let r105 = Sub (r102) :: r104 in
+  let r106 = [R 211] in
+  let r107 = R 276 :: r106 in
+  let r108 = R 502 :: r107 in
+  let r109 = R 737 :: r108 in
+  let r110 = S (T T_LIDENT) :: r109 in
+  let r111 = R 742 :: r110 in
+  let r112 = R 270 :: r111 in
+  let r113 = R 182 :: r112 in
+  let r114 = [R 739] in
+  let r115 = S (T T_LIDENT) :: r114 in
+  let r116 = [R 96] in
+  let r117 = S (T T_FALSE) :: r116 in
+  let r118 = [R 208] in
+  let r119 = R 270 :: r118 in
+  let r120 = R 203 :: r119 in
+  let r121 = Sub (r117) :: r120 in
+  let r122 = [R 499] in
+  let r123 = Sub (r121) :: r122 in
+  let r124 = [R 559] in
+  let r125 = R 276 :: r124 in
+  let r126 = Sub (r123) :: r125 in
+  let r127 = R 479 :: r126 in
+  let r128 = S (T T_PLUSEQ) :: r127 in
+  let r129 = Sub (r115) :: r128 in
+  let r130 = R 742 :: r129 in
+  let r131 = R 270 :: r130 in
+  let r132 = [R 212] in
+  let r133 = R 276 :: r132 in
+  let r134 = R 502 :: r133 in
+  let r135 = R 737 :: r134 in
+  let r136 = S (T T_LIDENT) :: r135 in
+  let r137 = R 742 :: r136 in
+  let r138 = [R 560] in
+  let r139 = R 276 :: r138 in
+  let r140 = Sub (r123) :: r139 in
+  let r141 = R 479 :: r140 in
+  let r142 = S (T T_PLUSEQ) :: r141 in
+  let r143 = Sub (r115) :: r142 in
+  let r144 = [R 746] in
+  let r145 = S (T T_UNDERSCORE) :: r144 in
+  let r146 = [R 741] in
+  let r147 = Sub (r145) :: r146 in
+  let r148 = R 747 :: r147 in
+  let r149 = [R 523] in
+  let r150 = Sub (r148) :: r149 in
+  let r151 = [R 744] in
+  let r152 = S (T T_RPAREN) :: r151 in
+  let r153 = [R 745] in
+  let r154 = [R 524] in
+  let r155 = [R 371] in
+  let r156 = S (T T_DOTDOT) :: r155 in
+  let r157 = [R 738] in
+  let r158 = [R 372] in
+  let r159 = [R 94] in
+  let r160 = [R 198] in
+  let r161 = Sub (r65) :: r160 in
+  let r162 = S (T T_MINUSGREATER) :: r161 in
+  let r163 = Sub (r63) :: r162 in
+  let r164 = [R 20] in
+  let r165 = [R 475] in
+  let r166 = Sub (r67) :: r165 in
+  let r167 = [R 310] in
+  let r168 = R 270 :: r167 in
+  let r169 = Sub (r166) :: r168 in
+  let r170 = [R 510] in
+  let r171 = [R 534] in
+  let r172 = Sub (r69) :: r171 in
+  let r173 = [R 519] in
+  let r174 = Sub (r172) :: r173 in
+  let r175 = [R 29] in
+  let r176 = S (T T_RBRACKET) :: r175 in
+  let r177 = Sub (r174) :: r176 in
+  let r178 = [R 28] in
+  let r179 = [R 27] in
+  let r180 = S (T T_RBRACKET) :: r179 in
+  let r181 = [R 360] in
+  let r182 = Sub (r91) :: r181 in
+  let r183 = S (T T_BACKQUOTE) :: r182 in
+  let r184 = [R 720] in
+  let r185 = R 270 :: r184 in
+  let r186 = Sub (r183) :: r185 in
+  let r187 = [R 24] in
+  let r188 = S (T T_RBRACKET) :: r187 in
+  let r189 = [R 21] in
+  let r190 = [R 25] in
+  let r191 = S (T T_RBRACKET) :: r190 in
+  let r192 = [R 199] in
+  let r193 = [R 531] in
+  let r194 = [R 740] in
+  let r195 = S (T T_LIDENT) :: r194 in
+  let r196 = S (T T_UIDENT) :: r89 in
+  let r197 = [R 322] in
+  let r198 = S (T T_RPAREN) :: r197 in
+  let r199 = [R 321] in
+  let r200 = [R 22] in
+  let r201 = [R 197] in
+  let r202 = Sub (r65) :: r201 in
+  let r203 = S (T T_MINUSGREATER) :: r202 in
+  let r204 = [R 532] in
+  let r205 = [R 520] in
+  let r206 = [R 515] in
+  let r207 = Sub (r67) :: r206 in
+  let r208 = [R 719] in
+  let r209 = R 270 :: r208 in
+  let r210 = Sub (r207) :: r209 in
+  let r211 = [R 516] in
+  let r212 = [R 10] in
+  let r213 = Sub (r91) :: r212 in
+  let r214 = [R 26] in
+  let r215 = S (T T_RBRACKET) :: r214 in
+  let r216 = Sub (r174) :: r215 in
+  let r217 = [R 508] in
+  let r218 = Sub (r183) :: r217 in
+  let r219 = [R 30] in
+  let r220 = S (T T_RBRACKET) :: r219 in
+  let r221 = [R 476] in
+  let r222 = Sub (r67) :: r221 in
+  let r223 = [R 511] in
+  let r224 = [R 308] in
+  let r225 = [R 19] in
+  let r226 = [R 95] in
+  let r227 = [R 18] in
+  let r228 = Sub (r115) :: r227 in
+  let r229 = [R 23] in
+  let r230 = [R 527] in
+  let r231 = [R 12] in
+  let r232 = [R 528] in
+  let r233 = [R 93] in
+  let r234 = [R 220] in
+  let r235 = R 270 :: r234 in
+  let r236 = Sub (r166) :: r235 in
+  let r237 = S (T T_COLON) :: r236 in
+  let r238 = S (T T_LIDENT) :: r237 in
+  let r239 = R 353 :: r238 in
+  let r240 = [R 222] in
+  let r241 = Sub (r239) :: r240 in
+  let r242 = [R 376] in
+  let r243 = S (T T_RBRACE) :: r242 in
+  let r244 = [R 221] in
+  let r245 = R 270 :: r244 in
+  let r246 = S (T T_SEMI) :: r245 in
+  let r247 = R 270 :: r246 in
+  let r248 = Sub (r166) :: r247 in
+  let r249 = S (T T_COLON) :: r248 in
+  let r250 = [R 207] in
+  let r251 = R 270 :: r250 in
+  let r252 = R 203 :: r251 in
+  let r253 = [R 106] in
+  let r254 = Sub (r61) :: r253 in
+  let r255 = [R 204] in
+  let r256 = [R 108] in
+  let r257 = S (T T_RBRACE) :: r256 in
+  let r258 = [R 107] in
+  let r259 = Sub (r61) :: r258 in
+  let r260 = [R 206] in
+  let r261 = [R 205] in
+  let r262 = Sub (r61) :: r261 in
+  let r263 = Sub (r117) :: r252 in
+  let r264 = [R 375] in
+  let r265 = S (T T_RBRACE) :: r264 in
+  let r266 = [R 373] in
+  let r267 = [R 374] in
+  let r268 = [R 378] in
+  let r269 = S (T T_RBRACE) :: r268 in
+  let r270 = [R 377] in
+  let r271 = S (T T_RBRACE) :: r270 in
+  let r272 = [R 210] in
+  let r273 = R 276 :: r272 in
+  let r274 = R 502 :: r273 in
+  let r275 = [R 477] in
+  let r276 = S (T T_RBRACKET) :: r275 in
+  let r277 = Sub (r15) :: r276 in
+  let r278 = [R 493] in
+  let r279 = Sub (r121) :: r278 in
+  let r280 = [R 707] in
+  let r281 = R 276 :: r280 in
+  let r282 = Sub (r279) :: r281 in
+  let r283 = R 479 :: r282 in
+  let r284 = S (T T_PLUSEQ) :: r283 in
+  let r285 = Sub (r115) :: r284 in
+  let r286 = R 742 :: r285 in
+  let r287 = R 270 :: r286 in
+  let r288 = [R 708] in
+  let r289 = R 276 :: r288 in
+  let r290 = Sub (r279) :: r289 in
+  let r291 = R 479 :: r290 in
+  let r292 = S (T T_PLUSEQ) :: r291 in
+  let r293 = Sub (r115) :: r292 in
+  let r294 = [R 503] in
+  let r295 = Sub (r69) :: r294 in
+  let r296 = S (T T_EQUAL) :: r295 in
+  let r297 = [R 277] in
+  let r298 = [R 103] in
+  let r299 = S (T T_FALSE) :: r298 in
+  let r300 = [R 185] in
+  let r301 = R 270 :: r300 in
+  let r302 = [R 102] in
+  let r303 = [R 100] in
+  let r304 = [R 99] in
+  let r305 = S (T T_RPAREN) :: r304 in
+  let r306 = S (T T_COLONCOLON) :: r305 in
+  let r307 = [R 186] in
+  let r308 = R 270 :: r307 in
+  let r309 = [R 282] in
+  let r310 = [R 379] in
+  let r311 = R 276 :: r310 in
+  let r312 = S (N N_module_expr) :: r311 in
+  let r313 = R 270 :: r312 in
+  let r314 = [R 380] in
+  let r315 = R 276 :: r314 in
+  let r316 = S (N N_module_expr) :: r315 in
+  let r317 = R 270 :: r316 in
+  let r318 = [R 330] in
+  let r319 = S (T T_END) :: r318 in
+  let r320 = S (N N_structure) :: r319 in
+  let r321 = [R 140] in
+  let r322 = S (T T_END) :: r321 in
+  let r323 = R 287 :: r322 in
+  let r324 = R 60 :: r323 in
+  let r325 = R 270 :: r324 in
+  let r326 = [R 58] in
+  let r327 = S (T T_RPAREN) :: r326 in
+  let r328 = [R 630] in
+  let r329 = [R 574] in
+  let r330 = [R 572] in
+  let r331 = [R 626] in
+  let r332 = S (T T_RPAREN) :: r331 in
+  let r333 = [R 339] in
+  let r334 = S (T T_UNDERSCORE) :: r333 in
+  let r335 = [R 628] in
+  let r336 = S (T T_RPAREN) :: r335 in
+  let r337 = Sub (r334) :: r336 in
+  let r338 = R 270 :: r337 in
+  let r339 = [R 629] in
+  let r340 = S (T T_RPAREN) :: r339 in
+  let r341 = [R 343] in
+  let r342 = S (N N_module_expr) :: r341 in
+  let r343 = R 270 :: r342 in
+  let r344 = S (T T_OF) :: r343 in
+  let r345 = [R 437] in
+  let r346 = S (T T_RPAREN) :: r345 in
+  let r347 = [R 438] in
+  let r348 = S (T T_RPAREN) :: r347 in
+  let r349 = S (N N_expr) :: r348 in
+  let r350 = [R 116] in
+  let r351 = Sub (r34) :: r350 in
+  let r352 = S (T T_WITH) :: r351 in
+  let r353 = Sub (r1) :: r352 in
+  let r354 = R 270 :: r353 in
+  let r355 = [R 132] in
+  let r356 = Sub (r34) :: r355 in
+  let r357 = S (T T_WITH) :: r356 in
+  let r358 = Sub (r1) :: r357 in
+  let r359 = R 270 :: r358 in
+  let r360 = [R 170] in
+  let r361 = [R 457] in
+  let r362 = S (N N_pattern) :: r361 in
+  let r363 = Sub (r299) :: r362 in
+  let r364 = [R 462] in
+  let r365 = Sub (r363) :: r364 in
+  let r366 = [R 246] in
+  let r367 = Sub (r1) :: r366 in
+  let r368 = S (T T_EQUAL) :: r367 in
+  let r369 = Sub (r365) :: r368 in
+  let r370 = [R 300] in
+  let r371 = R 276 :: r370 in
+  let r372 = Sub (r369) :: r371 in
+  let r373 = R 486 :: r372 in
+  let r374 = R 270 :: r373 in
+  let r375 = [R 579] in
+  let r376 = [R 541] in
+  let r377 = S (N N_pattern) :: r376 in
+  let r378 = [R 577] in
+  let r379 = S (T T_RBRACKET) :: r378 in
+  let r380 = [R 227] in
+  let r381 = S (T T_LIDENT) :: r380 in
+  let r382 = [R 296] in
+  let r383 = R 428 :: r382 in
+  let r384 = R 422 :: r383 in
+  let r385 = Sub (r381) :: r384 in
+  let r386 = [R 576] in
+  let r387 = S (T T_RBRACE) :: r386 in
+  let r388 = [R 228] in
+  let r389 = S (T T_LIDENT) :: r388 in
+  let r390 = [R 423] in
+  let r391 = [R 429] in
+  let r392 = S (T T_UNDERSCORE) :: r328 in
+  let r393 = [R 625] in
+  let r394 = Sub (r392) :: r393 in
+  let r395 = [R 459] in
+  let r396 = Sub (r394) :: r395 in
+  let r397 = R 270 :: r396 in
+  let r398 = [R 88] in
+  let r399 = [R 635] in
+  let r400 = S (T T_INT) :: r398 in
+  let r401 = [R 571] in
+  let r402 = Sub (r400) :: r401 in
+  let r403 = [R 632] in
+  let r404 = [R 637] in
+  let r405 = S (T T_RBRACKET) :: r404 in
+  let r406 = S (T T_LBRACKET) :: r405 in
+  let r407 = [R 638] in
+  let r408 = [R 451] in
+  let r409 = S (N N_pattern) :: r408 in
+  let r410 = R 270 :: r409 in
+  let r411 = [R 452] in
+  let r412 = [R 445] in
+  let r413 = [R 458] in
+  let r414 = [R 639] in
+  let r415 = [R 453] in
+  let r416 = [R 450] in
+  let r417 = [R 448] in
+  let r418 = [R 298] in
+  let r419 = [R 578] in
+  let r420 = [R 695] in
+  let r421 = Sub (r1) :: r420 in
+  let r422 = S (T T_EQUAL) :: r421 in
+  let r423 = [R 242] in
+  let r424 = [R 239] in
+  let r425 = [R 225] in
+  let r426 = S (T T_LIDENT) :: r425 in
+  let r427 = [R 238] in
+  let r428 = S (T T_RPAREN) :: r427 in
+  let r429 = [R 226] in
+  let r430 = [R 235] in
+  let r431 = [R 234] in
+  let r432 = S (T T_RPAREN) :: r431 in
+  let r433 = R 430 :: r432 in
+  let r434 = [R 431] in
+  let r435 = [R 257] in
+  let r436 = Sub (r1) :: r435 in
+  let r437 = S (T T_EQUAL) :: r436 in
+  let r438 = Sub (r365) :: r437 in
+  let r439 = [R 258] in
+  let r440 = Sub (r438) :: r439 in
+  let r441 = [R 168] in
+  let r442 = Sub (r1) :: r441 in
+  let r443 = S (T T_IN) :: r442 in
+  let r444 = [R 255] in
+  let r445 = [R 467] in
+  let r446 = S (T T_UNDERSCORE) :: r445 in
+  let r447 = [R 237] in
+  let r448 = [R 236] in
+  let r449 = S (T T_RPAREN) :: r448 in
+  let r450 = R 430 :: r449 in
+  let r451 = [R 254] in
+  let r452 = [R 361] in
+  let r453 = S (T T_LIDENT) :: r452 in
+  let r454 = [R 190] in
+  let r455 = Sub (r422) :: r454 in
+  let r456 = [R 697] in
+  let r457 = Sub (r455) :: r456 in
+  let r458 = S (T T_RPAREN) :: r457 in
+  let r459 = Sub (r453) :: r458 in
+  let r460 = [R 240] in
+  let r461 = [R 127] in
+  let r462 = Sub (r1) :: r461 in
+  let r463 = S (T T_IN) :: r462 in
+  let r464 = S (N N_module_expr) :: r463 in
+  let r465 = R 270 :: r464 in
+  let r466 = R 182 :: r465 in
+  let r467 = [R 248] in
+  let r468 = R 276 :: r467 in
+  let r469 = Sub (r369) :: r468 in
+  let r470 = R 486 :: r469 in
+  let r471 = R 270 :: r470 in
+  let r472 = R 182 :: r471 in
+  let r473 = [R 128] in
+  let r474 = Sub (r1) :: r473 in
+  let r475 = S (T T_IN) :: r474 in
+  let r476 = S (N N_module_expr) :: r475 in
+  let r477 = R 270 :: r476 in
+  let r478 = [R 331] in
+  let r479 = S (N N_module_expr) :: r478 in
+  let r480 = S (T T_MINUSGREATER) :: r479 in
+  let r481 = S (N N_functor_args) :: r480 in
+  let r482 = [R 200] in
+  let r483 = [R 201] in
+  let r484 = S (T T_RPAREN) :: r483 in
+  let r485 = S (N N_module_type) :: r484 in
+  let r486 = [R 344] in
+  let r487 = S (T T_RPAREN) :: r486 in
+  let r488 = [R 342] in
+  let r489 = S (N N_module_type) :: r488 in
+  let r490 = S (T T_MINUSGREATER) :: r489 in
+  let r491 = S (N N_functor_args) :: r490 in
+  let r492 = S (T T_UIDENT) :: r25 in
+  let r493 = [R 772] in
+  let r494 = Sub (r196) :: r493 in
+  let r495 = S (T T_EQUAL) :: r494 in
+  let r496 = Sub (r492) :: r495 in
+  let r497 = S (T T_MODULE) :: r496 in
+  let r498 = [R 517] in
+  let r499 = Sub (r497) :: r498 in
+  let r500 = [R 348] in
+  let r501 = [R 771] in
+  let r502 = Sub (r67) :: r501 in
+  let r503 = S (T T_COLONEQUAL) :: r502 in
+  let r504 = Sub (r381) :: r503 in
+  let r505 = [R 770] in
+  let r506 = R 502 :: r505 in
+  let r507 = [R 773] in
+  let r508 = [R 518] in
+  let r509 = [R 347] in
+  let r510 = [R 352] in
+  let r511 = Sub (r91) :: r510 in
+  let r512 = [R 336] in
+  let r513 = [R 436] in
+  let r514 = S (T T_RPAREN) :: r513 in
+  let r515 = [R 617] in
+  let r516 = [R 535] in
+  let r517 = S (N N_expr) :: r516 in
+  let r518 = [R 620] in
+  let r519 = S (T T_RBRACKET) :: r518 in
+  let r520 = [R 605] in
+  let r521 = [R 538] in
+  let r522 = R 424 :: r521 in
+  let r523 = [R 425] in
+  let r524 = [R 544] in
+  let r525 = R 424 :: r524 in
+  let r526 = R 432 :: r525 in
+  let r527 = Sub (r381) :: r526 in
+  let r528 = [R 488] in
+  let r529 = Sub (r527) :: r528 in
+  let r530 = [R 614] in
+  let r531 = S (T T_RBRACE) :: r530 in
+  let r532 = [R 581] in
+  let r533 = [R 580] in
+  let r534 = S (T T_GREATERDOT) :: r533 in
+  let r535 = [R 139] in
+  let r536 = Sub (r41) :: r535 in
+  let r537 = R 270 :: r536 in
+  let r538 = [R 594] in
+  let r539 = S (T T_END) :: r538 in
+  let r540 = R 270 :: r539 in
+  let r541 = [R 135] in
+  let r542 = S (N N_expr) :: r541 in
+  let r543 = S (T T_THEN) :: r542 in
+  let r544 = Sub (r1) :: r543 in
+  let r545 = R 270 :: r544 in
+  let r546 = [R 129] in
+  let r547 = Sub (r34) :: r546 in
+  let r548 = R 270 :: r547 in
+  let r549 = [R 513] in
+  let r550 = [R 304] in
+  let r551 = Sub (r1) :: r550 in
+  let r552 = S (T T_MINUSGREATER) :: r551 in
+  let r553 = [R 241] in
+  let r554 = Sub (r394) :: r553 in
+  let r555 = [R 192] in
+  let r556 = Sub (r1) :: r555 in
+  let r557 = S (T T_MINUSGREATER) :: r556 in
+  let r558 = [R 130] in
+  let r559 = Sub (r557) :: r558 in
+  let r560 = Sub (r554) :: r559 in
+  let r561 = R 270 :: r560 in
+  let r562 = [R 131] in
+  let r563 = Sub (r557) :: r562 in
+  let r564 = S (T T_RPAREN) :: r563 in
+  let r565 = [R 123] in
+  let r566 = S (T T_DONE) :: r565 in
+  let r567 = Sub (r1) :: r566 in
+  let r568 = S (T T_DO) :: r567 in
+  let r569 = Sub (r1) :: r568 in
+  let r570 = S (T T_IN) :: r569 in
+  let r571 = S (N N_pattern) :: r570 in
+  let r572 = R 270 :: r571 in
+  let r573 = [R 114] in
+  let r574 = S (T T_DOWNTO) :: r573 in
+  let r575 = [R 137] in
+  let r576 = S (T T_DONE) :: r575 in
+  let r577 = Sub (r1) :: r576 in
+  let r578 = S (T T_DO) :: r577 in
+  let r579 = Sub (r1) :: r578 in
+  let r580 = Sub (r574) :: r579 in
+  let r581 = Sub (r1) :: r580 in
+  let r582 = S (T T_EQUAL) :: r581 in
+  let r583 = S (N N_pattern) :: r582 in
+  let r584 = R 270 :: r583 in
+  let r585 = [R 603] in
+  let r586 = [R 613] in
+  let r587 = S (T T_RPAREN) :: r586 in
+  let r588 = S (T T_LPAREN) :: r587 in
+  let r589 = S (T T_DOT) :: r588 in
+  let r590 = [R 623] in
+  let r591 = S (T T_RPAREN) :: r590 in
+  let r592 = S (N N_module_type) :: r591 in
+  let r593 = S (T T_COLON) :: r592 in
+  let r594 = S (N N_module_expr) :: r593 in
+  let r595 = R 270 :: r594 in
+  let r596 = [R 256] in
+  let r597 = Sub (r1) :: r596 in
+  let r598 = S (T T_EQUAL) :: r597 in
+  let r599 = [R 138] in
+  let r600 = Sub (r41) :: r599 in
+  let r601 = R 270 :: r600 in
+  let r602 = [R 610] in
+  let r603 = [R 586] in
+  let r604 = S (T T_RBRACKET) :: r603 in
+  let r605 = Sub (r517) :: r604 in
+  let r606 = S (T T_LBRACKET) :: r605 in
+  let r607 = [R 587] in
+  let r608 = S (T T_RPAREN) :: r607 in
+  let r609 = Sub (r517) :: r608 in
+  let r610 = [R 165] in
+  let r611 = [R 231] in
+  let r612 = [R 232] in
+  let r613 = [R 233] in
+  let r614 = [R 609] in
+  let r615 = [R 592] in
+  let r616 = S (T T_RBRACE) :: r615 in
+  let r617 = S (N N_expr) :: r616 in
+  let r618 = S (T T_LBRACE) :: r617 in
+  let r619 = [R 584] in
+  let r620 = S (T T_RPAREN) :: r619 in
+  let r621 = Sub (r1) :: r620 in
+  let r622 = [R 529] in
+  let r623 = [R 115] in
+  let r624 = Sub (r1) :: r623 in
+  let r625 = [R 167] in
+  let r626 = Sub (r1) :: r625 in
+  let r627 = [R 155] in
+  let r628 = [R 149] in
+  let r629 = [R 166] in
+  let r630 = [R 550] in
+  let r631 = Sub (r1) :: r630 in
+  let r632 = [R 152] in
+  let r633 = [R 156] in
+  let r634 = [R 148] in
+  let r635 = [R 151] in
+  let r636 = [R 150] in
+  let r637 = [R 160] in
+  let r638 = [R 154] in
+  let r639 = [R 153] in
+  let r640 = [R 158] in
+  let r641 = [R 147] in
+  let r642 = [R 146] in
+  let r643 = [R 169] in
+  let r644 = [R 145] in
+  let r645 = [R 159] in
+  let r646 = [R 157] in
+  let r647 = [R 161] in
+  let r648 = [R 162] in
+  let r649 = [R 163] in
+  let r650 = [R 530] in
+  let r651 = [R 164] in
+  let r652 = [R 11] in
+  let r653 = R 276 :: r652 in
+  let r654 = Sub (r369) :: r653 in
+  let r655 = [R 247] in
+  let r656 = Sub (r1) :: r655 in
+  let r657 = S (T T_EQUAL) :: r656 in
+  let r658 = [R 455] in
+  let r659 = [R 460] in
+  let r660 = [R 465] in
+  let r661 = [R 463] in
+  let r662 = [R 454] in
+  let r663 = [R 585] in
+  let r664 = S (T T_RBRACKET) :: r663 in
+  let r665 = Sub (r1) :: r664 in
+  let r666 = [R 589] in
+  let r667 = S (T T_RBRACKET) :: r666 in
+  let r668 = Sub (r517) :: r667 in
+  let r669 = S (T T_LBRACKET) :: r668 in
+  let r670 = [R 590] in
+  let r671 = S (T T_RPAREN) :: r670 in
+  let r672 = Sub (r517) :: r671 in
+  let r673 = [R 591] in
+  let r674 = S (T T_RBRACE) :: r673 in
+  let r675 = Sub (r517) :: r674 in
+  let r676 = [R 230] in
+  let r677 = [R 176] in
+  let r678 = [R 175] in
+  let r679 = [R 588] in
+  let r680 = S (T T_RBRACE) :: r679 in
+  let r681 = Sub (r517) :: r680 in
+  let r682 = [R 177] in
+  let r683 = [R 172] in
+  let r684 = [R 173] in
+  let r685 = [R 174] in
+  let r686 = [R 179] in
+  let r687 = [R 178] in
+  let r688 = [R 180] in
+  let r689 = [R 171] in
+  let r690 = [R 259] in
+  let r691 = [R 607] in
+  let r692 = [R 619] in
+  let r693 = [R 618] in
+  let r694 = [R 622] in
+  let r695 = [R 621] in
+  let r696 = S (T T_LIDENT) :: r522 in
+  let r697 = [R 608] in
+  let r698 = S (T T_GREATERRBRACE) :: r697 in
+  let r699 = [R 615] in
+  let r700 = S (T T_RBRACE) :: r699 in
+  let r701 = [R 489] in
+  let r702 = Sub (r527) :: r701 in
+  let r703 = [R 736] in
+  let r704 = [R 734] in
+  let r705 = Sub (r69) :: r704 in
+  let r706 = [R 735] in
+  let r707 = [R 122] in
+  let r708 = S (T T_DONE) :: r707 in
+  let r709 = Sub (r1) :: r708 in
+  let r710 = S (T T_DO) :: r709 in
+  let r711 = Sub (r1) :: r710 in
+  let r712 = Sub (r574) :: r711 in
+  let r713 = [R 195] in
+  let r714 = Sub (r557) :: r713 in
+  let r715 = S (T T_RPAREN) :: r714 in
+  let r716 = [R 193] in
+  let r717 = Sub (r1) :: r716 in
+  let r718 = S (T T_MINUSGREATER) :: r717 in
+  let r719 = [R 194] in
+  let r720 = [R 640] in
+  let r721 = S (T T_RPAREN) :: r720 in
+  let r722 = [R 514] in
+  let r723 = [R 134] in
+  let r724 = [R 593] in
+  let r725 = [R 604] in
+  let r726 = [R 616] in
+  let r727 = [R 325] in
+  let r728 = S (N N_module_expr) :: r727 in
+  let r729 = S (T T_EQUAL) :: r728 in
+  let r730 = [R 125] in
+  let r731 = Sub (r1) :: r730 in
+  let r732 = S (T T_IN) :: r731 in
+  let r733 = Sub (r729) :: r732 in
+  let r734 = Sub (r334) :: r733 in
+  let r735 = R 270 :: r734 in
+  let r736 = [R 326] in
+  let r737 = S (N N_module_expr) :: r736 in
+  let r738 = S (T T_EQUAL) :: r737 in
+  let r739 = [R 327] in
+  let r740 = [R 126] in
+  let r741 = Sub (r1) :: r740 in
+  let r742 = S (T T_IN) :: r741 in
+  let r743 = R 270 :: r742 in
+  let r744 = R 203 :: r743 in
+  let r745 = Sub (r117) :: r744 in
+  let r746 = R 270 :: r745 in
+  let r747 = [R 191] in
+  let r748 = Sub (r1) :: r747 in
+  let r749 = [R 696] in
+  let r750 = [R 245] in
+  let r751 = Sub (r1) :: r750 in
+  let r752 = S (T T_EQUAL) :: r751 in
+  let r753 = Sub (r69) :: r752 in
+  let r754 = S (T T_DOT) :: r753 in
+  let r755 = [R 244] in
+  let r756 = Sub (r1) :: r755 in
+  let r757 = S (T T_EQUAL) :: r756 in
+  let r758 = Sub (r69) :: r757 in
+  let r759 = [R 243] in
+  let r760 = Sub (r1) :: r759 in
+  let r761 = [R 441] in
+  let r762 = S (T T_RPAREN) :: r761 in
+  let r763 = [R 439] in
+  let r764 = S (T T_RPAREN) :: r763 in
+  let r765 = [R 440] in
+  let r766 = S (T T_RPAREN) :: r765 in
+  let r767 = [R 59] in
+  let r768 = S (T T_RPAREN) :: r767 in
+  let r769 = [R 757] in
+  let r770 = Sub (r1) :: r769 in
+  let r771 = S (T T_EQUAL) :: r770 in
+  let r772 = S (T T_LIDENT) :: r771 in
+  let r773 = R 353 :: r772 in
+  let r774 = R 270 :: r773 in
+  let r775 = [R 45] in
+  let r776 = R 276 :: r775 in
+  let r777 = [R 758] in
+  let r778 = Sub (r1) :: r777 in
+  let r779 = S (T T_EQUAL) :: r778 in
+  let r780 = S (T T_LIDENT) :: r779 in
+  let r781 = R 353 :: r780 in
+  let r782 = [R 760] in
+  let r783 = Sub (r1) :: r782 in
+  let r784 = [R 756] in
+  let r785 = Sub (r69) :: r784 in
+  let r786 = S (T T_COLON) :: r785 in
+  let r787 = [R 759] in
+  let r788 = Sub (r1) :: r787 in
+  let r789 = [R 314] in
+  let r790 = Sub (r422) :: r789 in
+  let r791 = S (T T_LIDENT) :: r790 in
+  let r792 = R 479 :: r791 in
+  let r793 = R 270 :: r792 in
+  let r794 = [R 46] in
+  let r795 = R 276 :: r794 in
+  let r796 = [R 315] in
+  let r797 = Sub (r422) :: r796 in
+  let r798 = S (T T_LIDENT) :: r797 in
+  let r799 = R 479 :: r798 in
+  let r800 = [R 473] in
+  let r801 = Sub (r69) :: r800 in
+  let r802 = [R 317] in
+  let r803 = Sub (r1) :: r802 in
+  let r804 = S (T T_EQUAL) :: r803 in
+  let r805 = [R 319] in
+  let r806 = Sub (r1) :: r805 in
+  let r807 = S (T T_EQUAL) :: r806 in
+  let r808 = Sub (r69) :: r807 in
+  let r809 = S (T T_DOT) :: r808 in
+  let r810 = [R 474] in
+  let r811 = Sub (r69) :: r810 in
+  let r812 = [R 313] in
+  let r813 = Sub (r801) :: r812 in
+  let r814 = S (T T_COLON) :: r813 in
+  let r815 = [R 316] in
+  let r816 = Sub (r1) :: r815 in
+  let r817 = S (T T_EQUAL) :: r816 in
+  let r818 = [R 318] in
+  let r819 = Sub (r1) :: r818 in
+  let r820 = S (T T_EQUAL) :: r819 in
+  let r821 = Sub (r69) :: r820 in
+  let r822 = S (T T_DOT) :: r821 in
+  let r823 = [R 219] in
+  let r824 = S (T T_RBRACKET) :: r823 in
+  let r825 = Sub (r15) :: r824 in
+  let r826 = [R 471] in
+  let r827 = [R 472] in
+  let r828 = [R 710] in
+  let r829 = R 276 :: r828 in
+  let r830 = Sub (r729) :: r829 in
+  let r831 = Sub (r334) :: r830 in
+  let r832 = R 270 :: r831 in
+  let r833 = [R 350] in
+  let r834 = R 276 :: r833 in
+  let r835 = R 426 :: r834 in
+  let r836 = Sub (r91) :: r835 in
+  let r837 = R 270 :: r836 in
+  let r838 = [R 427] in
+  let r839 = [R 711] in
+  let r840 = R 266 :: r839 in
+  let r841 = R 276 :: r840 in
+  let r842 = Sub (r729) :: r841 in
+  let r843 = [R 267] in
+  let r844 = R 266 :: r843 in
+  let r845 = R 276 :: r844 in
+  let r846 = Sub (r729) :: r845 in
+  let r847 = Sub (r334) :: r846 in
+  let r848 = [R 187] in
+  let r849 = S (T T_RBRACKET) :: r848 in
+  let r850 = Sub (r15) :: r849 in
+  let r851 = [R 716] in
+  let r852 = R 276 :: r851 in
+  let r853 = S (N N_module_expr) :: r852 in
+  let r854 = R 270 :: r853 in
+  let r855 = [R 363] in
+  let r856 = S (T T_STRING) :: r855 in
+  let r857 = [R 478] in
+  let r858 = R 276 :: r857 in
+  let r859 = Sub (r856) :: r858 in
+  let r860 = S (T T_EQUAL) :: r859 in
+  let r861 = Sub (r69) :: r860 in
+  let r862 = S (T T_COLON) :: r861 in
+  let r863 = Sub (r59) :: r862 in
+  let r864 = R 270 :: r863 in
+  let r865 = [R 694] in
+  let r866 = R 276 :: r865 in
+  let r867 = R 270 :: r866 in
+  let r868 = Sub (r299) :: r867 in
+  let r869 = S (T T_EQUAL) :: r868 in
+  let r870 = Sub (r117) :: r869 in
+  let r871 = R 270 :: r870 in
+  let r872 = [R 551] in
+  let r873 = R 276 :: r872 in
+  let r874 = R 270 :: r873 in
+  let r875 = R 203 :: r874 in
+  let r876 = Sub (r117) :: r875 in
+  let r877 = R 270 :: r876 in
+  let r878 = R 182 :: r877 in
+  let r879 = [R 469] in
+  let r880 = [R 279] in
+  let r881 = [R 381] in
+  let r882 = R 276 :: r881 in
+  let r883 = Sub (r196) :: r882 in
+  let r884 = R 270 :: r883 in
+  let r885 = [R 382] in
+  let r886 = R 276 :: r885 in
+  let r887 = Sub (r196) :: r886 in
+  let r888 = R 270 :: r887 in
+  let r889 = [R 328] in
+  let r890 = S (N N_module_type) :: r889 in
+  let r891 = S (T T_COLON) :: r890 in
+  let r892 = [R 562] in
+  let r893 = R 276 :: r892 in
+  let r894 = Sub (r891) :: r893 in
+  let r895 = Sub (r334) :: r894 in
+  let r896 = R 270 :: r895 in
+  let r897 = [R 340] in
+  let r898 = R 276 :: r897 in
+  let r899 = [R 565] in
+  let r900 = R 268 :: r899 in
+  let r901 = R 276 :: r900 in
+  let r902 = S (N N_module_type) :: r901 in
+  let r903 = S (T T_COLON) :: r902 in
+  let r904 = [R 269] in
+  let r905 = R 268 :: r904 in
+  let r906 = R 276 :: r905 in
+  let r907 = S (N N_module_type) :: r906 in
+  let r908 = S (T T_COLON) :: r907 in
+  let r909 = Sub (r334) :: r908 in
+  let r910 = [R 563] in
+  let r911 = R 276 :: r910 in
+  let r912 = [R 329] in
+  let r913 = [R 568] in
+  let r914 = R 276 :: r913 in
+  let r915 = S (N N_module_type) :: r914 in
+  let r916 = R 270 :: r915 in
+  let r917 = [R 86] in
+  let r918 = S (T T_LIDENT) :: r917 in
+  let r919 = [R 69] in
+  let r920 = Sub (r918) :: r919 in
+  let r921 = [R 81] in
+  let r922 = Sub (r920) :: r921 in
+  let r923 = [R 569] in
+  let r924 = R 262 :: r923 in
+  let r925 = R 276 :: r924 in
+  let r926 = Sub (r922) :: r925 in
+  let r927 = S (T T_COLON) :: r926 in
+  let r928 = S (T T_LIDENT) :: r927 in
+  let r929 = R 188 :: r928 in
+  let r930 = R 762 :: r929 in
+  let r931 = R 270 :: r930 in
+  let r932 = [R 85] in
+  let r933 = R 264 :: r932 in
+  let r934 = R 276 :: r933 in
+  let r935 = Sub (r920) :: r934 in
+  let r936 = S (T T_EQUAL) :: r935 in
+  let r937 = S (T T_LIDENT) :: r936 in
+  let r938 = R 188 :: r937 in
+  let r939 = R 762 :: r938 in
+  let r940 = R 270 :: r939 in
+  let r941 = R 182 :: r940 in
+  let r942 = [R 189] in
+  let r943 = S (T T_RBRACKET) :: r942 in
+  let r944 = [R 72] in
+  let r945 = S (T T_END) :: r944 in
+  let r946 = R 285 :: r945 in
+  let r947 = R 62 :: r946 in
+  let r948 = [R 61] in
+  let r949 = S (T T_RPAREN) :: r948 in
+  let r950 = [R 64] in
+  let r951 = R 276 :: r950 in
+  let r952 = Sub (r69) :: r951 in
+  let r953 = S (T T_COLON) :: r952 in
+  let r954 = S (T T_LIDENT) :: r953 in
+  let r955 = R 355 :: r954 in
+  let r956 = [R 65] in
+  let r957 = R 276 :: r956 in
+  let r958 = Sub (r801) :: r957 in
+  let r959 = S (T T_COLON) :: r958 in
+  let r960 = S (T T_LIDENT) :: r959 in
+  let r961 = R 481 :: r960 in
+  let r962 = [R 63] in
+  let r963 = R 276 :: r962 in
+  let r964 = Sub (r920) :: r963 in
+  let r965 = [R 74] in
+  let r966 = Sub (r920) :: r965 in
+  let r967 = S (T T_IN) :: r966 in
+  let r968 = Sub (r492) :: r967 in
+  let r969 = R 270 :: r968 in
+  let r970 = [R 75] in
+  let r971 = Sub (r920) :: r970 in
+  let r972 = S (T T_IN) :: r971 in
+  let r973 = Sub (r492) :: r972 in
+  let r974 = [R 521] in
+  let r975 = Sub (r69) :: r974 in
+  let r976 = [R 70] in
+  let r977 = Sub (r918) :: r976 in
+  let r978 = S (T T_RBRACKET) :: r977 in
+  let r979 = Sub (r975) :: r978 in
+  let r980 = [R 87] in
+  let r981 = S (T T_LIDENT) :: r980 in
+  let r982 = S (T T_DOT) :: r981 in
+  let r983 = [R 522] in
+  let r984 = [R 105] in
+  let r985 = Sub (r69) :: r984 in
+  let r986 = S (T T_EQUAL) :: r985 in
+  let r987 = Sub (r69) :: r986 in
+  let r988 = [R 66] in
+  let r989 = R 276 :: r988 in
+  let r990 = Sub (r987) :: r989 in
+  let r991 = [R 67] in
+  let r992 = [R 286] in
+  let r993 = [R 265] in
+  let r994 = R 264 :: r993 in
+  let r995 = R 276 :: r994 in
+  let r996 = Sub (r920) :: r995 in
+  let r997 = S (T T_EQUAL) :: r996 in
+  let r998 = S (T T_LIDENT) :: r997 in
+  let r999 = R 188 :: r998 in
+  let r1000 = R 762 :: r999 in
+  let r1001 = [R 83] in
+  let r1002 = Sub (r922) :: r1001 in
+  let r1003 = S (T T_MINUSGREATER) :: r1002 in
+  let r1004 = Sub (r63) :: r1003 in
+  let r1005 = [R 84] in
+  let r1006 = Sub (r922) :: r1005 in
+  let r1007 = [R 82] in
+  let r1008 = Sub (r922) :: r1007 in
+  let r1009 = S (T T_MINUSGREATER) :: r1008 in
+  let r1010 = [R 263] in
+  let r1011 = R 262 :: r1010 in
+  let r1012 = R 276 :: r1011 in
+  let r1013 = Sub (r922) :: r1012 in
+  let r1014 = S (T T_COLON) :: r1013 in
+  let r1015 = S (T T_LIDENT) :: r1014 in
+  let r1016 = R 188 :: r1015 in
+  let r1017 = R 762 :: r1016 in
+  let r1018 = [R 280] in
+  let r1019 = [R 553] in
+  let r1020 = [R 557] in
+  let r1021 = [R 273] in
+  let r1022 = R 272 :: r1021 in
+  let r1023 = R 276 :: r1022 in
+  let r1024 = R 502 :: r1023 in
+  let r1025 = R 737 :: r1024 in
+  let r1026 = S (T T_LIDENT) :: r1025 in
+  let r1027 = R 742 :: r1026 in
+  let r1028 = [R 558] in
+  let r1029 = [R 275] in
+  let r1030 = R 274 :: r1029 in
+  let r1031 = R 276 :: r1030 in
+  let r1032 = R 502 :: r1031 in
+  let r1033 = Sub (r156) :: r1032 in
+  let r1034 = S (T T_COLONEQUAL) :: r1033 in
+  let r1035 = S (T T_LIDENT) :: r1034 in
+  let r1036 = R 742 :: r1035 in
+  let r1037 = [R 77] in
+  let r1038 = Sub (r44) :: r1037 in
+  let r1039 = [R 35] in
+  let r1040 = Sub (r1038) :: r1039 in
+  let r1041 = [R 51] in
+  let r1042 = Sub (r1040) :: r1041 in
+  let r1043 = S (T T_EQUAL) :: r1042 in
+  let r1044 = [R 714] in
+  let r1045 = R 260 :: r1044 in
+  let r1046 = R 276 :: r1045 in
+  let r1047 = Sub (r1043) :: r1046 in
+  let r1048 = S (T T_LIDENT) :: r1047 in
+  let r1049 = R 188 :: r1048 in
+  let r1050 = R 762 :: r1049 in
+  let r1051 = R 270 :: r1050 in
+  let r1052 = [R 80] in
+  let r1053 = S (T T_END) :: r1052 in
+  let r1054 = R 287 :: r1053 in
+  let r1055 = R 60 :: r1054 in
+  let r1056 = [R 48] in
+  let r1057 = R 276 :: r1056 in
+  let r1058 = Sub (r1) :: r1057 in
+  let r1059 = [R 43] in
+  let r1060 = R 276 :: r1059 in
+  let r1061 = R 420 :: r1060 in
+  let r1062 = Sub (r1040) :: r1061 in
+  let r1063 = [R 44] in
+  let r1064 = R 276 :: r1063 in
+  let r1065 = R 420 :: r1064 in
+  let r1066 = Sub (r1040) :: r1065 in
+  let r1067 = [R 76] in
+  let r1068 = S (T T_RPAREN) :: r1067 in
+  let r1069 = [R 38] in
+  let r1070 = Sub (r1040) :: r1069 in
+  let r1071 = S (T T_IN) :: r1070 in
+  let r1072 = Sub (r492) :: r1071 in
+  let r1073 = R 270 :: r1072 in
+  let r1074 = [R 251] in
+  let r1075 = R 276 :: r1074 in
+  let r1076 = Sub (r369) :: r1075 in
+  let r1077 = R 486 :: r1076 in
+  let r1078 = R 270 :: r1077 in
+  let r1079 = [R 39] in
+  let r1080 = Sub (r1040) :: r1079 in
+  let r1081 = S (T T_IN) :: r1080 in
+  let r1082 = Sub (r492) :: r1081 in
+  let r1083 = [R 78] in
+  let r1084 = Sub (r44) :: r1083 in
+  let r1085 = S (T T_RBRACKET) :: r1084 in
+  let r1086 = [R 54] in
+  let r1087 = Sub (r1040) :: r1086 in
+  let r1088 = S (T T_MINUSGREATER) :: r1087 in
+  let r1089 = Sub (r554) :: r1088 in
+  let r1090 = [R 36] in
+  let r1091 = Sub (r1089) :: r1090 in
+  let r1092 = [R 37] in
+  let r1093 = Sub (r1040) :: r1092 in
+  let r1094 = [R 250] in
+  let r1095 = R 276 :: r1094 in
+  let r1096 = Sub (r369) :: r1095 in
+  let r1097 = [R 79] in
+  let r1098 = S (T T_RPAREN) :: r1097 in
+  let r1099 = [R 421] in
+  let r1100 = [R 47] in
+  let r1101 = R 276 :: r1100 in
+  let r1102 = Sub (r987) :: r1101 in
+  let r1103 = [R 49] in
+  let r1104 = [R 288] in
+  let r1105 = [R 52] in
+  let r1106 = Sub (r1040) :: r1105 in
+  let r1107 = S (T T_EQUAL) :: r1106 in
+  let r1108 = [R 53] in
+  let r1109 = [R 261] in
+  let r1110 = R 260 :: r1109 in
+  let r1111 = R 276 :: r1110 in
+  let r1112 = Sub (r1043) :: r1111 in
+  let r1113 = S (T T_LIDENT) :: r1112 in
+  let r1114 = R 188 :: r1113 in
+  let r1115 = R 762 :: r1114 in
+  let r1116 = [R 284] in
+  let r1117 = [R 702] in
+  let r1118 = [R 706] in
+  let r1119 = [R 699] in
+  let r1120 = R 281 :: r1119 in
+  let r1121 = [R 283] in
+  let r1122 = R 281 :: r1121 in
+  let r1123 = [R 209] in
+  let r1124 = R 276 :: r1123 in
+  let r1125 = R 502 :: r1124 in
+  let r1126 = [R 596] in
+  let r1127 = S (T T_RPAREN) :: r1126 in
+  let r1128 = S (N N_module_expr) :: r1127 in
+  let r1129 = R 270 :: r1128 in
+  let r1130 = [R 597] in
+  let r1131 = S (T T_RPAREN) :: r1130 in
+  let r1132 = [R 583] in
+  let r1133 = [R 118] in
+  let r1134 = [R 120] in
+  let r1135 = [R 119] in
+  let r1136 = [R 215] in
+  let r1137 = [R 218] in
+  let r1138 = [R 442] in
+  let r1139 = [R 443] in
+  let r1140 = [R 444] in
+  let r1141 = [R 721] in
+  let r1142 = [R 730] in
+  let r1143 = [R 290] in
+  let r1144 = [R 728] in
+  let r1145 = S (T T_SEMISEMI) :: r1144 in
+  let r1146 = [R 729] in
+  let r1147 = [R 292] in
+  let r1148 = [R 295] in
+  let r1149 = [R 294] in
+  let r1150 = [R 293] in
+  let r1151 = R 291 :: r1150 in
+  let r1152 = [R 751] in
+  let r1153 = S (T T_EOF) :: r1152 in
+  let r1154 = R 291 :: r1153 in
+  let r1155 = [R 750] in
+  function
+  | 0 | 1724 | 1728 | 1732 | 1736 | 1740 | 1761 -> Nothing
+  | 1723 -> One ([R 0])
+  | 1727 -> One ([R 1])
+  | 1729 -> One ([R 2])
+  | 1735 -> One ([R 3])
+  | 1739 -> One ([R 4])
+  | 1751 -> One ([R 5])
+  | 1771 -> One ([R 6])
+  | 433 -> One ([R 7])
+  | 432 -> One ([R 8])
+  | 202 -> One ([R 16])
+  | 219 -> One ([R 17])
+  | 215 -> One ([R 31])
+  | 1558 -> One ([R 40])
+  | 1555 -> One ([R 41])
+  | 1553 -> One ([R 42])
+  | 1594 -> One ([R 50])
+  | 1561 -> One ([R 55])
+  | 1424 -> One ([R 68])
+  | 1403 | 1459 -> One ([R 71])
+  | 1406 -> One ([R 73])
+  | 504 -> One ([R 89])
+  | 72 -> One ([R 90])
+  | 503 -> One ([R 91])
+  | 177 | 319 -> One ([R 92])
+  | 178 -> One ([R 97])
+  | 401 -> One ([R 98])
+  | 71 -> One ([R 104])
+  | 318 -> One ([R 109])
+  | 339 -> One ([R 110])
+  | 249 -> One ([R 112])
+  | 992 -> One ([R 113])
+  | 746 -> One ([R 124])
+  | 932 -> One ([R 141])
+  | 759 -> One ([R 142])
+  | 780 -> One ([R 143])
+  | 762 -> One ([R 144])
+  | 778 -> One ([R 181])
+  | 1 -> One (R 182 :: r7)
+  | 61 -> One (R 182 :: r24)
+  | 65 -> One (R 182 :: r28)
+  | 68 -> One (R 182 :: r39)
+  | 75 -> One (R 182 :: r47)
+  | 93 -> One (R 182 :: r75)
+  | 434 -> One (R 182 :: r313)
+  | 435 -> One (R 182 :: r317)
+  | 440 -> One (R 182 :: r325)
+  | 453 -> One (R 182 :: r338)
+  | 470 -> One (R 182 :: r354)
+  | 473 -> One (R 182 :: r359)
+  | 478 -> One (R 182 :: r374)
+  | 497 -> One (R 182 :: r397)
+  | 518 -> One (R 182 :: r410)
+  | 599 -> One (R 182 :: r477)
+  | 679 -> One (R 182 :: r537)
+  | 682 -> One (R 182 :: r540)
+  | 685 -> One (R 182 :: r545)
+  | 688 -> One (R 182 :: r548)
+  | 694 -> One (R 182 :: r561)
+  | 702 -> One (R 182 :: r572)
+  | 707 -> One (R 182 :: r584)
+  | 723 -> One (R 182 :: r595)
+  | 737 -> One (R 182 :: r601)
+  | 1075 -> One (R 182 :: r735)
+  | 1090 -> One (R 182 :: r746)
+  | 1239 -> One (R 182 :: r832)
+  | 1240 -> One (R 182 :: r837)
+  | 1266 -> One (R 182 :: r854)
+  | 1271 -> One (R 182 :: r864)
+  | 1295 -> One (R 182 :: r884)
+  | 1296 -> One (R 182 :: r888)
+  | 1305 -> One (R 182 :: r896)
+  | 1335 -> One (R 182 :: r916)
+  | 1344 -> One (R 182 :: r931)
+  | 1688 -> One (R 182 :: r1129)
+  | 611 -> One ([R 202])
+  | 143 | 644 -> One ([R 213])
+  | 122 -> One (R 216 :: r86)
+  | 126 -> One (R 216 :: r88)
+  | 313 -> One ([R 223])
+  | 314 -> One ([R 224])
+  | 931 -> One ([R 229])
+  | 853 -> One ([R 249])
+  | 1559 -> One ([R 252])
+  | 580 -> One ([R 253])
+  | 84 -> One (R 270 :: r51)
+  | 155 -> One (R 270 :: r105)
+  | 273 -> One (R 270 :: r224)
+  | 438 -> One (R 270 :: r320)
+  | 466 -> One (R 270 :: r349)
+  | 602 -> One (R 270 :: r481)
+  | 609 -> One (R 270 :: r491)
+  | 828 -> One (R 270 :: r654)
+  | 1162 -> One (R 270 :: r781)
+  | 1190 -> One (R 270 :: r799)
+  | 1254 -> One (R 270 :: r847)
+  | 1317 -> One (R 270 :: r909)
+  | 1356 -> One (R 270 :: r947)
+  | 1362 -> One (R 270 :: r955)
+  | 1373 -> One (R 270 :: r961)
+  | 1384 -> One (R 270 :: r964)
+  | 1389 -> One (R 270 :: r973)
+  | 1413 -> One (R 270 :: r990)
+  | 1429 -> One (R 270 :: r1000)
+  | 1466 -> One (R 270 :: r1017)
+  | 1487 -> One (R 270 :: r1027)
+  | 1497 -> One (R 270 :: r1036)
+  | 1520 -> One (R 270 :: r1055)
+  | 1523 -> One (R 270 :: r1058)
+  | 1527 -> One (R 270 :: r1062)
+  | 1528 -> One (R 270 :: r1066)
+  | 1539 -> One (R 270 :: r1082)
+  | 1547 -> One (R 270 :: r1091)
+  | 1586 -> One (R 270 :: r1102)
+  | 1606 -> One (R 270 :: r1115)
+  | 1486 -> One (R 272 :: r1020)
+  | 1628 -> One (R 272 :: r1118)
+  | 1496 -> One (R 274 :: r1028)
+  | 385 -> One (R 276 :: r297)
+  | 1422 -> One (R 276 :: r991)
+  | 1484 -> One (R 276 :: r1019)
+  | 1592 -> One (R 276 :: r1103)
+  | 1626 -> One (R 276 :: r1117)
+  | 1633 -> One (R 276 :: r1120)
+  | 1653 -> One (R 276 :: r1122)
+  | 1756 -> One (R 276 :: r1145)
+  | 1767 -> One (R 276 :: r1151)
+  | 1772 -> One (R 276 :: r1154)
+  | 1294 -> One (R 278 :: r880)
+  | 1477 -> One (R 278 :: r1018)
+  | 431 -> One (R 281 :: r309)
+  | 1616 -> One (R 281 :: r1116)
+  | 1425 -> One (R 285 :: r992)
+  | 1595 -> One (R 287 :: r1104)
+  | 1754 -> One (R 289 :: r1143)
+  | 1762 -> One (R 291 :: r1147)
+  | 1763 -> One (R 291 :: r1148)
+  | 1764 -> One (R 291 :: r1149)
+  | 554 -> One ([R 297])
+  | 558 -> One ([R 299])
+  | 769 -> One ([R 301])
+  | 854 -> One ([R 302])
+  | 1036 -> One ([R 305])
+  | 276 -> One ([R 306])
+  | 279 -> One ([R 307])
+  | 278 -> One ([R 309])
+  | 277 -> One ([R 311])
+  | 275 -> One ([R 312])
+  | 655 -> One ([R 332])
+  | 665 -> One ([R 333])
+  | 666 -> One ([R 334])
+  | 664 -> One ([R 335])
+  | 667 -> One ([R 337])
+  | 457 | 1308 -> One ([R 338])
+  | 641 -> One ([R 345])
+  | 615 -> One ([R 346])
+  | 647 -> One ([R 349])
+  | 646 -> One ([R 351])
+  | 303 | 1176 -> One ([R 354])
+  | 1366 -> One ([R 356])
+  | 1364 -> One ([R 357])
+  | 1367 -> One ([R 358])
+  | 1365 -> One ([R 359])
+  | 591 -> One ([R 362])
+  | 1279 -> One ([R 364])
+  | 354 -> One ([R 365])
+  | 344 -> One ([R 366])
+  | 367 -> One ([R 367])
+  | 345 -> One ([R 368])
+  | 366 -> One ([R 369])
+  | 361 -> One ([R 370])
+  | 89 | 97 -> One ([R 383])
+  | 105 | 732 -> One ([R 384])
+  | 133 -> One ([R 385])
+  | 121 -> One ([R 387])
+  | 125 -> One ([R 389])
+  | 129 -> One ([R 391])
+  | 112 -> One ([R 392])
+  | 132 | 954 -> One ([R 393])
+  | 111 -> One ([R 394])
+  | 110 -> One ([R 395])
+  | 109 -> One ([R 396])
+  | 108 -> One ([R 397])
+  | 107 -> One ([R 398])
+  | 100 | 452 | 722 -> One ([R 399])
+  | 99 | 721 -> One ([R 400])
+  | 98 -> One ([R 401])
+  | 104 | 731 | 1023 -> One ([R 402])
+  | 103 | 730 -> One ([R 403])
+  | 87 -> One ([R 404])
+  | 101 -> One ([R 405])
+  | 114 -> One ([R 406])
+  | 106 -> One ([R 407])
+  | 113 -> One ([R 408])
+  | 102 -> One ([R 409])
+  | 131 -> One ([R 410])
+  | 134 -> One ([R 411])
+  | 130 -> One ([R 413])
+  | 236 -> One ([R 414])
+  | 235 -> One (R 415 :: r210)
+  | 190 -> One (R 416 :: r177)
+  | 191 -> One ([R 417])
+  | 555 -> One (R 418 :: r418)
+  | 556 -> One ([R 419])
+  | 979 -> One ([R 433])
+  | 149 -> One ([R 434])
+  | 528 -> One ([R 446])
+  | 522 -> One ([R 447])
+  | 523 -> One ([R 449])
+  | 521 | 733 -> One ([R 456])
+  | 846 -> One ([R 461])
+  | 848 -> One ([R 464])
+  | 586 -> One ([R 466])
+  | 1512 -> One ([R 470])
+  | 390 | 1214 -> One ([R 480])
+  | 1377 -> One ([R 482])
+  | 1375 -> One ([R 483])
+  | 1378 -> One ([R 484])
+  | 1376 -> One ([R 485])
+  | 1568 -> One (R 486 :: r1096)
+  | 481 -> One ([R 487])
+  | 342 -> One ([R 490])
+  | 343 -> One ([R 491])
+  | 341 -> One ([R 492])
+  | 414 -> One ([R 494])
+  | 413 -> One ([R 495])
+  | 415 -> One ([R 496])
+  | 410 -> One ([R 497])
+  | 411 -> One ([R 498])
+  | 1667 -> One ([R 500])
+  | 1665 -> One ([R 501])
+  | 648 -> One ([R 504])
+  | 612 -> One ([R 505])
+  | 934 -> One ([R 506])
+  | 933 -> One ([R 507])
+  | 264 -> One ([R 509])
+  | 228 -> One ([R 533])
+  | 868 -> One ([R 536])
+  | 869 -> One ([R 537])
+  | 1059 -> One ([R 539])
+  | 1060 -> One ([R 540])
+  | 548 -> One ([R 542])
+  | 549 -> One ([R 543])
+  | 982 -> One ([R 545])
+  | 983 -> One ([R 546])
+  | 783 -> One ([R 548])
+  | 787 -> One ([R 549])
+  | 1507 -> One ([R 554])
+  | 1476 -> One ([R 555])
+  | 1479 -> One ([R 556])
+  | 1478 -> One ([R 561])
+  | 1482 -> One ([R 564])
+  | 1481 -> One ([R 566])
+  | 1480 -> One ([R 567])
+  | 1508 -> One ([R 570])
+  | 450 -> One ([R 573])
+  | 447 -> One ([R 575])
+  | 713 -> One ([R 598])
+  | 765 -> One ([R 599])
+  | 764 | 779 -> One ([R 600])
+  | 716 | 761 -> One ([R 601])
+  | 876 | 928 -> One ([R 606])
+  | 763 -> One ([R 611])
+  | 505 -> One ([R 624])
+  | 508 -> One ([R 627])
+  | 509 -> One ([R 631])
+  | 551 -> One ([R 633])
+  | 513 -> One ([R 634])
+  | 550 -> One ([R 636])
+  | 531 -> One ([R 641])
+  | 28 -> One ([R 642])
+  | 8 -> One ([R 643])
+  | 52 -> One ([R 645])
+  | 51 -> One ([R 646])
+  | 50 -> One ([R 647])
+  | 49 -> One ([R 648])
+  | 48 -> One ([R 649])
+  | 47 -> One ([R 650])
+  | 46 -> One ([R 651])
+  | 45 -> One ([R 652])
+  | 44 -> One ([R 653])
+  | 43 -> One ([R 654])
+  | 42 -> One ([R 655])
+  | 41 -> One ([R 656])
+  | 40 -> One ([R 657])
+  | 39 -> One ([R 658])
+  | 38 -> One ([R 659])
+  | 37 -> One ([R 660])
+  | 36 -> One ([R 661])
+  | 35 -> One ([R 662])
+  | 34 -> One ([R 663])
+  | 33 -> One ([R 664])
+  | 32 -> One ([R 665])
+  | 31 -> One ([R 666])
+  | 30 -> One ([R 667])
+  | 29 -> One ([R 668])
+  | 27 -> One ([R 669])
+  | 26 -> One ([R 670])
+  | 25 -> One ([R 671])
+  | 24 -> One ([R 672])
+  | 23 -> One ([R 673])
+  | 22 -> One ([R 674])
+  | 21 -> One ([R 675])
+  | 20 -> One ([R 676])
+  | 19 -> One ([R 677])
+  | 18 -> One ([R 678])
+  | 17 -> One ([R 679])
+  | 16 -> One ([R 680])
+  | 15 -> One ([R 681])
+  | 14 -> One ([R 682])
+  | 13 -> One ([R 683])
+  | 12 -> One ([R 684])
+  | 11 -> One ([R 685])
+  | 10 -> One ([R 686])
+  | 9 -> One ([R 687])
+  | 7 -> One ([R 688])
+  | 6 -> One ([R 689])
+  | 5 -> One ([R 690])
+  | 4 -> One ([R 691])
+  | 3 -> One ([R 692])
+  | 1619 -> One ([R 693])
+  | 1639 -> One ([R 698])
+  | 1623 | 1638 -> One ([R 700])
+  | 1625 | 1640 -> One ([R 701])
+  | 1630 -> One ([R 703])
+  | 1620 -> One ([R 704])
+  | 1615 -> One ([R 705])
+  | 1618 -> One ([R 709])
+  | 1622 -> One ([R 712])
+  | 1621 -> One ([R 713])
+  | 1631 -> One ([R 715])
+  | 469 -> One ([R 717])
+  | 468 -> One ([R 718])
+  | 1744 -> One ([R 722])
+  | 1745 -> One ([R 723])
+  | 1747 -> One ([R 724])
+  | 1748 -> One ([R 725])
+  | 1746 -> One ([R 726])
+  | 1743 -> One ([R 727])
+  | 1750 -> One ([R 731])
+  | 205 -> One ([R 733])
+  | 618 -> One (R 742 :: r504)
+  | 420 -> One ([R 743])
+  | 160 -> One ([R 748])
+  | 162 -> One ([R 749])
+  | 714 -> One ([R 754])
+  | 990 -> One ([R 755])
+  | 1348 -> One ([R 763])
+  | 1174 -> One ([R 764])
+  | 1177 -> One ([R 765])
+  | 1175 -> One ([R 766])
+  | 1212 -> One ([R 767])
+  | 1215 -> One ([R 768])
+  | 1213 -> One ([R 769])
+  | 621 -> One ([R 774])
+  | 622 -> One ([R 775])
+  | 969 -> One (S (T T_WITH) :: r702)
+  | 632 | 1749 -> One (S (T T_UIDENT) :: r50)
+  | 211 -> One (S (T T_UIDENT) :: r199)
+  | 461 -> One (S (T T_TYPE) :: r344)
+  | 588 -> One (S (T T_TYPE) :: r459)
+  | 327 -> One (S (T T_STAR) :: r259)
+  | 1752 -> One (S (T T_SEMISEMI) :: r1142)
+  | 1759 -> One (S (T T_SEMISEMI) :: r1146)
+  | 395 -> One (S (T T_RPAREN) :: r54)
+  | 180 | 320 -> One (S (T T_RPAREN) :: r159)
+  | 287 -> One (S (T T_RPAREN) :: r226)
+  | 289 -> One (S (T T_RPAREN) :: r228)
+  | 296 -> One (S (T T_RPAREN) :: r231)
+  | 396 -> One (S (T T_RPAREN) :: r302)
+  | 516 -> One (S (T T_RPAREN) :: r407)
+  | 535 -> One (S (T T_RPAREN) :: r414)
+  | 604 -> One (S (T T_RPAREN) :: r482)
+  | 657 -> One (S (T T_RPAREN) :: r512)
+  | 955 -> One (S (T T_RPAREN) :: r691)
+  | 1698 -> One (S (T T_RPAREN) :: r1132)
+  | 193 -> One (S (T T_RBRACKET) :: r178)
+  | 300 | 321 -> One (S (T T_RBRACKET) :: r233)
+  | 398 -> One (S (T T_RBRACKET) :: r303)
+  | 961 -> One (S (T T_RBRACKET) :: r694)
+  | 963 -> One (S (T T_RBRACKET) :: r695)
+  | 242 -> One (S (T T_QUOTE) :: r213)
+  | 1387 -> One (S (T T_OPEN) :: r969)
+  | 1531 -> One (S (T T_OPEN) :: r1073)
+  | 150 -> One (S (T T_MODULE) :: r100)
+  | 333 -> One (S (T T_MINUSGREATER) :: r262)
+  | 1451 -> One (S (T T_MINUSGREATER) :: r1006)
+  | 115 -> One (S (T T_LPAREN) :: r83)
+  | 402 -> One (S (T T_LPAREN) :: r306)
+  | 146 -> One (S (T T_LIDENT) :: r95)
+  | 304 -> One (S (T T_LIDENT) :: r249)
+  | 563 -> One (S (T T_LIDENT) :: r424)
+  | 571 -> One (S (T T_LIDENT) :: r430)
+  | 747 -> One (S (T T_LIDENT) :: r611)
+  | 749 -> One (S (T T_LIDENT) :: r612)
+  | 753 -> One (S (T T_LIDENT) :: r614)
+  | 1178 -> One (S (T T_LIDENT) :: r786)
+  | 1216 -> One (S (T T_LIDENT) :: r814)
+  | 1578 -> One (S (T T_LIDENT) :: r1099)
+  | 445 -> One (S (T T_INT) :: r329)
+  | 448 -> One (S (T T_INT) :: r330)
+  | 766 -> One (S (T T_IN) :: r624)
+  | 770 -> One (S (T T_IN) :: r626)
+  | 1551 -> One (S (T T_IN) :: r1093)
+  | 672 -> One (S (T T_GREATERRBRACE) :: r520)
+  | 1062 -> One (S (T T_GREATERRBRACE) :: r725)
+  | 185 -> One (S (T T_GREATER) :: r164)
+  | 282 -> One (S (T T_GREATER) :: r225)
+  | 1104 -> One (S (T T_EQUAL) :: r748)
+  | 1128 -> One (S (T T_EQUAL) :: r760)
+  | 1168 -> One (S (T T_EQUAL) :: r783)
+  | 1186 -> One (S (T T_EQUAL) :: r788)
+  | 1721 -> One (S (T T_EOF) :: r1136)
+  | 1725 -> One (S (T T_EOF) :: r1137)
+  | 1730 -> One (S (T T_EOF) :: r1138)
+  | 1733 -> One (S (T T_EOF) :: r1139)
+  | 1737 -> One (S (T T_EOF) :: r1140)
+  | 1776 -> One (S (T T_EOF) :: r1155)
+  | 1049 -> One (S (T T_END) :: r724)
+  | 117 -> One (S (T T_DOTDOT) :: r84)
+  | 179 -> One (S (T T_DOTDOT) :: r158)
+  | 355 -> One (S (T T_DOTDOT) :: r266)
+  | 356 -> One (S (T T_DOTDOT) :: r267)
+  | 79 -> One (S (T T_DOT) :: r49)
+  | 207 -> One (S (T T_DOT) :: r195)
+  | 266 -> One (S (T T_DOT) :: r222)
+  | 487 | 862 | 911 -> One (S (T T_DOT) :: r389)
+  | 642 -> One (S (T T_DOT) :: r511)
+  | 1123 -> One (S (T T_DOT) :: r758)
+  | 1201 -> One (S (T T_DOT) :: r811)
+  | 186 -> One (S (T T_COLON) :: r169)
+  | 606 -> One (S (T T_COLON) :: r485)
+  | 1445 -> One (S (T T_COLON) :: r1004)
+  | 483 -> One (S (T T_BARRBRACKET) :: r375)
+  | 560 -> One (S (T T_BARRBRACKET) :: r419)
+  | 670 -> One (S (T T_BARRBRACKET) :: r515)
+  | 957 -> One (S (T T_BARRBRACKET) :: r692)
+  | 959 -> One (S (T T_BARRBRACKET) :: r693)
+  | 1067 -> One (S (T T_BARRBRACKET) :: r726)
+  | 253 -> One (S (T T_BAR) :: r216)
+  | 443 -> One (S (N N_pattern) :: r327)
+  | 697 | 1011 -> One (S (N N_pattern) :: r332)
+  | 496 -> One (S (N N_pattern) :: r391)
+  | 524 -> One (S (N N_pattern) :: r411)
+  | 526 -> One (S (N N_pattern) :: r412)
+  | 537 -> One (S (N N_pattern) :: r415)
+  | 539 -> One (S (N N_pattern) :: r416)
+  | 838 -> One (S (N N_pattern) :: r658)
+  | 840 -> One (S (N N_pattern) :: r659)
+  | 842 -> One (S (N N_pattern) :: r660)
+  | 849 -> One (S (N N_pattern) :: r662)
+  | 1235 -> One (S (N N_pattern) :: r826)
+  | 460 -> One (S (N N_module_type) :: r340)
+  | 608 -> One (S (N N_module_type) :: r487)
+  | 639 -> One (S (N N_module_type) :: r509)
+  | 661 -> One (S (N N_module_type) :: r514)
+  | 1081 -> One (S (N N_module_type) :: r738)
+  | 1143 -> One (S (N N_module_type) :: r762)
+  | 1146 -> One (S (N N_module_type) :: r764)
+  | 1149 -> One (S (N N_module_type) :: r766)
+  | 1244 -> One (S (N N_module_type) :: r838)
+  | 1693 -> One (S (N N_module_type) :: r1131)
+  | 465 -> One (S (N N_module_expr) :: r346)
+  | 579 -> One (S (N N_let_pattern) :: r450)
+  | 477 -> One (S (N N_expr) :: r360)
+  | 674 -> One (S (N N_expr) :: r523)
+  | 678 -> One (S (N N_expr) :: r534)
+  | 745 -> One (S (N N_expr) :: r610)
+  | 760 -> One (S (N N_expr) :: r622)
+  | 774 -> One (S (N N_expr) :: r627)
+  | 776 -> One (S (N N_expr) :: r628)
+  | 781 -> One (S (N N_expr) :: r629)
+  | 788 -> One (S (N N_expr) :: r632)
+  | 790 -> One (S (N N_expr) :: r633)
+  | 792 -> One (S (N N_expr) :: r634)
+  | 794 -> One (S (N N_expr) :: r635)
+  | 796 -> One (S (N N_expr) :: r636)
+  | 798 -> One (S (N N_expr) :: r637)
+  | 800 -> One (S (N N_expr) :: r638)
+  | 802 -> One (S (N N_expr) :: r639)
+  | 804 -> One (S (N N_expr) :: r640)
+  | 806 -> One (S (N N_expr) :: r641)
+  | 808 -> One (S (N N_expr) :: r642)
+  | 810 -> One (S (N N_expr) :: r643)
+  | 812 -> One (S (N N_expr) :: r644)
+  | 814 -> One (S (N N_expr) :: r645)
+  | 816 -> One (S (N N_expr) :: r646)
+  | 818 -> One (S (N N_expr) :: r647)
+  | 820 -> One (S (N N_expr) :: r648)
+  | 822 -> One (S (N N_expr) :: r649)
+  | 824 -> One (S (N N_expr) :: r650)
+  | 826 -> One (S (N N_expr) :: r651)
+  | 883 -> One (S (N N_expr) :: r677)
+  | 888 -> One (S (N N_expr) :: r678)
+  | 893 -> One (S (N N_expr) :: r682)
+  | 899 -> One (S (N N_expr) :: r683)
+  | 904 -> One (S (N N_expr) :: r684)
+  | 909 -> One (S (N N_expr) :: r685)
+  | 916 -> One (S (N N_expr) :: r686)
+  | 921 -> One (S (N N_expr) :: r687)
+  | 926 -> One (S (N N_expr) :: r688)
+  | 929 -> One (S (N N_expr) :: r689)
+  | 1046 -> One (S (N N_expr) :: r723)
+  | 574 -> One (Sub (r1) :: r434)
+  | 693 -> One (Sub (r1) :: r552)
+  | 1003 -> One (Sub (r1) :: r712)
+  | 1237 -> One (Sub (r1) :: r827)
+  | 1706 -> One (Sub (r1) :: r1134)
+  | 1708 -> One (Sub (r1) :: r1135)
+  | 2 -> One (Sub (r11) :: r12)
+  | 55 -> One (Sub (r11) :: r13)
+  | 59 -> One (Sub (r11) :: r18)
+  | 91 -> One (Sub (r11) :: r58)
+  | 371 -> One (Sub (r11) :: r277)
+  | 784 -> One (Sub (r11) :: r631)
+  | 1233 -> One (Sub (r11) :: r825)
+  | 1264 -> One (Sub (r11) :: r850)
+  | 1532 -> One (Sub (r11) :: r1078)
+  | 691 -> One (Sub (r32) :: r549)
+  | 1040 -> One (Sub (r32) :: r722)
+  | 1704 -> One (Sub (r34) :: r1133)
+  | 74 -> One (Sub (r41) :: r42)
+  | 677 -> One (Sub (r41) :: r532)
+  | 712 -> One (Sub (r41) :: r585)
+  | 741 -> One (Sub (r41) :: r602)
+  | 751 -> One (Sub (r41) :: r613)
+  | 877 -> One (Sub (r41) :: r676)
+  | 197 -> One (Sub (r44) :: r189)
+  | 217 -> One (Sub (r44) :: r200)
+  | 291 -> One (Sub (r44) :: r229)
+  | 541 -> One (Sub (r59) :: r417)
+  | 844 -> One (Sub (r59) :: r661)
+  | 206 -> One (Sub (r61) :: r193)
+  | 225 -> One (Sub (r61) :: r204)
+  | 332 -> One (Sub (r61) :: r260)
+  | 1015 -> One (Sub (r61) :: r718)
+  | 220 -> One (Sub (r63) :: r203)
+  | 1453 -> One (Sub (r63) :: r1009)
+  | 204 -> One (Sub (r65) :: r192)
+  | 239 -> One (Sub (r67) :: r211)
+  | 625 -> One (Sub (r67) :: r506)
+  | 294 -> One (Sub (r69) :: r230)
+  | 298 -> One (Sub (r69) :: r232)
+  | 381 -> One (Sub (r69) :: r296)
+  | 493 -> One (Sub (r69) :: r390)
+  | 566 -> One (Sub (r69) :: r429)
+  | 581 -> One (Sub (r69) :: r451)
+  | 734 -> One (Sub (r69) :: r598)
+  | 831 -> One (Sub (r69) :: r657)
+  | 973 -> One (Sub (r69) :: r703)
+  | 977 -> One (Sub (r69) :: r706)
+  | 1026 -> One (Sub (r69) :: r721)
+  | 1157 -> One (Sub (r69) :: r768)
+  | 1358 -> One (Sub (r69) :: r949)
+  | 1400 -> One (Sub (r69) :: r983)
+  | 166 -> One (Sub (r91) :: r153)
+  | 267 -> One (Sub (r91) :: r223)
+  | 1741 -> One (Sub (r91) :: r1141)
+  | 1293 -> One (Sub (r102) :: r879)
+  | 501 -> One (Sub (r115) :: r399)
+  | 172 -> One (Sub (r148) :: r154)
+  | 163 -> One (Sub (r150) :: r152)
+  | 1350 -> One (Sub (r150) :: r943)
+  | 176 -> One (Sub (r156) :: r157)
+  | 368 -> One (Sub (r156) :: r274)
+  | 1670 -> One (Sub (r156) :: r1125)
+  | 232 -> One (Sub (r172) :: r205)
+  | 195 -> One (Sub (r174) :: r180)
+  | 199 -> One (Sub (r174) :: r191)
+  | 196 -> One (Sub (r186) :: r188)
+  | 208 -> One (Sub (r196) :: r198)
+  | 633 -> One (Sub (r196) :: r507)
+  | 1309 -> One (Sub (r196) :: r898)
+  | 261 -> One (Sub (r218) :: r220)
+  | 302 -> One (Sub (r241) :: r243)
+  | 324 -> One (Sub (r241) :: r257)
+  | 349 -> One (Sub (r241) :: r265)
+  | 357 -> One (Sub (r241) :: r269)
+  | 362 -> One (Sub (r241) :: r271)
+  | 323 -> One (Sub (r254) :: r255)
+  | 394 -> One (Sub (r299) :: r301)
+  | 417 -> One (Sub (r299) :: r308)
+  | 1250 -> One (Sub (r334) :: r842)
+  | 1312 -> One (Sub (r334) :: r903)
+  | 951 -> One (Sub (r369) :: r690)
+  | 485 -> One (Sub (r385) :: r387)
+  | 594 -> One (Sub (r394) :: r460)
+  | 510 -> One (Sub (r402) :: r403)
+  | 562 -> One (Sub (r422) :: r423)
+  | 576 -> One (Sub (r422) :: r444)
+  | 564 -> One (Sub (r426) :: r428)
+  | 572 -> One (Sub (r426) :: r433)
+  | 575 -> One (Sub (r440) :: r443)
+  | 577 -> One (Sub (r446) :: r447)
+  | 698 -> One (Sub (r453) :: r564)
+  | 1012 -> One (Sub (r453) :: r715)
+  | 1117 -> One (Sub (r453) :: r754)
+  | 1195 -> One (Sub (r453) :: r809)
+  | 1223 -> One (Sub (r453) :: r822)
+  | 1108 -> One (Sub (r455) :: r749)
+  | 1326 -> One (Sub (r492) :: r911)
+  | 637 -> One (Sub (r497) :: r508)
+  | 617 -> One (Sub (r499) :: r500)
+  | 675 -> One (Sub (r529) :: r531)
+  | 968 -> One (Sub (r529) :: r700)
+  | 1020 -> One (Sub (r557) :: r719)
+  | 965 -> One (Sub (r696) :: r698)
+  | 1088 -> One (Sub (r729) :: r739)
+  | 1161 -> One (Sub (r774) :: r776)
+  | 1189 -> One (Sub (r793) :: r795)
+  | 1194 -> One (Sub (r801) :: r804)
+  | 1222 -> One (Sub (r801) :: r817)
+  | 1333 -> One (Sub (r891) :: r912)
+  | 1574 -> One (Sub (r922) :: r1098)
+  | 1598 -> One (Sub (r922) :: r1107)
+  | 1543 -> One (Sub (r975) :: r1085)
+  | 1530 -> One (Sub (r1040) :: r1068)
+  | 1602 -> One (Sub (r1043) :: r1108)
+  | 773 -> One (r0)
+  | 1720 -> One (r2)
+  | 1719 -> One (r3)
+  | 1718 -> One (r4)
+  | 1717 -> One (r5)
+  | 1716 -> One (r6)
+  | 58 -> One (r7)
+  | 53 -> One (r8)
+  | 54 -> One (r10)
+  | 57 -> One (r12)
+  | 56 -> One (r13)
+  | 1632 -> One (r14)
+  | 1715 -> One (r16)
+  | 1714 -> One (r17)
+  | 60 -> One (r18)
+  | 1713 -> One (r19)
+  | 1712 -> One (r20)
+  | 1711 -> One (r21)
+  | 1710 -> One (r22)
+  | 63 -> One (r23)
+  | 62 -> One (r24)
+  | 64 -> One (r25)
+  | 1703 -> One (r26)
+  | 67 -> One (r27)
+  | 66 -> One (r28)
+  | 1037 -> One (r29)
+  | 1035 -> One (r30)
+  | 692 -> One (r31)
+  | 1042 -> One (r33)
+  | 1702 -> One (r35)
+  | 1701 -> One (r36)
+  | 1700 -> One (r37)
+  | 70 -> One (r38)
+  | 69 -> One (r39)
+  | 73 -> One (r40)
+  | 1687 -> One (r42)
+  | 78 -> One (r43)
+  | 83 -> One (r45)
+  | 77 -> One (r46)
+  | 76 -> One (r47)
+  | 82 -> One (r48)
+  | 80 -> One (r49)
+  | 81 -> One (r50)
+  | 85 -> One (r51)
+  | 1697 -> One (r52)
+  | 1696 -> One (r53)
+  | 88 -> One (r54)
+  | 90 | 476 | 676 | 989 -> One (r55)
+  | 1686 -> One (r56)
+  | 1685 -> One (r57)
+  | 92 -> One (r58)
+  | 140 -> One (r60)
+  | 224 -> One (r62)
+  | 203 -> One (r64)
+  | 240 -> One (r66)
+  | 250 -> One (r68)
+  | 1684 -> One (r70)
+  | 1683 -> One (r71)
+  | 139 -> One (r72)
+  | 138 -> One (r73)
+  | 95 -> One (r74)
+  | 94 -> One (r75)
+  | 135 -> One (r76)
+  | 137 -> One (r78)
+  | 136 -> One (r79)
+  | 96 -> One (r80)
+  | 120 -> One (r81)
+  | 119 -> One (r82)
+  | 116 -> One (r83)
+  | 118 -> One (r84)
+  | 124 -> One (r85)
+  | 123 -> One (r86)
+  | 128 -> One (r87)
+  | 127 -> One (r88)
+  | 141 | 154 -> One (r89)
+  | 144 -> One (r90)
+  | 145 -> One (r92)
+  | 142 -> One (r93)
+  | 148 -> One (r94)
+  | 147 -> One (r95)
+  | 1682 -> One (r96)
+  | 1681 -> One (r97)
+  | 153 -> One (r98)
+  | 152 -> One (r99)
+  | 151 -> One (r100)
+  | 1511 -> One (r101)
+  | 1680 -> One (r103)
+  | 1679 -> One (r104)
+  | 156 -> One (r105)
+  | 425 -> One (r106)
+  | 424 -> One (r107)
+  | 423 -> One (r108)
+  | 184 -> One (r114)
+  | 316 -> One (r116)
+  | 348 -> One (r118)
+  | 347 -> One (r119)
+  | 346 | 416 -> One (r120)
+  | 1666 -> One (r122)
+  | 1678 -> One (r124)
+  | 1677 -> One (r125)
+  | 1676 -> One (r126)
+  | 1675 -> One (r127)
+  | 1674 -> One (r128)
+  | 387 -> One (r132)
+  | 380 -> One (r133)
+  | 379 -> One (r134)
+  | 1664 -> One (r138)
+  | 1663 -> One (r139)
+  | 1662 -> One (r140)
+  | 1661 -> One (r141)
+  | 1660 -> One (r142)
+  | 165 -> One (r144)
+  | 168 -> One (r146)
+  | 164 -> One (r147)
+  | 169 -> One (r149)
+  | 171 -> One (r151)
+  | 170 -> One (r152)
+  | 167 -> One (r153)
+  | 173 -> One (r154)
+  | 352 -> One (r155)
+  | 353 -> One (r157)
+  | 317 -> One (r158)
+  | 181 -> One (r159)
+  | 286 -> One (r160)
+  | 285 -> One (r161)
+  | 284 -> One (r162)
+  | 183 -> One (r163)
+  | 281 -> One (r164)
+  | 280 -> One (r165)
+  | 272 -> One (r167)
+  | 271 -> One (r168)
+  | 187 -> One (r169)
+  | 248 -> One (r171)
+  | 229 -> One (r173)
+  | 260 -> One (r175)
+  | 259 -> One (r176)
+  | 192 -> One (r177)
+  | 194 -> One (r178)
+  | 258 -> One (r179)
+  | 257 -> One (r180)
+  | 201 -> One (r181)
+  | 200 -> One (r182)
+  | 247 -> One (r184)
+  | 234 -> One (r185)
+  | 252 -> One (r187)
+  | 251 -> One (r188)
+  | 198 -> One (r189)
+  | 231 -> One (r190)
+  | 230 -> One (r191)
+  | 227 -> One (r192)
+  | 216 -> One (r193)
+  | 214 -> One (r194)
+  | 213 -> One (r195)
+  | 210 -> One (r197)
+  | 209 -> One (r198)
+  | 212 -> One (r199)
+  | 218 -> One (r200)
+  | 223 -> One (r201)
+  | 222 -> One (r202)
+  | 221 -> One (r203)
+  | 226 -> One (r204)
+  | 233 -> One (r205)
+  | 246 -> One (r206)
+  | 245 -> One (r208)
+  | 238 -> One (r209)
+  | 237 -> One (r210)
+  | 241 -> One (r211)
+  | 244 -> One (r212)
+  | 243 -> One (r213)
+  | 256 -> One (r214)
+  | 255 -> One (r215)
+  | 254 -> One (r216)
+  | 265 -> One (r217)
+  | 263 -> One (r219)
+  | 262 -> One (r220)
+  | 270 -> One (r221)
+  | 269 -> One (r222)
+  | 268 -> One (r223)
+  | 274 -> One (r224)
+  | 283 -> One (r225)
+  | 288 -> One (r226)
+  | 293 -> One (r227)
+  | 290 -> One (r228)
+  | 292 -> One (r229)
+  | 295 -> One (r230)
+  | 297 -> One (r231)
+  | 299 -> One (r232)
+  | 301 -> One (r233)
+  | 315 -> One (r240)
+  | 312 -> One (r242)
+  | 311 -> One (r243)
+  | 310 -> One (r244)
+  | 309 -> One (r245)
+  | 308 -> One (r246)
+  | 307 -> One (r247)
+  | 306 -> One (r248)
+  | 305 -> One (r249)
+  | 338 -> One (r250)
+  | 337 -> One (r251)
+  | 322 | 393 -> One (r252)
+  | 331 -> One (r253)
+  | 330 -> One (r255)
+  | 326 -> One (r256)
+  | 325 -> One (r257)
+  | 329 -> One (r258)
+  | 328 -> One (r259)
+  | 336 -> One (r260)
+  | 335 -> One (r261)
+  | 334 -> One (r262)
+  | 340 | 392 -> One (r263)
+  | 351 -> One (r264)
+  | 350 -> One (r265)
+  | 365 -> One (r266)
+  | 360 -> One (r267)
+  | 359 -> One (r268)
+  | 358 -> One (r269)
+  | 364 -> One (r270)
+  | 363 -> One (r271)
+  | 1659 -> One (r272)
+  | 370 -> One (r273)
+  | 369 -> One (r274)
+  | 1658 -> One (r275)
+  | 1657 -> One (r276)
+  | 372 -> One (r277)
+  | 412 -> One (r278)
+  | 430 -> One (r280)
+  | 429 -> One (r281)
+  | 428 -> One (r282)
+  | 427 -> One (r283)
+  | 426 -> One (r284)
+  | 409 -> One (r288)
+  | 408 -> One (r289)
+  | 391 -> One (r290)
+  | 389 -> One (r291)
+  | 388 -> One (r292)
+  | 384 -> One (r294)
+  | 383 -> One (r295)
+  | 382 -> One (r296)
+  | 386 -> One (r297)
+  | 400 -> One (r298)
+  | 407 -> One (r300)
+  | 406 -> One (r301)
+  | 397 -> One (r302)
+  | 399 -> One (r303)
+  | 405 -> One (r304)
+  | 404 -> One (r305)
+  | 403 -> One (r306)
+  | 419 -> One (r307)
+  | 418 -> One (r308)
+  | 1656 -> One (r309)
+  | 1652 -> One (r310)
+  | 1651 -> One (r311)
+  | 1650 -> One (r312)
+  | 1649 -> One (r313)
+  | 1648 -> One (r314)
+  | 1647 -> One (r315)
+  | 437 -> One (r316)
+  | 436 -> One (r317)
+  | 1646 -> One (r318)
+  | 1645 -> One (r319)
+  | 439 -> One (r320)
+  | 1644 -> One (r321)
+  | 1643 -> One (r322)
+  | 1160 -> One (r323)
+  | 442 -> One (r324)
+  | 441 -> One (r325)
+  | 1156 -> One (r326)
+  | 1155 -> One (r327)
+  | 444 -> One (r328)
+  | 446 -> One (r329)
+  | 449 -> One (r330)
+  | 1025 -> One (r331)
+  | 1024 -> One (r332)
+  | 456 -> One (r333)
+  | 459 -> One (r335)
+  | 458 -> One (r336)
+  | 455 -> One (r337)
+  | 454 -> One (r338)
+  | 1154 -> One (r339)
+  | 1153 -> One (r340)
+  | 1152 -> One (r341)
+  | 464 -> One (r342)
+  | 463 -> One (r343)
+  | 462 -> One (r344)
+  | 660 -> One (r345)
+  | 659 -> One (r346)
+  | 1142 -> One (r347)
+  | 1141 -> One (r348)
+  | 467 -> One (r349)
+  | 1140 -> One (r350)
+  | 1139 -> One (r351)
+  | 1138 -> One (r352)
+  | 472 -> One (r353)
+  | 471 -> One (r354)
+  | 1137 -> One (r355)
+  | 1136 -> One (r356)
+  | 1135 -> One (r357)
+  | 475 -> One (r358)
+  | 474 -> One (r359)
+  | 1134 -> One (r360)
+  | 533 -> One (r361)
+  | 847 -> One (r364)
+  | 837 -> One (r366)
+  | 836 -> One (r367)
+  | 835 -> One (r368)
+  | 1133 -> One (r370)
+  | 1132 -> One (r371)
+  | 482 -> One (r372)
+  | 480 -> One (r373)
+  | 479 -> One (r374)
+  | 559 -> One (r375)
+  | 547 -> One (r376)
+  | 546 -> One (r378)
+  | 545 -> One (r379)
+  | 486 -> One (r380)
+  | 553 -> One (r382)
+  | 495 -> One (r383)
+  | 492 -> One (r384)
+  | 491 -> One (r386)
+  | 490 -> One (r387)
+  | 489 -> One (r388)
+  | 488 -> One (r389)
+  | 494 -> One (r390)
+  | 552 -> One (r391)
+  | 506 | 830 -> One (r393)
+  | 507 -> One (r395)
+  | 499 -> One (r396)
+  | 498 -> One (r397)
+  | 500 -> One (r398)
+  | 502 -> One (r399)
+  | 512 -> One (r401)
+  | 511 -> One (r403)
+  | 544 -> One (r404)
+  | 543 -> One (r405)
+  | 515 -> One (r406)
+  | 517 -> One (r407)
+  | 534 -> One (r408)
+  | 520 -> One (r409)
+  | 519 -> One (r410)
+  | 525 -> One (r411)
+  | 527 -> One (r412)
+  | 530 -> One (r413)
+  | 536 -> One (r414)
+  | 538 -> One (r415)
+  | 540 -> One (r416)
+  | 542 -> One (r417)
+  | 557 -> One (r418)
+  | 561 -> One (r419)
+  | 1103 -> One (r420)
+  | 596 -> One (r421)
+  | 1131 -> One (r423)
+  | 570 -> One (r424)
+  | 565 -> One (r425)
+  | 569 -> One (r427)
+  | 568 -> One (r428)
+  | 567 -> One (r429)
+  | 1115 -> One (r430)
+  | 1114 -> One (r431)
+  | 1113 -> One (r432)
+  | 573 -> One (r433)
+  | 1112 -> One (r434)
+  | 947 -> One (r435)
+  | 946 -> One (r436)
+  | 945 -> One (r437)
+  | 953 -> One (r439)
+  | 950 -> One (r441)
+  | 949 -> One (r442)
+  | 948 -> One (r443)
+  | 1111 -> One (r444)
+  | 578 -> One (r445)
+  | 587 -> One (r447)
+  | 585 -> One (r448)
+  | 584 -> One (r449)
+  | 583 -> One (r450)
+  | 582 -> One (r451)
+  | 590 -> One (r452)
+  | 1107 -> One (r454)
+  | 1110 -> One (r456)
+  | 593 -> One (r457)
+  | 592 -> One (r458)
+  | 589 -> One (r459)
+  | 595 -> One (r460)
+  | 1074 -> One (r461)
+  | 1073 -> One (r462)
+  | 1072 -> One (r463)
+  | 1071 -> One (r464)
+  | 1070 -> One (r465)
+  | 598 -> One (r466)
+  | 1102 -> One (r467)
+  | 1101 -> One (r468)
+  | 1100 -> One (r469)
+  | 1099 -> One (r470)
+  | 1098 -> One (r471)
+  | 1617 -> One (r472)
+  | 1069 -> One (r473)
+  | 669 -> One (r474)
+  | 668 -> One (r475)
+  | 601 -> One (r476)
+  | 600 -> One (r477)
+  | 656 -> One (r478)
+  | 654 -> One (r479)
+  | 653 -> One (r480)
+  | 603 -> One (r481)
+  | 605 -> One (r482)
+  | 652 -> One (r483)
+  | 651 -> One (r484)
+  | 607 -> One (r485)
+  | 650 -> One (r486)
+  | 649 -> One (r487)
+  | 616 -> One (r488)
+  | 614 -> One (r489)
+  | 613 -> One (r490)
+  | 610 -> One (r491)
+  | 631 -> One (r493)
+  | 630 -> One (r494)
+  | 629 -> One (r495)
+  | 628 -> One (r496)
+  | 635 -> One (r498)
+  | 636 -> One (r500)
+  | 624 -> One (r501)
+  | 623 -> One (r502)
+  | 620 -> One (r503)
+  | 619 -> One (r504)
+  | 627 -> One (r505)
+  | 626 -> One (r506)
+  | 634 -> One (r507)
+  | 638 -> One (r508)
+  | 640 -> One (r509)
+  | 645 -> One (r510)
+  | 643 -> One (r511)
+  | 658 -> One (r512)
+  | 663 -> One (r513)
+  | 662 -> One (r514)
+  | 1066 -> One (r515)
+  | 867 -> One (r516)
+  | 1065 -> One (r518)
+  | 1064 -> One (r519)
+  | 1061 -> One (r520)
+  | 1058 -> One (r521)
+  | 673 -> One (r522)
+  | 1057 -> One (r523)
+  | 981 -> One (r524)
+  | 980 -> One (r525)
+  | 972 -> One (r526)
+  | 984 -> One (r528)
+  | 1056 -> One (r530)
+  | 1055 -> One (r531)
+  | 1054 -> One (r532)
+  | 1053 -> One (r533)
+  | 1052 -> One (r534)
+  | 1051 -> One (r535)
+  | 681 -> One (r536)
+  | 680 -> One (r537)
+  | 1048 -> One (r538)
+  | 684 -> One (r539)
+  | 683 -> One (r540)
+  | 1045 -> One (r541)
+  | 1044 -> One (r542)
+  | 1043 -> One (r543)
+  | 687 -> One (r544)
+  | 686 -> One (r545)
+  | 1039 -> One (r546)
+  | 690 -> One (r547)
+  | 689 -> One (r548)
+  | 1038 -> One (r549)
+  | 1034 -> One (r550)
+  | 1033 -> One (r551)
+  | 1032 -> One (r552)
+  | 1019 -> One (r553)
+  | 1010 -> One (r555)
+  | 701 -> One (r556)
+  | 1031 -> One (r558)
+  | 1030 -> One (r559)
+  | 696 -> One (r560)
+  | 695 -> One (r561)
+  | 1029 -> One (r562)
+  | 700 -> One (r563)
+  | 699 -> One (r564)
+  | 1002 -> One (r565)
+  | 1001 -> One (r566)
+  | 1000 -> One (r567)
+  | 999 -> One (r568)
+  | 706 -> One (r569)
+  | 705 -> One (r570)
+  | 704 -> One (r571)
+  | 703 -> One (r572)
+  | 993 -> One (r573)
+  | 998 -> One (r575)
+  | 997 -> One (r576)
+  | 996 -> One (r577)
+  | 995 -> One (r578)
+  | 994 -> One (r579)
+  | 991 -> One (r580)
+  | 711 -> One (r581)
+  | 710 -> One (r582)
+  | 709 -> One (r583)
+  | 708 -> One (r584)
+  | 715 -> One (r585)
+  | 720 -> One (r586)
+  | 719 -> One (r587)
+  | 718 | 988 -> One (r588)
+  | 987 -> One (r589)
+  | 729 -> One (r590)
+  | 728 -> One (r591)
+  | 727 -> One (r592)
+  | 726 -> One (r593)
+  | 725 -> One (r594)
+  | 724 -> One (r595)
+  | 944 -> One (r596)
+  | 736 -> One (r597)
+  | 735 -> One (r598)
+  | 740 -> One (r599)
+  | 739 -> One (r600)
+  | 738 -> One (r601)
+  | 742 -> One (r602)
+  | 887 | 940 -> One (r603)
+  | 886 | 939 -> One (r604)
+  | 885 | 938 -> One (r605)
+  | 743 | 879 -> One (r606)
+  | 882 | 937 -> One (r607)
+  | 881 | 936 -> One (r608)
+  | 744 | 880 -> One (r609)
+  | 935 -> One (r610)
+  | 748 -> One (r611)
+  | 750 -> One (r612)
+  | 752 -> One (r613)
+  | 754 -> One (r614)
+  | 861 | 908 -> One (r615)
+  | 860 | 907 -> One (r616)
+  | 859 | 906 -> One (r617)
+  | 755 | 895 -> One (r618)
+  | 758 | 898 -> One (r619)
+  | 757 | 897 -> One (r620)
+  | 756 | 896 -> One (r621)
+  | 855 -> One (r622)
+  | 768 -> One (r623)
+  | 767 -> One (r624)
+  | 772 -> One (r625)
+  | 771 -> One (r626)
+  | 775 -> One (r627)
+  | 777 -> One (r628)
+  | 782 -> One (r629)
+  | 786 -> One (r630)
+  | 785 -> One (r631)
+  | 789 -> One (r632)
+  | 791 -> One (r633)
+  | 793 -> One (r634)
+  | 795 -> One (r635)
+  | 797 -> One (r636)
+  | 799 -> One (r637)
+  | 801 -> One (r638)
+  | 803 -> One (r639)
+  | 805 -> One (r640)
+  | 807 -> One (r641)
+  | 809 -> One (r642)
+  | 811 -> One (r643)
+  | 813 -> One (r644)
+  | 815 -> One (r645)
+  | 817 -> One (r646)
+  | 819 -> One (r647)
+  | 821 -> One (r648)
+  | 823 -> One (r649)
+  | 825 -> One (r650)
+  | 827 -> One (r651)
+  | 852 -> One (r652)
+  | 851 -> One (r653)
+  | 829 -> One (r654)
+  | 834 -> One (r655)
+  | 833 -> One (r656)
+  | 832 -> One (r657)
+  | 839 -> One (r658)
+  | 841 -> One (r659)
+  | 843 -> One (r660)
+  | 845 -> One (r661)
+  | 850 -> One (r662)
+  | 858 | 903 -> One (r663)
+  | 857 | 902 -> One (r664)
+  | 856 | 901 -> One (r665)
+  | 872 | 920 -> One (r666)
+  | 871 | 919 -> One (r667)
+  | 870 | 918 -> One (r668)
+  | 863 | 912 -> One (r669)
+  | 866 | 915 -> One (r670)
+  | 865 | 914 -> One (r671)
+  | 864 | 913 -> One (r672)
+  | 875 | 925 -> One (r673)
+  | 874 | 924 -> One (r674)
+  | 873 | 923 -> One (r675)
+  | 878 -> One (r676)
+  | 884 -> One (r677)
+  | 889 -> One (r678)
+  | 892 | 943 -> One (r679)
+  | 891 | 942 -> One (r680)
+  | 890 | 941 -> One (r681)
+  | 894 -> One (r682)
+  | 900 -> One (r683)
+  | 905 -> One (r684)
+  | 910 -> One (r685)
+  | 917 -> One (r686)
+  | 922 -> One (r687)
+  | 927 -> One (r688)
+  | 930 -> One (r689)
+  | 952 -> One (r690)
+  | 956 -> One (r691)
+  | 958 -> One (r692)
+  | 960 -> One (r693)
+  | 962 -> One (r694)
+  | 964 -> One (r695)
+  | 967 -> One (r697)
+  | 966 -> One (r698)
+  | 986 -> One (r699)
+  | 985 -> One (r700)
+  | 971 -> One (r701)
+  | 970 -> One (r702)
+  | 974 -> One (r703)
+  | 976 -> One (r704)
+  | 975 | 1116 -> One (r705)
+  | 978 -> One (r706)
+  | 1009 -> One (r707)
+  | 1008 -> One (r708)
+  | 1007 -> One (r709)
+  | 1006 -> One (r710)
+  | 1005 -> One (r711)
+  | 1004 -> One (r712)
+  | 1022 -> One (r713)
+  | 1014 -> One (r714)
+  | 1013 -> One (r715)
+  | 1018 -> One (r716)
+  | 1017 -> One (r717)
+  | 1016 -> One (r718)
+  | 1021 -> One (r719)
+  | 1028 -> One (r720)
+  | 1027 -> One (r721)
+  | 1041 -> One (r722)
+  | 1047 -> One (r723)
+  | 1050 -> One (r724)
+  | 1063 -> One (r725)
+  | 1068 -> One (r726)
+  | 1080 -> One (r727)
+  | 1079 -> One (r728)
+  | 1087 -> One (r730)
+  | 1086 -> One (r731)
+  | 1085 -> One (r732)
+  | 1078 -> One (r733)
+  | 1077 -> One (r734)
+  | 1076 -> One (r735)
+  | 1084 -> One (r736)
+  | 1083 -> One (r737)
+  | 1082 -> One (r738)
+  | 1089 -> One (r739)
+  | 1097 -> One (r740)
+  | 1096 -> One (r741)
+  | 1095 -> One (r742)
+  | 1094 -> One (r743)
+  | 1093 -> One (r744)
+  | 1092 -> One (r745)
+  | 1091 -> One (r746)
+  | 1106 -> One (r747)
+  | 1105 -> One (r748)
+  | 1109 -> One (r749)
+  | 1122 -> One (r750)
+  | 1121 -> One (r751)
+  | 1120 -> One (r752)
+  | 1119 -> One (r753)
+  | 1118 -> One (r754)
+  | 1127 -> One (r755)
+  | 1126 -> One (r756)
+  | 1125 -> One (r757)
+  | 1124 -> One (r758)
+  | 1130 -> One (r759)
+  | 1129 -> One (r760)
+  | 1145 -> One (r761)
+  | 1144 -> One (r762)
+  | 1148 -> One (r763)
+  | 1147 -> One (r764)
+  | 1151 -> One (r765)
+  | 1150 -> One (r766)
+  | 1159 -> One (r767)
+  | 1158 -> One (r768)
+  | 1185 -> One (r769)
+  | 1184 -> One (r770)
+  | 1183 -> One (r771)
+  | 1182 -> One (r772)
+  | 1173 -> One (r773)
+  | 1172 -> One (r775)
+  | 1171 -> One (r776)
+  | 1167 -> One (r777)
+  | 1166 -> One (r778)
+  | 1165 -> One (r779)
+  | 1164 -> One (r780)
+  | 1163 -> One (r781)
+  | 1170 -> One (r782)
+  | 1169 -> One (r783)
+  | 1181 -> One (r784)
+  | 1180 -> One (r785)
+  | 1179 -> One (r786)
+  | 1188 -> One (r787)
+  | 1187 -> One (r788)
+  | 1232 -> One (r789)
+  | 1221 -> One (r790)
+  | 1220 -> One (r791)
+  | 1211 -> One (r792)
+  | 1210 -> One (r794)
+  | 1209 -> One (r795)
+  | 1208 -> One (r796)
+  | 1193 -> One (r797)
+  | 1192 -> One (r798)
+  | 1191 -> One (r799)
+  | 1207 -> One (r800)
+  | 1206 -> One (r802)
+  | 1205 -> One (r803)
+  | 1204 -> One (r804)
+  | 1200 -> One (r805)
+  | 1199 -> One (r806)
+  | 1198 -> One (r807)
+  | 1197 -> One (r808)
+  | 1196 -> One (r809)
+  | 1203 -> One (r810)
+  | 1202 -> One (r811)
+  | 1219 -> One (r812)
+  | 1218 -> One (r813)
+  | 1217 -> One (r814)
+  | 1231 -> One (r815)
+  | 1230 -> One (r816)
+  | 1229 -> One (r817)
+  | 1228 -> One (r818)
+  | 1227 -> One (r819)
+  | 1226 -> One (r820)
+  | 1225 -> One (r821)
+  | 1224 -> One (r822)
+  | 1642 -> One (r823)
+  | 1641 -> One (r824)
+  | 1234 -> One (r825)
+  | 1236 -> One (r826)
+  | 1238 -> One (r827)
+  | 1263 -> One (r828)
+  | 1262 -> One (r829)
+  | 1261 -> One (r830)
+  | 1249 -> One (r831)
+  | 1248 -> One (r832)
+  | 1247 -> One (r833)
+  | 1246 -> One (r834)
+  | 1243 -> One (r835)
+  | 1242 -> One (r836)
+  | 1241 -> One (r837)
+  | 1245 -> One (r838)
+  | 1260 -> One (r839)
+  | 1253 -> One (r840)
+  | 1252 -> One (r841)
+  | 1251 -> One (r842)
+  | 1259 -> One (r843)
+  | 1258 -> One (r844)
+  | 1257 -> One (r845)
+  | 1256 -> One (r846)
+  | 1255 -> One (r847)
+  | 1637 -> One (r848)
+  | 1636 -> One (r849)
+  | 1265 -> One (r850)
+  | 1270 -> One (r851)
+  | 1269 -> One (r852)
+  | 1268 -> One (r853)
+  | 1267 -> One (r854)
+  | 1278 -> One (r855)
+  | 1281 -> One (r857)
+  | 1280 -> One (r858)
+  | 1277 -> One (r859)
+  | 1276 -> One (r860)
+  | 1275 -> One (r861)
+  | 1274 -> One (r862)
+  | 1273 -> One (r863)
+  | 1272 -> One (r864)
+  | 1289 -> One (r865)
+  | 1288 -> One (r866)
+  | 1287 -> One (r867)
+  | 1286 -> One (r868)
+  | 1292 -> One (r872)
+  | 1291 -> One (r873)
+  | 1290 -> One (r874)
+  | 1343 -> One (r875)
+  | 1342 -> One (r876)
+  | 1341 -> One (r877)
+  | 1340 -> One (r878)
+  | 1510 -> One (r879)
+  | 1509 -> One (r880)
+  | 1304 -> One (r881)
+  | 1303 -> One (r882)
+  | 1302 -> One (r883)
+  | 1301 -> One (r884)
+  | 1300 -> One (r885)
+  | 1299 -> One (r886)
+  | 1298 -> One (r887)
+  | 1297 -> One (r888)
+  | 1330 -> One (r889)
+  | 1329 -> One (r890)
+  | 1332 -> One (r892)
+  | 1331 -> One (r893)
+  | 1325 -> One (r894)
+  | 1307 -> One (r895)
+  | 1306 -> One (r896)
+  | 1311 -> One (r897)
+  | 1310 -> One (r898)
+  | 1324 -> One (r899)
+  | 1316 -> One (r900)
+  | 1315 -> One (r901)
+  | 1314 -> One (r902)
+  | 1313 -> One (r903)
+  | 1323 -> One (r904)
+  | 1322 -> One (r905)
+  | 1321 -> One (r906)
+  | 1320 -> One (r907)
+  | 1319 -> One (r908)
+  | 1318 -> One (r909)
+  | 1328 -> One (r910)
+  | 1327 -> One (r911)
+  | 1334 -> One (r912)
+  | 1339 -> One (r913)
+  | 1338 -> One (r914)
+  | 1337 -> One (r915)
+  | 1336 -> One (r916)
+  | 1386 -> One (r917)
+  | 1404 -> One (r919)
+  | 1461 -> One (r921)
+  | 1475 -> One (r923)
+  | 1465 -> One (r924)
+  | 1464 -> One (r925)
+  | 1444 -> One (r926)
+  | 1443 -> One (r927)
+  | 1442 -> One (r928)
+  | 1441 -> One (r929)
+  | 1440 -> One (r930)
+  | 1439 -> One (r931)
+  | 1438 -> One (r932)
+  | 1428 -> One (r933)
+  | 1427 -> One (r934)
+  | 1355 -> One (r935)
+  | 1354 -> One (r936)
+  | 1353 -> One (r937)
+  | 1349 -> One (r938)
+  | 1347 -> One (r939)
+  | 1346 -> One (r940)
+  | 1345 -> One (r941)
+  | 1352 -> One (r942)
+  | 1351 -> One (r943)
+  | 1421 -> One (r944)
+  | 1420 -> One (r945)
+  | 1361 -> One (r946)
+  | 1357 -> One (r947)
+  | 1360 -> One (r948)
+  | 1359 -> One (r949)
+  | 1372 -> One (r950)
+  | 1371 -> One (r951)
+  | 1370 -> One (r952)
+  | 1369 -> One (r953)
+  | 1368 -> One (r954)
+  | 1363 -> One (r955)
+  | 1383 -> One (r956)
+  | 1382 -> One (r957)
+  | 1381 -> One (r958)
+  | 1380 -> One (r959)
+  | 1379 -> One (r960)
+  | 1374 -> One (r961)
+  | 1412 -> One (r962)
+  | 1411 -> One (r963)
+  | 1385 -> One (r964)
+  | 1410 -> One (r965)
+  | 1409 -> One (r966)
+  | 1408 -> One (r967)
+  | 1407 -> One (r968)
+  | 1388 -> One (r969)
+  | 1405 -> One (r970)
+  | 1392 -> One (r971)
+  | 1391 -> One (r972)
+  | 1390 -> One (r973)
+  | 1402 | 1450 -> One (r974)
+  | 1399 -> One (r976)
+  | 1395 -> One (r977)
+  | 1394 -> One (r978)
+  | 1393 | 1449 -> One (r979)
+  | 1398 | 1458 -> One (r980)
+  | 1397 | 1457 -> One (r981)
+  | 1396 | 1456 -> One (r982)
+  | 1401 -> One (r983)
+  | 1417 -> One (r984)
+  | 1416 -> One (r985)
+  | 1415 -> One (r986)
+  | 1419 -> One (r988)
+  | 1418 -> One (r989)
+  | 1414 -> One (r990)
+  | 1423 -> One (r991)
+  | 1426 -> One (r992)
+  | 1437 -> One (r993)
+  | 1436 -> One (r994)
+  | 1435 -> One (r995)
+  | 1434 -> One (r996)
+  | 1433 -> One (r997)
+  | 1432 -> One (r998)
+  | 1431 -> One (r999)
+  | 1430 -> One (r1000)
+  | 1463 -> One (r1001)
+  | 1448 -> One (r1002)
+  | 1447 -> One (r1003)
+  | 1446 -> One (r1004)
+  | 1462 -> One (r1005)
+  | 1452 -> One (r1006)
+  | 1460 -> One (r1007)
+  | 1455 -> One (r1008)
+  | 1454 -> One (r1009)
+  | 1474 -> One (r1010)
+  | 1473 -> One (r1011)
+  | 1472 -> One (r1012)
+  | 1471 -> One (r1013)
+  | 1470 -> One (r1014)
+  | 1469 -> One (r1015)
+  | 1468 -> One (r1016)
+  | 1467 -> One (r1017)
+  | 1483 -> One (r1018)
+  | 1485 -> One (r1019)
+  | 1495 -> One (r1020)
+  | 1494 -> One (r1021)
+  | 1493 -> One (r1022)
+  | 1492 -> One (r1023)
+  | 1491 -> One (r1024)
+  | 1490 -> One (r1025)
+  | 1489 -> One (r1026)
+  | 1488 -> One (r1027)
+  | 1506 -> One (r1028)
+  | 1505 -> One (r1029)
+  | 1504 -> One (r1030)
+  | 1503 -> One (r1031)
+  | 1502 -> One (r1032)
+  | 1501 -> One (r1033)
+  | 1500 -> One (r1034)
+  | 1499 -> One (r1035)
+  | 1498 -> One (r1036)
+  | 1556 -> One (r1037)
+  | 1554 -> One (r1039)
+  | 1597 -> One (r1041)
+  | 1519 -> One (r1042)
+  | 1614 -> One (r1044)
+  | 1605 -> One (r1045)
+  | 1604 -> One (r1046)
+  | 1518 -> One (r1047)
+  | 1517 -> One (r1048)
+  | 1516 -> One (r1049)
+  | 1515 -> One (r1050)
+  | 1514 -> One (r1051)
+  | 1591 -> One (r1052)
+  | 1590 -> One (r1053)
+  | 1522 -> One (r1054)
+  | 1521 -> One (r1055)
+  | 1526 -> One (r1056)
+  | 1525 -> One (r1057)
+  | 1524 -> One (r1058)
+  | 1585 -> One (r1059)
+  | 1584 -> One (r1060)
+  | 1583 -> One (r1061)
+  | 1582 -> One (r1062)
+  | 1581 -> One (r1063)
+  | 1580 -> One (r1064)
+  | 1577 -> One (r1065)
+  | 1529 -> One (r1066)
+  | 1573 -> One (r1067)
+  | 1572 -> One (r1068)
+  | 1567 -> One (r1069)
+  | 1566 -> One (r1070)
+  | 1565 -> One (r1071)
+  | 1564 -> One (r1072)
+  | 1538 -> One (r1073)
+  | 1537 -> One (r1074)
+  | 1536 -> One (r1075)
+  | 1535 -> One (r1076)
+  | 1534 -> One (r1077)
+  | 1533 -> One (r1078)
+  | 1563 -> One (r1079)
+  | 1542 -> One (r1080)
+  | 1541 -> One (r1081)
+  | 1540 -> One (r1082)
+  | 1546 -> One (r1083)
+  | 1545 -> One (r1084)
+  | 1544 -> One (r1085)
+  | 1560 -> One (r1086)
+  | 1550 -> One (r1087)
+  | 1549 -> One (r1088)
+  | 1562 -> One (r1090)
+  | 1548 -> One (r1091)
+  | 1557 -> One (r1092)
+  | 1552 -> One (r1093)
+  | 1571 -> One (r1094)
+  | 1570 -> One (r1095)
+  | 1569 -> One (r1096)
+  | 1576 -> One (r1097)
+  | 1575 -> One (r1098)
+  | 1579 -> One (r1099)
+  | 1589 -> One (r1100)
+  | 1588 -> One (r1101)
+  | 1587 -> One (r1102)
+  | 1593 -> One (r1103)
+  | 1596 -> One (r1104)
+  | 1601 -> One (r1105)
+  | 1600 -> One (r1106)
+  | 1599 -> One (r1107)
+  | 1603 -> One (r1108)
+  | 1613 -> One (r1109)
+  | 1612 -> One (r1110)
+  | 1611 -> One (r1111)
+  | 1610 -> One (r1112)
+  | 1609 -> One (r1113)
+  | 1608 -> One (r1114)
+  | 1607 -> One (r1115)
+  | 1624 -> One (r1116)
+  | 1627 -> One (r1117)
+  | 1629 -> One (r1118)
+  | 1635 -> One (r1119)
+  | 1634 -> One (r1120)
+  | 1655 -> One (r1121)
+  | 1654 -> One (r1122)
+  | 1673 -> One (r1123)
+  | 1672 -> One (r1124)
+  | 1671 -> One (r1125)
+  | 1692 -> One (r1126)
+  | 1691 -> One (r1127)
+  | 1690 -> One (r1128)
+  | 1689 -> One (r1129)
+  | 1695 -> One (r1130)
+  | 1694 -> One (r1131)
+  | 1699 -> One (r1132)
+  | 1705 -> One (r1133)
+  | 1707 -> One (r1134)
+  | 1709 -> One (r1135)
+  | 1722 -> One (r1136)
+  | 1726 -> One (r1137)
+  | 1731 -> One (r1138)
+  | 1734 -> One (r1139)
+  | 1738 -> One (r1140)
+  | 1742 -> One (r1141)
+  | 1753 -> One (r1142)
+  | 1755 -> One (r1143)
+  | 1758 -> One (r1144)
+  | 1757 -> One (r1145)
+  | 1760 -> One (r1146)
+  | 1770 -> One (r1147)
+  | 1766 -> One (r1148)
+  | 1765 -> One (r1149)
+  | 1769 -> One (r1150)
+  | 1768 -> One (r1151)
+  | 1775 -> One (r1152)
+  | 1774 -> One (r1153)
+  | 1773 -> One (r1154)
+  | 1777 -> One (r1155)
+  | 514 -> Select (function
+    | -1 -> [R 98]
+    | _ -> S (T T_DOT) :: r406)
+  | 717 -> Select (function
+    | -1 -> [R 98]
+    | _ -> r589)
+  | 157 -> Select (function
+    | -1 -> r113
+    | _ -> R 182 :: r131)
+  | 373 -> Select (function
+    | -1 -> r113
+    | _ -> R 182 :: r287)
+  | 1282 -> Select (function
+    | -1 -> r878
+    | _ -> R 182 :: r871)
+  | 1513 -> Select (function
+    | -1 -> S (T T_TYPE) :: r941
+    | _ -> R 182 :: r1051)
+  | 532 -> Select (function
+    | -1 -> [R 633]
+    | _ -> r362)
+  | 529 -> Select (function
+    | -1 -> [R 634]
+    | _ -> S (N N_pattern) :: r413)
+  | 161 -> Select (function
+    | -1 -> r137
+    | _ -> R 742 :: r143)
+  | 376 -> Select (function
+    | -1 -> r137
+    | _ -> R 742 :: r293)
+  | 451 -> Select (function
+    | 482 | 575 | 732 | 829 | 951 | 1100 | 1535 | 1569 -> r80
+    | -1 -> S (T T_RPAREN) :: r54
+    | _ -> S (N N_pattern) :: r332)
+  | 86 -> Select (function
+    | -1 -> S (T T_RPAREN) :: r54
+    | _ -> Sub (r1) :: r53)
+  | 484 -> Select (function
+    | -1 -> S (T T_RBRACKET) :: r303
+    | _ -> Sub (r377) :: r379)
+  | 671 -> Select (function
+    | -1 -> S (T T_RBRACKET) :: r303
+    | _ -> Sub (r517) :: r519)
+  | 597 -> Select (function
+    | 60 | 92 | 372 | 439 | 1234 | 1265 -> r472
+    | _ -> S (T T_OPEN) :: r466)
+  | 182 -> Select (function
+    | -1 -> r114
+    | _ -> S (T T_COLON) :: r163)
+  | 188 -> Select (function
+    | 1116 -> r93
+    | _ -> Sub (r91) :: r170)
+  | 189 -> Select (function
+    | 1116 -> r92
+    | _ -> r170)
+  | 422 -> Select (function
+    | -1 -> r109
+    | _ -> r114)
+  | 1669 -> Select (function
+    | -1 -> r109
+    | _ -> r114)
+  | 1668 -> Select (function
+    | -1 -> r110
+    | _ -> r129)
+  | 421 -> Select (function
+    | -1 -> r110
+    | _ -> r285)
+  | 159 -> Select (function
+    | -1 -> r111
+    | _ -> r130)
+  | 375 -> Select (function
+    | -1 -> r111
+    | _ -> r286)
+  | 158 -> Select (function
+    | -1 -> r112
+    | _ -> r131)
+  | 374 -> Select (function
+    | -1 -> r112
+    | _ -> r287)
+  | 378 -> Select (function
+    | -1 -> r135
+    | _ -> r114)
+  | 175 -> Select (function
+    | -1 -> r135
+    | _ -> r114)
+  | 174 -> Select (function
+    | -1 -> r136
+    | _ -> r143)
+  | 377 -> Select (function
+    | -1 -> r136
+    | _ -> r293)
+  | 1285 -> Select (function
+    | -1 -> r875
+    | _ -> r869)
+  | 1284 -> Select (function
+    | -1 -> r876
+    | _ -> r870)
+  | 1283 -> Select (function
+    | -1 -> r877
+    | _ -> r871)
+  | _ -> raise Not_found
-- 
2.29.2

